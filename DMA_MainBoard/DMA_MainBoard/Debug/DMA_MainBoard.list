
DMA_MainBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024c0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080025cc  080025cc  000035cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002684  08002684  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002684  08002684  00003684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800268c  0800268c  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800268c  0800268c  0000368c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002690  08002690  00003690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002694  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000109c  2000005c  080026f0  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010f8  080026f0  000040f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000068a5  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013af  00000000  00000000  0000a92a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000648  00000000  00000000  0000bce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004c7  00000000  00000000  0000c328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c2f  00000000  00000000  0000c7ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000787d  00000000  00000000  0002341e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008226f  00000000  00000000  0002ac9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000acf0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d54  00000000  00000000  000acf50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000aeca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080025b4 	.word	0x080025b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080025b4 	.word	0x080025b4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <uart1_debugf>:

void uart1_debug(const char* msg) {
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 100);
}

void uart1_debugf(const char* format, ...) {
 800015c:	b40f      	push	{r0, r1, r2, r3}
 800015e:	b580      	push	{r7, lr}
 8000160:	b0a2      	sub	sp, #136	@ 0x88
 8000162:	af00      	add	r7, sp, #0
	char buffer[128];
	va_list args;
	va_start(args, format);
 8000164:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000168:	607b      	str	r3, [r7, #4]
	vsnprintf(buffer, sizeof(buffer), format, args);
 800016a:	f107 0008 	add.w	r0, r7, #8
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000174:	2180      	movs	r1, #128	@ 0x80
 8000176:	f001 fd81 	bl	8001c7c <vsniprintf>
	va_end(args);
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 800017a:	f107 0308 	add.w	r3, r7, #8
 800017e:	4618      	mov	r0, r3
 8000180:	f7ff ffe4 	bl	800014c <strlen>
 8000184:	4603      	mov	r3, r0
 8000186:	b29a      	uxth	r2, r3
 8000188:	f107 0108 	add.w	r1, r7, #8
 800018c:	2364      	movs	r3, #100	@ 0x64
 800018e:	4805      	ldr	r0, [pc, #20]	@ (80001a4 <uart1_debugf+0x48>)
 8000190:	f001 fada 	bl	8001748 <HAL_UART_Transmit>
}
 8000194:	bf00      	nop
 8000196:	3788      	adds	r7, #136	@ 0x88
 8000198:	46bd      	mov	sp, r7
 800019a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800019e:	b004      	add	sp, #16
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	20000078 	.word	0x20000078

080001a8 <storeMessage>:

//---------//

void storeMessage(Message_t* record, Message_t* msg) {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b084      	sub	sp, #16
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
 80001b0:	6039      	str	r1, [r7, #0]
	for (int i=0;i<MAX_TOPICS;i++) {
 80001b2:	2300      	movs	r3, #0
 80001b4:	60fb      	str	r3, [r7, #12]
 80001b6:	e01b      	b.n	80001f0 <storeMessage+0x48>
		if (record[i].ID == 0) {
 80001b8:	68fa      	ldr	r2, [r7, #12]
 80001ba:	4613      	mov	r3, r2
 80001bc:	011b      	lsls	r3, r3, #4
 80001be:	4413      	add	r3, r2
 80001c0:	009b      	lsls	r3, r3, #2
 80001c2:	461a      	mov	r2, r3
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	4413      	add	r3, r2
 80001c8:	885b      	ldrh	r3, [r3, #2]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d10d      	bne.n	80001ea <storeMessage+0x42>
		  memcpy(&record[i], msg, MSG_TOTAL_SIZE);
 80001ce:	68fa      	ldr	r2, [r7, #12]
 80001d0:	4613      	mov	r3, r2
 80001d2:	011b      	lsls	r3, r3, #4
 80001d4:	4413      	add	r3, r2
 80001d6:	009b      	lsls	r3, r3, #2
 80001d8:	461a      	mov	r2, r3
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4413      	add	r3, r2
 80001de:	2243      	movs	r2, #67	@ 0x43
 80001e0:	6839      	ldr	r1, [r7, #0]
 80001e2:	4618      	mov	r0, r3
 80001e4:	f001 fd8c 	bl	8001d00 <memcpy>
		  break;
 80001e8:	e006      	b.n	80001f8 <storeMessage+0x50>
	for (int i=0;i<MAX_TOPICS;i++) {
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	3301      	adds	r3, #1
 80001ee:	60fb      	str	r3, [r7, #12]
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	2b0f      	cmp	r3, #15
 80001f4:	dde0      	ble.n	80001b8 <storeMessage+0x10>
		}
	}
}
 80001f6:	bf00      	nop
 80001f8:	bf00      	nop
 80001fa:	3710      	adds	r7, #16
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}

08000200 <findMessage>:

Message_t* findMessage(Message_t* record, uint16_t ID) {
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	460b      	mov	r3, r1
 800020a:	807b      	strh	r3, [r7, #2]
	for (int i=0;i<MAX_TOPICS;i++) {
 800020c:	2300      	movs	r3, #0
 800020e:	60fb      	str	r3, [r7, #12]
 8000210:	e017      	b.n	8000242 <findMessage+0x42>
		if (record[i].ID == ID) return &record[i];
 8000212:	68fa      	ldr	r2, [r7, #12]
 8000214:	4613      	mov	r3, r2
 8000216:	011b      	lsls	r3, r3, #4
 8000218:	4413      	add	r3, r2
 800021a:	009b      	lsls	r3, r3, #2
 800021c:	461a      	mov	r2, r3
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	4413      	add	r3, r2
 8000222:	885b      	ldrh	r3, [r3, #2]
 8000224:	887a      	ldrh	r2, [r7, #2]
 8000226:	429a      	cmp	r2, r3
 8000228:	d108      	bne.n	800023c <findMessage+0x3c>
 800022a:	68fa      	ldr	r2, [r7, #12]
 800022c:	4613      	mov	r3, r2
 800022e:	011b      	lsls	r3, r3, #4
 8000230:	4413      	add	r3, r2
 8000232:	009b      	lsls	r3, r3, #2
 8000234:	461a      	mov	r2, r3
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4413      	add	r3, r2
 800023a:	e006      	b.n	800024a <findMessage+0x4a>
	for (int i=0;i<MAX_TOPICS;i++) {
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	3301      	adds	r3, #1
 8000240:	60fb      	str	r3, [r7, #12]
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	2b0f      	cmp	r3, #15
 8000246:	dde4      	ble.n	8000212 <findMessage+0x12>
	}
	return NULL;
 8000248:	2300      	movs	r3, #0
}
 800024a:	4618      	mov	r0, r3
 800024c:	3714      	adds	r7, #20
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr

08000254 <handleUART>:

void handleUART(UART_HandleTypeDef* huart, uint8_t* rxBuff, uint8_t* txBuff, Message_t* ownRec, Message_t* recA, Message_t* recB) {
 8000254:	b580      	push	{r7, lr}
 8000256:	b086      	sub	sp, #24
 8000258:	af00      	add	r7, sp, #0
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	607a      	str	r2, [r7, #4]
 8000260:	603b      	str	r3, [r7, #0]
	HAL_UART_Receive(huart, rxBuff, MSG_TOTAL_SIZE, 100);
 8000262:	2364      	movs	r3, #100	@ 0x64
 8000264:	2243      	movs	r2, #67	@ 0x43
 8000266:	68b9      	ldr	r1, [r7, #8]
 8000268:	68f8      	ldr	r0, [r7, #12]
 800026a:	f001 faf8 	bl	800185e <HAL_UART_Receive>

	Message_t* msg = (Message_t*) rxBuff;
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	613b      	str	r3, [r7, #16]

	if (msg->type == MSG_TYPE_PUBLISH) {
 8000272:	693b      	ldr	r3, [r7, #16]
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	2b10      	cmp	r3, #16
 8000278:	d10a      	bne.n	8000290 <handleUART+0x3c>
		uart1_debugf("PUBLISH received: ID=%u\r\n", msg->ID); //debugging
 800027a:	693b      	ldr	r3, [r7, #16]
 800027c:	885b      	ldrh	r3, [r3, #2]
 800027e:	4619      	mov	r1, r3
 8000280:	481d      	ldr	r0, [pc, #116]	@ (80002f8 <handleUART+0xa4>)
 8000282:	f7ff ff6b 	bl	800015c <uart1_debugf>
		storeMessage(ownRec, msg);
 8000286:	6939      	ldr	r1, [r7, #16]
 8000288:	6838      	ldr	r0, [r7, #0]
 800028a:	f7ff ff8d 	bl	80001a8 <storeMessage>
			uart1_debugf("Found msg ID=%u, sending back\r\n", msg->ID); //debugging
			memcpy(txBuff, found, MSG_TOTAL_SIZE);
			HAL_UART_Transmit(huart, txBuff, MSG_TOTAL_SIZE, 100);
		}
	}
}
 800028e:	e02e      	b.n	80002ee <handleUART+0x9a>
	else if (msg->type == MSG_TYPE_SUBSCRIBE) {
 8000290:	693b      	ldr	r3, [r7, #16]
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b11      	cmp	r3, #17
 8000296:	d12a      	bne.n	80002ee <handleUART+0x9a>
		uart1_debugf("SUBSCRIBE received: ID=%u\r\n", msg->ID); //debugging
 8000298:	693b      	ldr	r3, [r7, #16]
 800029a:	885b      	ldrh	r3, [r3, #2]
 800029c:	4619      	mov	r1, r3
 800029e:	4817      	ldr	r0, [pc, #92]	@ (80002fc <handleUART+0xa8>)
 80002a0:	f7ff ff5c 	bl	800015c <uart1_debugf>
		Message_t* found = findMessage(recA, msg->ID);
 80002a4:	693b      	ldr	r3, [r7, #16]
 80002a6:	885b      	ldrh	r3, [r3, #2]
 80002a8:	4619      	mov	r1, r3
 80002aa:	6a38      	ldr	r0, [r7, #32]
 80002ac:	f7ff ffa8 	bl	8000200 <findMessage>
 80002b0:	6178      	str	r0, [r7, #20]
		if (!found) found = findMessage(recB, msg->ID);
 80002b2:	697b      	ldr	r3, [r7, #20]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d106      	bne.n	80002c6 <handleUART+0x72>
 80002b8:	693b      	ldr	r3, [r7, #16]
 80002ba:	885b      	ldrh	r3, [r3, #2]
 80002bc:	4619      	mov	r1, r3
 80002be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80002c0:	f7ff ff9e 	bl	8000200 <findMessage>
 80002c4:	6178      	str	r0, [r7, #20]
		if (found) {
 80002c6:	697b      	ldr	r3, [r7, #20]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d010      	beq.n	80002ee <handleUART+0x9a>
			uart1_debugf("Found msg ID=%u, sending back\r\n", msg->ID); //debugging
 80002cc:	693b      	ldr	r3, [r7, #16]
 80002ce:	885b      	ldrh	r3, [r3, #2]
 80002d0:	4619      	mov	r1, r3
 80002d2:	480b      	ldr	r0, [pc, #44]	@ (8000300 <handleUART+0xac>)
 80002d4:	f7ff ff42 	bl	800015c <uart1_debugf>
			memcpy(txBuff, found, MSG_TOTAL_SIZE);
 80002d8:	2243      	movs	r2, #67	@ 0x43
 80002da:	6979      	ldr	r1, [r7, #20]
 80002dc:	6878      	ldr	r0, [r7, #4]
 80002de:	f001 fd0f 	bl	8001d00 <memcpy>
			HAL_UART_Transmit(huart, txBuff, MSG_TOTAL_SIZE, 100);
 80002e2:	2364      	movs	r3, #100	@ 0x64
 80002e4:	2243      	movs	r2, #67	@ 0x43
 80002e6:	6879      	ldr	r1, [r7, #4]
 80002e8:	68f8      	ldr	r0, [r7, #12]
 80002ea:	f001 fa2d 	bl	8001748 <HAL_UART_Transmit>
}
 80002ee:	bf00      	nop
 80002f0:	3718      	adds	r7, #24
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	080025cc 	.word	0x080025cc
 80002fc:	080025e8 	.word	0x080025e8
 8000300:	08002604 	.word	0x08002604

08000304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800030a:	f000 fadb 	bl	80008c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800030e:	f000 f841 	bl	8000394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000312:	f000 f8f9 	bl	8000508 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000316:	f000 f879 	bl	800040c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800031a:	f000 f8a1 	bl	8000460 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800031e:	f000 f8c9 	bl	80004b4 <MX_USART3_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  handleUART(&huart1, UART1_rxBuffer, UART1_txBuffer, UART1_record, UART2_record, UART3_record);
 8000322:	4b10      	ldr	r3, [pc, #64]	@ (8000364 <main+0x60>)
 8000324:	9301      	str	r3, [sp, #4]
 8000326:	4b10      	ldr	r3, [pc, #64]	@ (8000368 <main+0x64>)
 8000328:	9300      	str	r3, [sp, #0]
 800032a:	4b10      	ldr	r3, [pc, #64]	@ (800036c <main+0x68>)
 800032c:	4a10      	ldr	r2, [pc, #64]	@ (8000370 <main+0x6c>)
 800032e:	4911      	ldr	r1, [pc, #68]	@ (8000374 <main+0x70>)
 8000330:	4811      	ldr	r0, [pc, #68]	@ (8000378 <main+0x74>)
 8000332:	f7ff ff8f 	bl	8000254 <handleUART>
	  handleUART(&huart2, UART2_rxBuffer, UART2_txBuffer, UART2_record, UART1_record, UART3_record);
 8000336:	4b0b      	ldr	r3, [pc, #44]	@ (8000364 <main+0x60>)
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	4b0c      	ldr	r3, [pc, #48]	@ (800036c <main+0x68>)
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	4b0a      	ldr	r3, [pc, #40]	@ (8000368 <main+0x64>)
 8000340:	4a0e      	ldr	r2, [pc, #56]	@ (800037c <main+0x78>)
 8000342:	490f      	ldr	r1, [pc, #60]	@ (8000380 <main+0x7c>)
 8000344:	480f      	ldr	r0, [pc, #60]	@ (8000384 <main+0x80>)
 8000346:	f7ff ff85 	bl	8000254 <handleUART>
	  handleUART(&huart3, UART3_rxBuffer, UART3_txBuffer, UART3_record, UART1_record, UART2_record);
 800034a:	4b07      	ldr	r3, [pc, #28]	@ (8000368 <main+0x64>)
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	4b07      	ldr	r3, [pc, #28]	@ (800036c <main+0x68>)
 8000350:	9300      	str	r3, [sp, #0]
 8000352:	4b04      	ldr	r3, [pc, #16]	@ (8000364 <main+0x60>)
 8000354:	4a0c      	ldr	r2, [pc, #48]	@ (8000388 <main+0x84>)
 8000356:	490d      	ldr	r1, [pc, #52]	@ (800038c <main+0x88>)
 8000358:	480d      	ldr	r0, [pc, #52]	@ (8000390 <main+0x8c>)
 800035a:	f7ff ff7b 	bl	8000254 <handleUART>
	  handleUART(&huart1, UART1_rxBuffer, UART1_txBuffer, UART1_record, UART2_record, UART3_record);
 800035e:	bf00      	nop
 8000360:	e7df      	b.n	8000322 <main+0x1e>
 8000362:	bf00      	nop
 8000364:	20000b68 	.word	0x20000b68
 8000368:	20000728 	.word	0x20000728
 800036c:	200002e8 	.word	0x200002e8
 8000370:	2000021c 	.word	0x2000021c
 8000374:	20000150 	.word	0x20000150
 8000378:	20000078 	.word	0x20000078
 800037c:	20000260 	.word	0x20000260
 8000380:	20000194 	.word	0x20000194
 8000384:	200000c0 	.word	0x200000c0
 8000388:	200002a4 	.word	0x200002a4
 800038c:	200001d8 	.word	0x200001d8
 8000390:	20000108 	.word	0x20000108

08000394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b090      	sub	sp, #64	@ 0x40
 8000398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039a:	f107 0318 	add.w	r3, r7, #24
 800039e:	2228      	movs	r2, #40	@ 0x28
 80003a0:	2100      	movs	r1, #0
 80003a2:	4618      	mov	r0, r3
 80003a4:	f001 fc78 	bl	8001c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]
 80003b2:	60da      	str	r2, [r3, #12]
 80003b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003b6:	2302      	movs	r3, #2
 80003b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ba:	2301      	movs	r3, #1
 80003bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003be:	2310      	movs	r3, #16
 80003c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003c2:	2300      	movs	r3, #0
 80003c4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c6:	f107 0318 	add.w	r3, r7, #24
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 fd5c 	bl	8000e88 <HAL_RCC_OscConfig>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003d6:	f000 f8ef 	bl	80005b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003da:	230f      	movs	r3, #15
 80003dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003de:	2300      	movs	r3, #0
 80003e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e2:	2300      	movs	r3, #0
 80003e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e6:	2300      	movs	r3, #0
 80003e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ea:	2300      	movs	r3, #0
 80003ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	2100      	movs	r1, #0
 80003f2:	4618      	mov	r0, r3
 80003f4:	f000 ffca 	bl	800138c <HAL_RCC_ClockConfig>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003fe:	f000 f8db 	bl	80005b8 <Error_Handler>
  }
}
 8000402:	bf00      	nop
 8000404:	3740      	adds	r7, #64	@ 0x40
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
	...

0800040c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000410:	4b11      	ldr	r3, [pc, #68]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 8000412:	4a12      	ldr	r2, [pc, #72]	@ (800045c <MX_USART1_UART_Init+0x50>)
 8000414:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000416:	4b10      	ldr	r3, [pc, #64]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 8000418:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800041c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800041e:	4b0e      	ldr	r3, [pc, #56]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000424:	4b0c      	ldr	r3, [pc, #48]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 8000426:	2200      	movs	r2, #0
 8000428:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800042a:	4b0b      	ldr	r3, [pc, #44]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000430:	4b09      	ldr	r3, [pc, #36]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 8000432:	220c      	movs	r2, #12
 8000434:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000436:	4b08      	ldr	r3, [pc, #32]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 8000438:	2200      	movs	r2, #0
 800043a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800043c:	4b06      	ldr	r3, [pc, #24]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 800043e:	2200      	movs	r2, #0
 8000440:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000442:	4805      	ldr	r0, [pc, #20]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 8000444:	f001 f930 	bl	80016a8 <HAL_UART_Init>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800044e:	f000 f8b3 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	20000078 	.word	0x20000078
 800045c:	40013800 	.word	0x40013800

08000460 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000464:	4b11      	ldr	r3, [pc, #68]	@ (80004ac <MX_USART2_UART_Init+0x4c>)
 8000466:	4a12      	ldr	r2, [pc, #72]	@ (80004b0 <MX_USART2_UART_Init+0x50>)
 8000468:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800046a:	4b10      	ldr	r3, [pc, #64]	@ (80004ac <MX_USART2_UART_Init+0x4c>)
 800046c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000470:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000472:	4b0e      	ldr	r3, [pc, #56]	@ (80004ac <MX_USART2_UART_Init+0x4c>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000478:	4b0c      	ldr	r3, [pc, #48]	@ (80004ac <MX_USART2_UART_Init+0x4c>)
 800047a:	2200      	movs	r2, #0
 800047c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800047e:	4b0b      	ldr	r3, [pc, #44]	@ (80004ac <MX_USART2_UART_Init+0x4c>)
 8000480:	2200      	movs	r2, #0
 8000482:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000484:	4b09      	ldr	r3, [pc, #36]	@ (80004ac <MX_USART2_UART_Init+0x4c>)
 8000486:	220c      	movs	r2, #12
 8000488:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800048a:	4b08      	ldr	r3, [pc, #32]	@ (80004ac <MX_USART2_UART_Init+0x4c>)
 800048c:	2200      	movs	r2, #0
 800048e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000490:	4b06      	ldr	r3, [pc, #24]	@ (80004ac <MX_USART2_UART_Init+0x4c>)
 8000492:	2200      	movs	r2, #0
 8000494:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000496:	4805      	ldr	r0, [pc, #20]	@ (80004ac <MX_USART2_UART_Init+0x4c>)
 8000498:	f001 f906 	bl	80016a8 <HAL_UART_Init>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004a2:	f000 f889 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	200000c0 	.word	0x200000c0
 80004b0:	40004400 	.word	0x40004400

080004b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80004b8:	4b11      	ldr	r3, [pc, #68]	@ (8000500 <MX_USART3_UART_Init+0x4c>)
 80004ba:	4a12      	ldr	r2, [pc, #72]	@ (8000504 <MX_USART3_UART_Init+0x50>)
 80004bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80004be:	4b10      	ldr	r3, [pc, #64]	@ (8000500 <MX_USART3_UART_Init+0x4c>)
 80004c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80004c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000500 <MX_USART3_UART_Init+0x4c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80004cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000500 <MX_USART3_UART_Init+0x4c>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80004d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000500 <MX_USART3_UART_Init+0x4c>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80004d8:	4b09      	ldr	r3, [pc, #36]	@ (8000500 <MX_USART3_UART_Init+0x4c>)
 80004da:	220c      	movs	r2, #12
 80004dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004de:	4b08      	ldr	r3, [pc, #32]	@ (8000500 <MX_USART3_UART_Init+0x4c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e4:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <MX_USART3_UART_Init+0x4c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80004ea:	4805      	ldr	r0, [pc, #20]	@ (8000500 <MX_USART3_UART_Init+0x4c>)
 80004ec:	f001 f8dc 	bl	80016a8 <HAL_UART_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80004f6:	f000 f85f 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000108 	.word	0x20000108
 8000504:	40004800 	.word	0x40004800

08000508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 0310 	add.w	r3, r7, #16
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051c:	4b24      	ldr	r3, [pc, #144]	@ (80005b0 <MX_GPIO_Init+0xa8>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	4a23      	ldr	r2, [pc, #140]	@ (80005b0 <MX_GPIO_Init+0xa8>)
 8000522:	f043 0310 	orr.w	r3, r3, #16
 8000526:	6193      	str	r3, [r2, #24]
 8000528:	4b21      	ldr	r3, [pc, #132]	@ (80005b0 <MX_GPIO_Init+0xa8>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	f003 0310 	and.w	r3, r3, #16
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000534:	4b1e      	ldr	r3, [pc, #120]	@ (80005b0 <MX_GPIO_Init+0xa8>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	4a1d      	ldr	r2, [pc, #116]	@ (80005b0 <MX_GPIO_Init+0xa8>)
 800053a:	f043 0320 	orr.w	r3, r3, #32
 800053e:	6193      	str	r3, [r2, #24]
 8000540:	4b1b      	ldr	r3, [pc, #108]	@ (80005b0 <MX_GPIO_Init+0xa8>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	f003 0320 	and.w	r3, r3, #32
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054c:	4b18      	ldr	r3, [pc, #96]	@ (80005b0 <MX_GPIO_Init+0xa8>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	4a17      	ldr	r2, [pc, #92]	@ (80005b0 <MX_GPIO_Init+0xa8>)
 8000552:	f043 0304 	orr.w	r3, r3, #4
 8000556:	6193      	str	r3, [r2, #24]
 8000558:	4b15      	ldr	r3, [pc, #84]	@ (80005b0 <MX_GPIO_Init+0xa8>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	f003 0304 	and.w	r3, r3, #4
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000564:	4b12      	ldr	r3, [pc, #72]	@ (80005b0 <MX_GPIO_Init+0xa8>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a11      	ldr	r2, [pc, #68]	@ (80005b0 <MX_GPIO_Init+0xa8>)
 800056a:	f043 0308 	orr.w	r3, r3, #8
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b0f      	ldr	r3, [pc, #60]	@ (80005b0 <MX_GPIO_Init+0xa8>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f003 0308 	and.w	r3, r3, #8
 8000578:	603b      	str	r3, [r7, #0]
 800057a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000582:	480c      	ldr	r0, [pc, #48]	@ (80005b4 <MX_GPIO_Init+0xac>)
 8000584:	f000 fc68 	bl	8000e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000588:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800058c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058e:	2301      	movs	r3, #1
 8000590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	2302      	movs	r3, #2
 8000598:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800059a:	f107 0310 	add.w	r3, r7, #16
 800059e:	4619      	mov	r1, r3
 80005a0:	4804      	ldr	r0, [pc, #16]	@ (80005b4 <MX_GPIO_Init+0xac>)
 80005a2:	f000 fad5 	bl	8000b50 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005a6:	bf00      	nop
 80005a8:	3720      	adds	r7, #32
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40021000 	.word	0x40021000
 80005b4:	40011000 	.word	0x40011000

080005b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005bc:	b672      	cpsid	i
}
 80005be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <Error_Handler+0x8>

080005c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ca:	4b15      	ldr	r3, [pc, #84]	@ (8000620 <HAL_MspInit+0x5c>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	4a14      	ldr	r2, [pc, #80]	@ (8000620 <HAL_MspInit+0x5c>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6193      	str	r3, [r2, #24]
 80005d6:	4b12      	ldr	r3, [pc, #72]	@ (8000620 <HAL_MspInit+0x5c>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000620 <HAL_MspInit+0x5c>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000620 <HAL_MspInit+0x5c>)
 80005e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ec:	61d3      	str	r3, [r2, #28]
 80005ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <HAL_MspInit+0x5c>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80005fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000624 <HAL_MspInit+0x60>)
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	4a04      	ldr	r2, [pc, #16]	@ (8000624 <HAL_MspInit+0x60>)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000616:	bf00      	nop
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr
 8000620:	40021000 	.word	0x40021000
 8000624:	40010000 	.word	0x40010000

08000628 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08c      	sub	sp, #48	@ 0x30
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	f107 0320 	add.w	r3, r7, #32
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a53      	ldr	r2, [pc, #332]	@ (8000790 <HAL_UART_MspInit+0x168>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d132      	bne.n	80006ae <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000648:	4b52      	ldr	r3, [pc, #328]	@ (8000794 <HAL_UART_MspInit+0x16c>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a51      	ldr	r2, [pc, #324]	@ (8000794 <HAL_UART_MspInit+0x16c>)
 800064e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000652:	6193      	str	r3, [r2, #24]
 8000654:	4b4f      	ldr	r3, [pc, #316]	@ (8000794 <HAL_UART_MspInit+0x16c>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800065c:	61fb      	str	r3, [r7, #28]
 800065e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000660:	4b4c      	ldr	r3, [pc, #304]	@ (8000794 <HAL_UART_MspInit+0x16c>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a4b      	ldr	r2, [pc, #300]	@ (8000794 <HAL_UART_MspInit+0x16c>)
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b49      	ldr	r3, [pc, #292]	@ (8000794 <HAL_UART_MspInit+0x16c>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	61bb      	str	r3, [r7, #24]
 8000676:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000678:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800067c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067e:	2302      	movs	r3, #2
 8000680:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000682:	2303      	movs	r3, #3
 8000684:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	4619      	mov	r1, r3
 800068c:	4842      	ldr	r0, [pc, #264]	@ (8000798 <HAL_UART_MspInit+0x170>)
 800068e:	f000 fa5f 	bl	8000b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000692:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000698:	2300      	movs	r3, #0
 800069a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	4619      	mov	r1, r3
 80006a6:	483c      	ldr	r0, [pc, #240]	@ (8000798 <HAL_UART_MspInit+0x170>)
 80006a8:	f000 fa52 	bl	8000b50 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80006ac:	e06c      	b.n	8000788 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a3a      	ldr	r2, [pc, #232]	@ (800079c <HAL_UART_MspInit+0x174>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d130      	bne.n	800071a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80006b8:	4b36      	ldr	r3, [pc, #216]	@ (8000794 <HAL_UART_MspInit+0x16c>)
 80006ba:	69db      	ldr	r3, [r3, #28]
 80006bc:	4a35      	ldr	r2, [pc, #212]	@ (8000794 <HAL_UART_MspInit+0x16c>)
 80006be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006c2:	61d3      	str	r3, [r2, #28]
 80006c4:	4b33      	ldr	r3, [pc, #204]	@ (8000794 <HAL_UART_MspInit+0x16c>)
 80006c6:	69db      	ldr	r3, [r3, #28]
 80006c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d0:	4b30      	ldr	r3, [pc, #192]	@ (8000794 <HAL_UART_MspInit+0x16c>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a2f      	ldr	r2, [pc, #188]	@ (8000794 <HAL_UART_MspInit+0x16c>)
 80006d6:	f043 0304 	orr.w	r3, r3, #4
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b2d      	ldr	r3, [pc, #180]	@ (8000794 <HAL_UART_MspInit+0x16c>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0304 	and.w	r3, r3, #4
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006e8:	2304      	movs	r3, #4
 80006ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ec:	2302      	movs	r3, #2
 80006ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f0:	2303      	movs	r3, #3
 80006f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f4:	f107 0320 	add.w	r3, r7, #32
 80006f8:	4619      	mov	r1, r3
 80006fa:	4827      	ldr	r0, [pc, #156]	@ (8000798 <HAL_UART_MspInit+0x170>)
 80006fc:	f000 fa28 	bl	8000b50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000700:	2308      	movs	r3, #8
 8000702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000704:	2300      	movs	r3, #0
 8000706:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	4619      	mov	r1, r3
 8000712:	4821      	ldr	r0, [pc, #132]	@ (8000798 <HAL_UART_MspInit+0x170>)
 8000714:	f000 fa1c 	bl	8000b50 <HAL_GPIO_Init>
}
 8000718:	e036      	b.n	8000788 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a20      	ldr	r2, [pc, #128]	@ (80007a0 <HAL_UART_MspInit+0x178>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d131      	bne.n	8000788 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000724:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <HAL_UART_MspInit+0x16c>)
 8000726:	69db      	ldr	r3, [r3, #28]
 8000728:	4a1a      	ldr	r2, [pc, #104]	@ (8000794 <HAL_UART_MspInit+0x16c>)
 800072a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800072e:	61d3      	str	r3, [r2, #28]
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <HAL_UART_MspInit+0x16c>)
 8000732:	69db      	ldr	r3, [r3, #28]
 8000734:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073c:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <HAL_UART_MspInit+0x16c>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a14      	ldr	r2, [pc, #80]	@ (8000794 <HAL_UART_MspInit+0x16c>)
 8000742:	f043 0308 	orr.w	r3, r3, #8
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <HAL_UART_MspInit+0x16c>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f003 0308 	and.w	r3, r3, #8
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000754:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	2302      	movs	r3, #2
 800075c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800075e:	2303      	movs	r3, #3
 8000760:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000762:	f107 0320 	add.w	r3, r7, #32
 8000766:	4619      	mov	r1, r3
 8000768:	480e      	ldr	r0, [pc, #56]	@ (80007a4 <HAL_UART_MspInit+0x17c>)
 800076a:	f000 f9f1 	bl	8000b50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800076e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000774:	2300      	movs	r3, #0
 8000776:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077c:	f107 0320 	add.w	r3, r7, #32
 8000780:	4619      	mov	r1, r3
 8000782:	4808      	ldr	r0, [pc, #32]	@ (80007a4 <HAL_UART_MspInit+0x17c>)
 8000784:	f000 f9e4 	bl	8000b50 <HAL_GPIO_Init>
}
 8000788:	bf00      	nop
 800078a:	3730      	adds	r7, #48	@ 0x30
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40013800 	.word	0x40013800
 8000794:	40021000 	.word	0x40021000
 8000798:	40010800 	.word	0x40010800
 800079c:	40004400 	.word	0x40004400
 80007a0:	40004800 	.word	0x40004800
 80007a4:	40010c00 	.word	0x40010c00

080007a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <NMI_Handler+0x4>

080007b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <HardFault_Handler+0x4>

080007b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <MemManage_Handler+0x4>

080007c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <BusFault_Handler+0x4>

080007c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <UsageFault_Handler+0x4>

080007d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr

080007dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr

080007e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr

080007f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f8:	f000 f8aa 	bl	8000950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}

08000800 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000808:	4a14      	ldr	r2, [pc, #80]	@ (800085c <_sbrk+0x5c>)
 800080a:	4b15      	ldr	r3, [pc, #84]	@ (8000860 <_sbrk+0x60>)
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000814:	4b13      	ldr	r3, [pc, #76]	@ (8000864 <_sbrk+0x64>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d102      	bne.n	8000822 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800081c:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <_sbrk+0x64>)
 800081e:	4a12      	ldr	r2, [pc, #72]	@ (8000868 <_sbrk+0x68>)
 8000820:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000822:	4b10      	ldr	r3, [pc, #64]	@ (8000864 <_sbrk+0x64>)
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4413      	add	r3, r2
 800082a:	693a      	ldr	r2, [r7, #16]
 800082c:	429a      	cmp	r2, r3
 800082e:	d207      	bcs.n	8000840 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000830:	f001 fa3a 	bl	8001ca8 <__errno>
 8000834:	4603      	mov	r3, r0
 8000836:	220c      	movs	r2, #12
 8000838:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800083a:	f04f 33ff 	mov.w	r3, #4294967295
 800083e:	e009      	b.n	8000854 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000840:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <_sbrk+0x64>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000846:	4b07      	ldr	r3, [pc, #28]	@ (8000864 <_sbrk+0x64>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4413      	add	r3, r2
 800084e:	4a05      	ldr	r2, [pc, #20]	@ (8000864 <_sbrk+0x64>)
 8000850:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000852:	68fb      	ldr	r3, [r7, #12]
}
 8000854:	4618      	mov	r0, r3
 8000856:	3718      	adds	r7, #24
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20005000 	.word	0x20005000
 8000860:	00000400 	.word	0x00000400
 8000864:	20000fa8 	.word	0x20000fa8
 8000868:	200010f8 	.word	0x200010f8

0800086c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr

08000878 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000878:	f7ff fff8 	bl	800086c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800087c:	480b      	ldr	r0, [pc, #44]	@ (80008ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800087e:	490c      	ldr	r1, [pc, #48]	@ (80008b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000880:	4a0c      	ldr	r2, [pc, #48]	@ (80008b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000884:	e002      	b.n	800088c <LoopCopyDataInit>

08000886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088a:	3304      	adds	r3, #4

0800088c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800088c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000890:	d3f9      	bcc.n	8000886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000892:	4a09      	ldr	r2, [pc, #36]	@ (80008b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000894:	4c09      	ldr	r4, [pc, #36]	@ (80008bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000898:	e001      	b.n	800089e <LoopFillZerobss>

0800089a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800089c:	3204      	adds	r2, #4

0800089e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a0:	d3fb      	bcc.n	800089a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008a2:	f001 fa07 	bl	8001cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008a6:	f7ff fd2d 	bl	8000304 <main>
  bx lr
 80008aa:	4770      	bx	lr
  ldr r0, =_sdata
 80008ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80008b4:	08002694 	.word	0x08002694
  ldr r2, =_sbss
 80008b8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80008bc:	200010f8 	.word	0x200010f8

080008c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c0:	e7fe      	b.n	80008c0 <ADC1_2_IRQHandler>
	...

080008c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c8:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <HAL_Init+0x28>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a07      	ldr	r2, [pc, #28]	@ (80008ec <HAL_Init+0x28>)
 80008ce:	f043 0310 	orr.w	r3, r3, #16
 80008d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d4:	2003      	movs	r0, #3
 80008d6:	f000 f907 	bl	8000ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008da:	200f      	movs	r0, #15
 80008dc:	f000 f808 	bl	80008f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e0:	f7ff fe70 	bl	80005c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40022000 	.word	0x40022000

080008f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008f8:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <HAL_InitTick+0x54>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <HAL_InitTick+0x58>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	4619      	mov	r1, r3
 8000902:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000906:	fbb3 f3f1 	udiv	r3, r3, r1
 800090a:	fbb2 f3f3 	udiv	r3, r2, r3
 800090e:	4618      	mov	r0, r3
 8000910:	f000 f911 	bl	8000b36 <HAL_SYSTICK_Config>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
 800091c:	e00e      	b.n	800093c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2b0f      	cmp	r3, #15
 8000922:	d80a      	bhi.n	800093a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000924:	2200      	movs	r2, #0
 8000926:	6879      	ldr	r1, [r7, #4]
 8000928:	f04f 30ff 	mov.w	r0, #4294967295
 800092c:	f000 f8e7 	bl	8000afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000930:	4a06      	ldr	r2, [pc, #24]	@ (800094c <HAL_InitTick+0x5c>)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000936:	2300      	movs	r3, #0
 8000938:	e000      	b.n	800093c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
}
 800093c:	4618      	mov	r0, r3
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000000 	.word	0x20000000
 8000948:	20000008 	.word	0x20000008
 800094c:	20000004 	.word	0x20000004

08000950 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000954:	4b05      	ldr	r3, [pc, #20]	@ (800096c <HAL_IncTick+0x1c>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	461a      	mov	r2, r3
 800095a:	4b05      	ldr	r3, [pc, #20]	@ (8000970 <HAL_IncTick+0x20>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4413      	add	r3, r2
 8000960:	4a03      	ldr	r2, [pc, #12]	@ (8000970 <HAL_IncTick+0x20>)
 8000962:	6013      	str	r3, [r2, #0]
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	20000008 	.word	0x20000008
 8000970:	20000fac 	.word	0x20000fac

08000974 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return uwTick;
 8000978:	4b02      	ldr	r3, [pc, #8]	@ (8000984 <HAL_GetTick+0x10>)
 800097a:	681b      	ldr	r3, [r3, #0]
}
 800097c:	4618      	mov	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	20000fac 	.word	0x20000fac

08000988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000998:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <__NVIC_SetPriorityGrouping+0x44>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009a4:	4013      	ands	r3, r2
 80009a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ba:	4a04      	ldr	r2, [pc, #16]	@ (80009cc <__NVIC_SetPriorityGrouping+0x44>)
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	60d3      	str	r3, [r2, #12]
}
 80009c0:	bf00      	nop
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d4:	4b04      	ldr	r3, [pc, #16]	@ (80009e8 <__NVIC_GetPriorityGrouping+0x18>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	0a1b      	lsrs	r3, r3, #8
 80009da:	f003 0307 	and.w	r3, r3, #7
}
 80009de:	4618      	mov	r0, r3
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	6039      	str	r1, [r7, #0]
 80009f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	db0a      	blt.n	8000a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	490c      	ldr	r1, [pc, #48]	@ (8000a38 <__NVIC_SetPriority+0x4c>)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	0112      	lsls	r2, r2, #4
 8000a0c:	b2d2      	uxtb	r2, r2
 8000a0e:	440b      	add	r3, r1
 8000a10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a14:	e00a      	b.n	8000a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	4908      	ldr	r1, [pc, #32]	@ (8000a3c <__NVIC_SetPriority+0x50>)
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	f003 030f 	and.w	r3, r3, #15
 8000a22:	3b04      	subs	r3, #4
 8000a24:	0112      	lsls	r2, r2, #4
 8000a26:	b2d2      	uxtb	r2, r2
 8000a28:	440b      	add	r3, r1
 8000a2a:	761a      	strb	r2, [r3, #24]
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000e100 	.word	0xe000e100
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b089      	sub	sp, #36	@ 0x24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	f1c3 0307 	rsb	r3, r3, #7
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	bf28      	it	cs
 8000a5e:	2304      	movcs	r3, #4
 8000a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3304      	adds	r3, #4
 8000a66:	2b06      	cmp	r3, #6
 8000a68:	d902      	bls.n	8000a70 <NVIC_EncodePriority+0x30>
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3b03      	subs	r3, #3
 8000a6e:	e000      	b.n	8000a72 <NVIC_EncodePriority+0x32>
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a74:	f04f 32ff 	mov.w	r2, #4294967295
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	43da      	mvns	r2, r3
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	401a      	ands	r2, r3
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a88:	f04f 31ff 	mov.w	r1, #4294967295
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a92:	43d9      	mvns	r1, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	4313      	orrs	r3, r2
         );
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3724      	adds	r7, #36	@ 0x24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr

08000aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ab4:	d301      	bcc.n	8000aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e00f      	b.n	8000ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <SysTick_Config+0x40>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac2:	210f      	movs	r1, #15
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac8:	f7ff ff90 	bl	80009ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000acc:	4b05      	ldr	r3, [pc, #20]	@ (8000ae4 <SysTick_Config+0x40>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad2:	4b04      	ldr	r3, [pc, #16]	@ (8000ae4 <SysTick_Config+0x40>)
 8000ad4:	2207      	movs	r2, #7
 8000ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	e000e010 	.word	0xe000e010

08000ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff ff49 	bl	8000988 <__NVIC_SetPriorityGrouping>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b10:	f7ff ff5e 	bl	80009d0 <__NVIC_GetPriorityGrouping>
 8000b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	68b9      	ldr	r1, [r7, #8]
 8000b1a:	6978      	ldr	r0, [r7, #20]
 8000b1c:	f7ff ff90 	bl	8000a40 <NVIC_EncodePriority>
 8000b20:	4602      	mov	r2, r0
 8000b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff5f 	bl	80009ec <__NVIC_SetPriority>
}
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f7ff ffb0 	bl	8000aa4 <SysTick_Config>
 8000b44:	4603      	mov	r3, r0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b08b      	sub	sp, #44	@ 0x2c
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b62:	e169      	b.n	8000e38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b64:	2201      	movs	r2, #1
 8000b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	69fa      	ldr	r2, [r7, #28]
 8000b74:	4013      	ands	r3, r2
 8000b76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b78:	69ba      	ldr	r2, [r7, #24]
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	f040 8158 	bne.w	8000e32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	4a9a      	ldr	r2, [pc, #616]	@ (8000df0 <HAL_GPIO_Init+0x2a0>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d05e      	beq.n	8000c4a <HAL_GPIO_Init+0xfa>
 8000b8c:	4a98      	ldr	r2, [pc, #608]	@ (8000df0 <HAL_GPIO_Init+0x2a0>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d875      	bhi.n	8000c7e <HAL_GPIO_Init+0x12e>
 8000b92:	4a98      	ldr	r2, [pc, #608]	@ (8000df4 <HAL_GPIO_Init+0x2a4>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d058      	beq.n	8000c4a <HAL_GPIO_Init+0xfa>
 8000b98:	4a96      	ldr	r2, [pc, #600]	@ (8000df4 <HAL_GPIO_Init+0x2a4>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d86f      	bhi.n	8000c7e <HAL_GPIO_Init+0x12e>
 8000b9e:	4a96      	ldr	r2, [pc, #600]	@ (8000df8 <HAL_GPIO_Init+0x2a8>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d052      	beq.n	8000c4a <HAL_GPIO_Init+0xfa>
 8000ba4:	4a94      	ldr	r2, [pc, #592]	@ (8000df8 <HAL_GPIO_Init+0x2a8>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d869      	bhi.n	8000c7e <HAL_GPIO_Init+0x12e>
 8000baa:	4a94      	ldr	r2, [pc, #592]	@ (8000dfc <HAL_GPIO_Init+0x2ac>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d04c      	beq.n	8000c4a <HAL_GPIO_Init+0xfa>
 8000bb0:	4a92      	ldr	r2, [pc, #584]	@ (8000dfc <HAL_GPIO_Init+0x2ac>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d863      	bhi.n	8000c7e <HAL_GPIO_Init+0x12e>
 8000bb6:	4a92      	ldr	r2, [pc, #584]	@ (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d046      	beq.n	8000c4a <HAL_GPIO_Init+0xfa>
 8000bbc:	4a90      	ldr	r2, [pc, #576]	@ (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d85d      	bhi.n	8000c7e <HAL_GPIO_Init+0x12e>
 8000bc2:	2b12      	cmp	r3, #18
 8000bc4:	d82a      	bhi.n	8000c1c <HAL_GPIO_Init+0xcc>
 8000bc6:	2b12      	cmp	r3, #18
 8000bc8:	d859      	bhi.n	8000c7e <HAL_GPIO_Init+0x12e>
 8000bca:	a201      	add	r2, pc, #4	@ (adr r2, 8000bd0 <HAL_GPIO_Init+0x80>)
 8000bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd0:	08000c4b 	.word	0x08000c4b
 8000bd4:	08000c25 	.word	0x08000c25
 8000bd8:	08000c37 	.word	0x08000c37
 8000bdc:	08000c79 	.word	0x08000c79
 8000be0:	08000c7f 	.word	0x08000c7f
 8000be4:	08000c7f 	.word	0x08000c7f
 8000be8:	08000c7f 	.word	0x08000c7f
 8000bec:	08000c7f 	.word	0x08000c7f
 8000bf0:	08000c7f 	.word	0x08000c7f
 8000bf4:	08000c7f 	.word	0x08000c7f
 8000bf8:	08000c7f 	.word	0x08000c7f
 8000bfc:	08000c7f 	.word	0x08000c7f
 8000c00:	08000c7f 	.word	0x08000c7f
 8000c04:	08000c7f 	.word	0x08000c7f
 8000c08:	08000c7f 	.word	0x08000c7f
 8000c0c:	08000c7f 	.word	0x08000c7f
 8000c10:	08000c7f 	.word	0x08000c7f
 8000c14:	08000c2d 	.word	0x08000c2d
 8000c18:	08000c41 	.word	0x08000c41
 8000c1c:	4a79      	ldr	r2, [pc, #484]	@ (8000e04 <HAL_GPIO_Init+0x2b4>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d013      	beq.n	8000c4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c22:	e02c      	b.n	8000c7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	623b      	str	r3, [r7, #32]
          break;
 8000c2a:	e029      	b.n	8000c80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	3304      	adds	r3, #4
 8000c32:	623b      	str	r3, [r7, #32]
          break;
 8000c34:	e024      	b.n	8000c80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	3308      	adds	r3, #8
 8000c3c:	623b      	str	r3, [r7, #32]
          break;
 8000c3e:	e01f      	b.n	8000c80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	330c      	adds	r3, #12
 8000c46:	623b      	str	r3, [r7, #32]
          break;
 8000c48:	e01a      	b.n	8000c80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d102      	bne.n	8000c58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c52:	2304      	movs	r3, #4
 8000c54:	623b      	str	r3, [r7, #32]
          break;
 8000c56:	e013      	b.n	8000c80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d105      	bne.n	8000c6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c60:	2308      	movs	r3, #8
 8000c62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	69fa      	ldr	r2, [r7, #28]
 8000c68:	611a      	str	r2, [r3, #16]
          break;
 8000c6a:	e009      	b.n	8000c80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c6c:	2308      	movs	r3, #8
 8000c6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	69fa      	ldr	r2, [r7, #28]
 8000c74:	615a      	str	r2, [r3, #20]
          break;
 8000c76:	e003      	b.n	8000c80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
          break;
 8000c7c:	e000      	b.n	8000c80 <HAL_GPIO_Init+0x130>
          break;
 8000c7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	2bff      	cmp	r3, #255	@ 0xff
 8000c84:	d801      	bhi.n	8000c8a <HAL_GPIO_Init+0x13a>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	e001      	b.n	8000c8e <HAL_GPIO_Init+0x13e>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	2bff      	cmp	r3, #255	@ 0xff
 8000c94:	d802      	bhi.n	8000c9c <HAL_GPIO_Init+0x14c>
 8000c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	e002      	b.n	8000ca2 <HAL_GPIO_Init+0x152>
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c9e:	3b08      	subs	r3, #8
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	210f      	movs	r1, #15
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	6a39      	ldr	r1, [r7, #32]
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbc:	431a      	orrs	r2, r3
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f000 80b1 	beq.w	8000e32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cd0:	4b4d      	ldr	r3, [pc, #308]	@ (8000e08 <HAL_GPIO_Init+0x2b8>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a4c      	ldr	r2, [pc, #304]	@ (8000e08 <HAL_GPIO_Init+0x2b8>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b4a      	ldr	r3, [pc, #296]	@ (8000e08 <HAL_GPIO_Init+0x2b8>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ce8:	4a48      	ldr	r2, [pc, #288]	@ (8000e0c <HAL_GPIO_Init+0x2bc>)
 8000cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cec:	089b      	lsrs	r3, r3, #2
 8000cee:	3302      	adds	r3, #2
 8000cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf8:	f003 0303 	and.w	r3, r3, #3
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	220f      	movs	r2, #15
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a40      	ldr	r2, [pc, #256]	@ (8000e10 <HAL_GPIO_Init+0x2c0>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d013      	beq.n	8000d3c <HAL_GPIO_Init+0x1ec>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a3f      	ldr	r2, [pc, #252]	@ (8000e14 <HAL_GPIO_Init+0x2c4>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d00d      	beq.n	8000d38 <HAL_GPIO_Init+0x1e8>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a3e      	ldr	r2, [pc, #248]	@ (8000e18 <HAL_GPIO_Init+0x2c8>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d007      	beq.n	8000d34 <HAL_GPIO_Init+0x1e4>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a3d      	ldr	r2, [pc, #244]	@ (8000e1c <HAL_GPIO_Init+0x2cc>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d101      	bne.n	8000d30 <HAL_GPIO_Init+0x1e0>
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	e006      	b.n	8000d3e <HAL_GPIO_Init+0x1ee>
 8000d30:	2304      	movs	r3, #4
 8000d32:	e004      	b.n	8000d3e <HAL_GPIO_Init+0x1ee>
 8000d34:	2302      	movs	r3, #2
 8000d36:	e002      	b.n	8000d3e <HAL_GPIO_Init+0x1ee>
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e000      	b.n	8000d3e <HAL_GPIO_Init+0x1ee>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d40:	f002 0203 	and.w	r2, r2, #3
 8000d44:	0092      	lsls	r2, r2, #2
 8000d46:	4093      	lsls	r3, r2
 8000d48:	68fa      	ldr	r2, [r7, #12]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d4e:	492f      	ldr	r1, [pc, #188]	@ (8000e0c <HAL_GPIO_Init+0x2bc>)
 8000d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d52:	089b      	lsrs	r3, r3, #2
 8000d54:	3302      	adds	r3, #2
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d006      	beq.n	8000d76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d68:	4b2d      	ldr	r3, [pc, #180]	@ (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000d6a:	689a      	ldr	r2, [r3, #8]
 8000d6c:	492c      	ldr	r1, [pc, #176]	@ (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	608b      	str	r3, [r1, #8]
 8000d74:	e006      	b.n	8000d84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d76:	4b2a      	ldr	r3, [pc, #168]	@ (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	4928      	ldr	r1, [pc, #160]	@ (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000d80:	4013      	ands	r3, r2
 8000d82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d006      	beq.n	8000d9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d90:	4b23      	ldr	r3, [pc, #140]	@ (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000d92:	68da      	ldr	r2, [r3, #12]
 8000d94:	4922      	ldr	r1, [pc, #136]	@ (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	60cb      	str	r3, [r1, #12]
 8000d9c:	e006      	b.n	8000dac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d9e:	4b20      	ldr	r3, [pc, #128]	@ (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000da0:	68da      	ldr	r2, [r3, #12]
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	43db      	mvns	r3, r3
 8000da6:	491e      	ldr	r1, [pc, #120]	@ (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000da8:	4013      	ands	r3, r2
 8000daa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d006      	beq.n	8000dc6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000db8:	4b19      	ldr	r3, [pc, #100]	@ (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	4918      	ldr	r1, [pc, #96]	@ (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	604b      	str	r3, [r1, #4]
 8000dc4:	e006      	b.n	8000dd4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dc6:	4b16      	ldr	r3, [pc, #88]	@ (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	4914      	ldr	r1, [pc, #80]	@ (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d021      	beq.n	8000e24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000de0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	490e      	ldr	r1, [pc, #56]	@ (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	600b      	str	r3, [r1, #0]
 8000dec:	e021      	b.n	8000e32 <HAL_GPIO_Init+0x2e2>
 8000dee:	bf00      	nop
 8000df0:	10320000 	.word	0x10320000
 8000df4:	10310000 	.word	0x10310000
 8000df8:	10220000 	.word	0x10220000
 8000dfc:	10210000 	.word	0x10210000
 8000e00:	10120000 	.word	0x10120000
 8000e04:	10110000 	.word	0x10110000
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40010000 	.word	0x40010000
 8000e10:	40010800 	.word	0x40010800
 8000e14:	40010c00 	.word	0x40010c00
 8000e18:	40011000 	.word	0x40011000
 8000e1c:	40011400 	.word	0x40011400
 8000e20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e24:	4b0b      	ldr	r3, [pc, #44]	@ (8000e54 <HAL_GPIO_Init+0x304>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	4909      	ldr	r1, [pc, #36]	@ (8000e54 <HAL_GPIO_Init+0x304>)
 8000e2e:	4013      	ands	r3, r2
 8000e30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e34:	3301      	adds	r3, #1
 8000e36:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f47f ae8e 	bne.w	8000b64 <HAL_GPIO_Init+0x14>
  }
}
 8000e48:	bf00      	nop
 8000e4a:	bf00      	nop
 8000e4c:	372c      	adds	r7, #44	@ 0x2c
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	40010400 	.word	0x40010400

08000e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	807b      	strh	r3, [r7, #2]
 8000e64:	4613      	mov	r3, r2
 8000e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e68:	787b      	ldrb	r3, [r7, #1]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e6e:	887a      	ldrh	r2, [r7, #2]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e74:	e003      	b.n	8000e7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e76:	887b      	ldrh	r3, [r7, #2]
 8000e78:	041a      	lsls	r2, r3, #16
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	611a      	str	r2, [r3, #16]
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr

08000e88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d101      	bne.n	8000e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e272      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f000 8087 	beq.w	8000fb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ea8:	4b92      	ldr	r3, [pc, #584]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 030c 	and.w	r3, r3, #12
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	d00c      	beq.n	8000ece <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eb4:	4b8f      	ldr	r3, [pc, #572]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 030c 	and.w	r3, r3, #12
 8000ebc:	2b08      	cmp	r3, #8
 8000ebe:	d112      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x5e>
 8000ec0:	4b8c      	ldr	r3, [pc, #560]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ecc:	d10b      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ece:	4b89      	ldr	r3, [pc, #548]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d06c      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x12c>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d168      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e24c      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000eee:	d106      	bne.n	8000efe <HAL_RCC_OscConfig+0x76>
 8000ef0:	4b80      	ldr	r3, [pc, #512]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a7f      	ldr	r2, [pc, #508]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	e02e      	b.n	8000f5c <HAL_RCC_OscConfig+0xd4>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d10c      	bne.n	8000f20 <HAL_RCC_OscConfig+0x98>
 8000f06:	4b7b      	ldr	r3, [pc, #492]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a7a      	ldr	r2, [pc, #488]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	4b78      	ldr	r3, [pc, #480]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a77      	ldr	r2, [pc, #476]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	e01d      	b.n	8000f5c <HAL_RCC_OscConfig+0xd4>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f28:	d10c      	bne.n	8000f44 <HAL_RCC_OscConfig+0xbc>
 8000f2a:	4b72      	ldr	r3, [pc, #456]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a71      	ldr	r2, [pc, #452]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	4b6f      	ldr	r3, [pc, #444]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a6e      	ldr	r2, [pc, #440]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	e00b      	b.n	8000f5c <HAL_RCC_OscConfig+0xd4>
 8000f44:	4b6b      	ldr	r3, [pc, #428]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a6a      	ldr	r2, [pc, #424]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	4b68      	ldr	r3, [pc, #416]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a67      	ldr	r2, [pc, #412]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d013      	beq.n	8000f8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f64:	f7ff fd06 	bl	8000974 <HAL_GetTick>
 8000f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6a:	e008      	b.n	8000f7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f6c:	f7ff fd02 	bl	8000974 <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b64      	cmp	r3, #100	@ 0x64
 8000f78:	d901      	bls.n	8000f7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e200      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f7e:	4b5d      	ldr	r3, [pc, #372]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0f0      	beq.n	8000f6c <HAL_RCC_OscConfig+0xe4>
 8000f8a:	e014      	b.n	8000fb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8c:	f7ff fcf2 	bl	8000974 <HAL_GetTick>
 8000f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f92:	e008      	b.n	8000fa6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f94:	f7ff fcee 	bl	8000974 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b64      	cmp	r3, #100	@ 0x64
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e1ec      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa6:	4b53      	ldr	r3, [pc, #332]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1f0      	bne.n	8000f94 <HAL_RCC_OscConfig+0x10c>
 8000fb2:	e000      	b.n	8000fb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d063      	beq.n	800108a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fc2:	4b4c      	ldr	r3, [pc, #304]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 030c 	and.w	r3, r3, #12
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00b      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fce:	4b49      	ldr	r3, [pc, #292]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 030c 	and.w	r3, r3, #12
 8000fd6:	2b08      	cmp	r3, #8
 8000fd8:	d11c      	bne.n	8001014 <HAL_RCC_OscConfig+0x18c>
 8000fda:	4b46      	ldr	r3, [pc, #280]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d116      	bne.n	8001014 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fe6:	4b43      	ldr	r3, [pc, #268]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d005      	beq.n	8000ffe <HAL_RCC_OscConfig+0x176>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d001      	beq.n	8000ffe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e1c0      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ffe:	4b3d      	ldr	r3, [pc, #244]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	4939      	ldr	r1, [pc, #228]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 800100e:	4313      	orrs	r3, r2
 8001010:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001012:	e03a      	b.n	800108a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d020      	beq.n	800105e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800101c:	4b36      	ldr	r3, [pc, #216]	@ (80010f8 <HAL_RCC_OscConfig+0x270>)
 800101e:	2201      	movs	r2, #1
 8001020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001022:	f7ff fca7 	bl	8000974 <HAL_GetTick>
 8001026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800102a:	f7ff fca3 	bl	8000974 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e1a1      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800103c:	4b2d      	ldr	r3, [pc, #180]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0f0      	beq.n	800102a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001048:	4b2a      	ldr	r3, [pc, #168]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	695b      	ldr	r3, [r3, #20]
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	4927      	ldr	r1, [pc, #156]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8001058:	4313      	orrs	r3, r2
 800105a:	600b      	str	r3, [r1, #0]
 800105c:	e015      	b.n	800108a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800105e:	4b26      	ldr	r3, [pc, #152]	@ (80010f8 <HAL_RCC_OscConfig+0x270>)
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff fc86 	bl	8000974 <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800106c:	f7ff fc82 	bl	8000974 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e180      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800107e:	4b1d      	ldr	r3, [pc, #116]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f0      	bne.n	800106c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	2b00      	cmp	r3, #0
 8001094:	d03a      	beq.n	800110c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d019      	beq.n	80010d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800109e:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <HAL_RCC_OscConfig+0x274>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a4:	f7ff fc66 	bl	8000974 <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010ac:	f7ff fc62 	bl	8000974 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e160      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010be:	4b0d      	ldr	r3, [pc, #52]	@ (80010f4 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d0f0      	beq.n	80010ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010ca:	2001      	movs	r0, #1
 80010cc:	f000 face 	bl	800166c <RCC_Delay>
 80010d0:	e01c      	b.n	800110c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010d2:	4b0a      	ldr	r3, [pc, #40]	@ (80010fc <HAL_RCC_OscConfig+0x274>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d8:	f7ff fc4c 	bl	8000974 <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010de:	e00f      	b.n	8001100 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e0:	f7ff fc48 	bl	8000974 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d908      	bls.n	8001100 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e146      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000
 80010f8:	42420000 	.word	0x42420000
 80010fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001100:	4b92      	ldr	r3, [pc, #584]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 8001102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1e9      	bne.n	80010e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	f000 80a6 	beq.w	8001266 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800111a:	2300      	movs	r3, #0
 800111c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800111e:	4b8b      	ldr	r3, [pc, #556]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10d      	bne.n	8001146 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800112a:	4b88      	ldr	r3, [pc, #544]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	4a87      	ldr	r2, [pc, #540]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 8001130:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001134:	61d3      	str	r3, [r2, #28]
 8001136:	4b85      	ldr	r3, [pc, #532]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001142:	2301      	movs	r3, #1
 8001144:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001146:	4b82      	ldr	r3, [pc, #520]	@ (8001350 <HAL_RCC_OscConfig+0x4c8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800114e:	2b00      	cmp	r3, #0
 8001150:	d118      	bne.n	8001184 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001152:	4b7f      	ldr	r3, [pc, #508]	@ (8001350 <HAL_RCC_OscConfig+0x4c8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a7e      	ldr	r2, [pc, #504]	@ (8001350 <HAL_RCC_OscConfig+0x4c8>)
 8001158:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800115c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800115e:	f7ff fc09 	bl	8000974 <HAL_GetTick>
 8001162:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001164:	e008      	b.n	8001178 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001166:	f7ff fc05 	bl	8000974 <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b64      	cmp	r3, #100	@ 0x64
 8001172:	d901      	bls.n	8001178 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e103      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001178:	4b75      	ldr	r3, [pc, #468]	@ (8001350 <HAL_RCC_OscConfig+0x4c8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0f0      	beq.n	8001166 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d106      	bne.n	800119a <HAL_RCC_OscConfig+0x312>
 800118c:	4b6f      	ldr	r3, [pc, #444]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	4a6e      	ldr	r2, [pc, #440]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6213      	str	r3, [r2, #32]
 8001198:	e02d      	b.n	80011f6 <HAL_RCC_OscConfig+0x36e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10c      	bne.n	80011bc <HAL_RCC_OscConfig+0x334>
 80011a2:	4b6a      	ldr	r3, [pc, #424]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	4a69      	ldr	r2, [pc, #420]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	f023 0301 	bic.w	r3, r3, #1
 80011ac:	6213      	str	r3, [r2, #32]
 80011ae:	4b67      	ldr	r3, [pc, #412]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	4a66      	ldr	r2, [pc, #408]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011b4:	f023 0304 	bic.w	r3, r3, #4
 80011b8:	6213      	str	r3, [r2, #32]
 80011ba:	e01c      	b.n	80011f6 <HAL_RCC_OscConfig+0x36e>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	2b05      	cmp	r3, #5
 80011c2:	d10c      	bne.n	80011de <HAL_RCC_OscConfig+0x356>
 80011c4:	4b61      	ldr	r3, [pc, #388]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	4a60      	ldr	r2, [pc, #384]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	6213      	str	r3, [r2, #32]
 80011d0:	4b5e      	ldr	r3, [pc, #376]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	4a5d      	ldr	r2, [pc, #372]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	6213      	str	r3, [r2, #32]
 80011dc:	e00b      	b.n	80011f6 <HAL_RCC_OscConfig+0x36e>
 80011de:	4b5b      	ldr	r3, [pc, #364]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	4a5a      	ldr	r2, [pc, #360]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	f023 0301 	bic.w	r3, r3, #1
 80011e8:	6213      	str	r3, [r2, #32]
 80011ea:	4b58      	ldr	r3, [pc, #352]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011ec:	6a1b      	ldr	r3, [r3, #32]
 80011ee:	4a57      	ldr	r2, [pc, #348]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	f023 0304 	bic.w	r3, r3, #4
 80011f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d015      	beq.n	800122a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fe:	f7ff fbb9 	bl	8000974 <HAL_GetTick>
 8001202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001204:	e00a      	b.n	800121c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001206:	f7ff fbb5 	bl	8000974 <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001214:	4293      	cmp	r3, r2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e0b1      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800121c:	4b4b      	ldr	r3, [pc, #300]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0ee      	beq.n	8001206 <HAL_RCC_OscConfig+0x37e>
 8001228:	e014      	b.n	8001254 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122a:	f7ff fba3 	bl	8000974 <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001230:	e00a      	b.n	8001248 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001232:	f7ff fb9f 	bl	8000974 <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001240:	4293      	cmp	r3, r2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e09b      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001248:	4b40      	ldr	r3, [pc, #256]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1ee      	bne.n	8001232 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001254:	7dfb      	ldrb	r3, [r7, #23]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d105      	bne.n	8001266 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800125a:	4b3c      	ldr	r3, [pc, #240]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	4a3b      	ldr	r2, [pc, #236]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 8001260:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001264:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 8087 	beq.w	800137e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001270:	4b36      	ldr	r3, [pc, #216]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 030c 	and.w	r3, r3, #12
 8001278:	2b08      	cmp	r3, #8
 800127a:	d061      	beq.n	8001340 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	69db      	ldr	r3, [r3, #28]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d146      	bne.n	8001312 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001284:	4b33      	ldr	r3, [pc, #204]	@ (8001354 <HAL_RCC_OscConfig+0x4cc>)
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128a:	f7ff fb73 	bl	8000974 <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001290:	e008      	b.n	80012a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001292:	f7ff fb6f 	bl	8000974 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e06d      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a4:	4b29      	ldr	r3, [pc, #164]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1f0      	bne.n	8001292 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a1b      	ldr	r3, [r3, #32]
 80012b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012b8:	d108      	bne.n	80012cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012ba:	4b24      	ldr	r3, [pc, #144]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	4921      	ldr	r1, [pc, #132]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012cc:	4b1f      	ldr	r3, [pc, #124]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a19      	ldr	r1, [r3, #32]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012dc:	430b      	orrs	r3, r1
 80012de:	491b      	ldr	r1, [pc, #108]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001354 <HAL_RCC_OscConfig+0x4cc>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ea:	f7ff fb43 	bl	8000974 <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f2:	f7ff fb3f 	bl	8000974 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e03d      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001304:	4b11      	ldr	r3, [pc, #68]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0f0      	beq.n	80012f2 <HAL_RCC_OscConfig+0x46a>
 8001310:	e035      	b.n	800137e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001312:	4b10      	ldr	r3, [pc, #64]	@ (8001354 <HAL_RCC_OscConfig+0x4cc>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fb2c 	bl	8000974 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001320:	f7ff fb28 	bl	8000974 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e026      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <HAL_RCC_OscConfig+0x4c4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0x498>
 800133e:	e01e      	b.n	800137e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d107      	bne.n	8001358 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e019      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
 800134c:	40021000 	.word	0x40021000
 8001350:	40007000 	.word	0x40007000
 8001354:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001358:	4b0b      	ldr	r3, [pc, #44]	@ (8001388 <HAL_RCC_OscConfig+0x500>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	429a      	cmp	r2, r3
 800136a:	d106      	bne.n	800137a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001376:	429a      	cmp	r2, r3
 8001378:	d001      	beq.n	800137e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e000      	b.n	8001380 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40021000 	.word	0x40021000

0800138c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d101      	bne.n	80013a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e0d0      	b.n	8001542 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013a0:	4b6a      	ldr	r3, [pc, #424]	@ (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d910      	bls.n	80013d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ae:	4b67      	ldr	r3, [pc, #412]	@ (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 0207 	bic.w	r2, r3, #7
 80013b6:	4965      	ldr	r1, [pc, #404]	@ (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013be:	4b63      	ldr	r3, [pc, #396]	@ (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d001      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e0b8      	b.n	8001542 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d020      	beq.n	800141e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d005      	beq.n	80013f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013e8:	4b59      	ldr	r3, [pc, #356]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	4a58      	ldr	r2, [pc, #352]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 80013ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80013f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d005      	beq.n	800140c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001400:	4b53      	ldr	r3, [pc, #332]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	4a52      	ldr	r2, [pc, #328]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 8001406:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800140a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800140c:	4b50      	ldr	r3, [pc, #320]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	494d      	ldr	r1, [pc, #308]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 800141a:	4313      	orrs	r3, r2
 800141c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d040      	beq.n	80014ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d107      	bne.n	8001442 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001432:	4b47      	ldr	r3, [pc, #284]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d115      	bne.n	800146a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e07f      	b.n	8001542 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d107      	bne.n	800145a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800144a:	4b41      	ldr	r3, [pc, #260]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d109      	bne.n	800146a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e073      	b.n	8001542 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145a:	4b3d      	ldr	r3, [pc, #244]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e06b      	b.n	8001542 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800146a:	4b39      	ldr	r3, [pc, #228]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f023 0203 	bic.w	r2, r3, #3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	4936      	ldr	r1, [pc, #216]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 8001478:	4313      	orrs	r3, r2
 800147a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800147c:	f7ff fa7a 	bl	8000974 <HAL_GetTick>
 8001480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001482:	e00a      	b.n	800149a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001484:	f7ff fa76 	bl	8000974 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001492:	4293      	cmp	r3, r2
 8001494:	d901      	bls.n	800149a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e053      	b.n	8001542 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149a:	4b2d      	ldr	r3, [pc, #180]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 020c 	and.w	r2, r3, #12
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d1eb      	bne.n	8001484 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014ac:	4b27      	ldr	r3, [pc, #156]	@ (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0307 	and.w	r3, r3, #7
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d210      	bcs.n	80014dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ba:	4b24      	ldr	r3, [pc, #144]	@ (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f023 0207 	bic.w	r2, r3, #7
 80014c2:	4922      	ldr	r1, [pc, #136]	@ (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ca:	4b20      	ldr	r3, [pc, #128]	@ (800154c <HAL_RCC_ClockConfig+0x1c0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d001      	beq.n	80014dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e032      	b.n	8001542 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d008      	beq.n	80014fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014e8:	4b19      	ldr	r3, [pc, #100]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	4916      	ldr	r1, [pc, #88]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	2b00      	cmp	r3, #0
 8001504:	d009      	beq.n	800151a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001506:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	490e      	ldr	r1, [pc, #56]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 8001516:	4313      	orrs	r3, r2
 8001518:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800151a:	f000 f821 	bl	8001560 <HAL_RCC_GetSysClockFreq>
 800151e:	4602      	mov	r2, r0
 8001520:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <HAL_RCC_ClockConfig+0x1c4>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	091b      	lsrs	r3, r3, #4
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	490a      	ldr	r1, [pc, #40]	@ (8001554 <HAL_RCC_ClockConfig+0x1c8>)
 800152c:	5ccb      	ldrb	r3, [r1, r3]
 800152e:	fa22 f303 	lsr.w	r3, r2, r3
 8001532:	4a09      	ldr	r2, [pc, #36]	@ (8001558 <HAL_RCC_ClockConfig+0x1cc>)
 8001534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001536:	4b09      	ldr	r3, [pc, #36]	@ (800155c <HAL_RCC_ClockConfig+0x1d0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff f9d8 	bl	80008f0 <HAL_InitTick>

  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40022000 	.word	0x40022000
 8001550:	40021000 	.word	0x40021000
 8001554:	08002624 	.word	0x08002624
 8001558:	20000000 	.word	0x20000000
 800155c:	20000004 	.word	0x20000004

08001560 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001560:	b480      	push	{r7}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800157a:	4b1e      	ldr	r3, [pc, #120]	@ (80015f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	2b04      	cmp	r3, #4
 8001588:	d002      	beq.n	8001590 <HAL_RCC_GetSysClockFreq+0x30>
 800158a:	2b08      	cmp	r3, #8
 800158c:	d003      	beq.n	8001596 <HAL_RCC_GetSysClockFreq+0x36>
 800158e:	e027      	b.n	80015e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001590:	4b19      	ldr	r3, [pc, #100]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001592:	613b      	str	r3, [r7, #16]
      break;
 8001594:	e027      	b.n	80015e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	0c9b      	lsrs	r3, r3, #18
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	4a17      	ldr	r2, [pc, #92]	@ (80015fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80015a0:	5cd3      	ldrb	r3, [r2, r3]
 80015a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d010      	beq.n	80015d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015ae:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	0c5b      	lsrs	r3, r3, #17
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	4a11      	ldr	r2, [pc, #68]	@ (8001600 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015ba:	5cd3      	ldrb	r3, [r2, r3]
 80015bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a0d      	ldr	r2, [pc, #52]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80015c2:	fb03 f202 	mul.w	r2, r3, r2
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	e004      	b.n	80015da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001604 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015d4:	fb02 f303 	mul.w	r3, r2, r3
 80015d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	613b      	str	r3, [r7, #16]
      break;
 80015de:	e002      	b.n	80015e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015e0:	4b05      	ldr	r3, [pc, #20]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80015e2:	613b      	str	r3, [r7, #16]
      break;
 80015e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015e6:	693b      	ldr	r3, [r7, #16]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	371c      	adds	r7, #28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40021000 	.word	0x40021000
 80015f8:	007a1200 	.word	0x007a1200
 80015fc:	0800263c 	.word	0x0800263c
 8001600:	0800264c 	.word	0x0800264c
 8001604:	003d0900 	.word	0x003d0900

08001608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800160c:	4b02      	ldr	r3, [pc, #8]	@ (8001618 <HAL_RCC_GetHCLKFreq+0x10>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	20000000 	.word	0x20000000

0800161c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001620:	f7ff fff2 	bl	8001608 <HAL_RCC_GetHCLKFreq>
 8001624:	4602      	mov	r2, r0
 8001626:	4b05      	ldr	r3, [pc, #20]	@ (800163c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	0a1b      	lsrs	r3, r3, #8
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	4903      	ldr	r1, [pc, #12]	@ (8001640 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001632:	5ccb      	ldrb	r3, [r1, r3]
 8001634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001638:	4618      	mov	r0, r3
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40021000 	.word	0x40021000
 8001640:	08002634 	.word	0x08002634

08001644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001648:	f7ff ffde 	bl	8001608 <HAL_RCC_GetHCLKFreq>
 800164c:	4602      	mov	r2, r0
 800164e:	4b05      	ldr	r3, [pc, #20]	@ (8001664 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	0adb      	lsrs	r3, r3, #11
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	4903      	ldr	r1, [pc, #12]	@ (8001668 <HAL_RCC_GetPCLK2Freq+0x24>)
 800165a:	5ccb      	ldrb	r3, [r1, r3]
 800165c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001660:	4618      	mov	r0, r3
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40021000 	.word	0x40021000
 8001668:	08002634 	.word	0x08002634

0800166c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001674:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <RCC_Delay+0x34>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0a      	ldr	r2, [pc, #40]	@ (80016a4 <RCC_Delay+0x38>)
 800167a:	fba2 2303 	umull	r2, r3, r2, r3
 800167e:	0a5b      	lsrs	r3, r3, #9
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	fb02 f303 	mul.w	r3, r2, r3
 8001686:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001688:	bf00      	nop
  }
  while (Delay --);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	1e5a      	subs	r2, r3, #1
 800168e:	60fa      	str	r2, [r7, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1f9      	bne.n	8001688 <RCC_Delay+0x1c>
}
 8001694:	bf00      	nop
 8001696:	bf00      	nop
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	20000000 	.word	0x20000000
 80016a4:	10624dd3 	.word	0x10624dd3

080016a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e042      	b.n	8001740 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d106      	bne.n	80016d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7fe ffaa 	bl	8000628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2224      	movs	r2, #36	@ 0x24
 80016d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80016ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f000 fa09 	bl	8001b04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	691a      	ldr	r2, [r3, #16]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001700:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	695a      	ldr	r2, [r3, #20]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001710:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68da      	ldr	r2, [r3, #12]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001720:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2220      	movs	r2, #32
 800172c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2220      	movs	r2, #32
 8001734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	@ 0x28
 800174c:	af02      	add	r7, sp, #8
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	4613      	mov	r3, r2
 8001756:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b20      	cmp	r3, #32
 8001766:	d175      	bne.n	8001854 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d002      	beq.n	8001774 <HAL_UART_Transmit+0x2c>
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e06e      	b.n	8001856 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2221      	movs	r2, #33	@ 0x21
 8001782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001786:	f7ff f8f5 	bl	8000974 <HAL_GetTick>
 800178a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	88fa      	ldrh	r2, [r7, #6]
 8001790:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	88fa      	ldrh	r2, [r7, #6]
 8001796:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017a0:	d108      	bne.n	80017b4 <HAL_UART_Transmit+0x6c>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d104      	bne.n	80017b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	61bb      	str	r3, [r7, #24]
 80017b2:	e003      	b.n	80017bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80017bc:	e02e      	b.n	800181c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	2200      	movs	r2, #0
 80017c6:	2180      	movs	r1, #128	@ 0x80
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f000 f8df 	bl	800198c <UART_WaitOnFlagUntilTimeout>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2220      	movs	r2, #32
 80017d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e03a      	b.n	8001856 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10b      	bne.n	80017fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80017f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	3302      	adds	r3, #2
 80017fa:	61bb      	str	r3, [r7, #24]
 80017fc:	e007      	b.n	800180e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	781a      	ldrb	r2, [r3, #0]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	3301      	adds	r3, #1
 800180c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001812:	b29b      	uxth	r3, r3
 8001814:	3b01      	subs	r3, #1
 8001816:	b29a      	uxth	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001820:	b29b      	uxth	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1cb      	bne.n	80017be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	2200      	movs	r2, #0
 800182e:	2140      	movs	r1, #64	@ 0x40
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f000 f8ab 	bl	800198c <UART_WaitOnFlagUntilTimeout>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2220      	movs	r2, #32
 8001840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e006      	b.n	8001856 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2220      	movs	r2, #32
 800184c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001850:	2300      	movs	r3, #0
 8001852:	e000      	b.n	8001856 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001854:	2302      	movs	r3, #2
  }
}
 8001856:	4618      	mov	r0, r3
 8001858:	3720      	adds	r7, #32
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b08a      	sub	sp, #40	@ 0x28
 8001862:	af02      	add	r7, sp, #8
 8001864:	60f8      	str	r0, [r7, #12]
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	603b      	str	r3, [r7, #0]
 800186a:	4613      	mov	r3, r2
 800186c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b20      	cmp	r3, #32
 800187c:	f040 8081 	bne.w	8001982 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d002      	beq.n	800188c <HAL_UART_Receive+0x2e>
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e079      	b.n	8001984 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2222      	movs	r2, #34	@ 0x22
 800189a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80018a4:	f7ff f866 	bl	8000974 <HAL_GetTick>
 80018a8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	88fa      	ldrh	r2, [r7, #6]
 80018ae:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	88fa      	ldrh	r2, [r7, #6]
 80018b4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018be:	d108      	bne.n	80018d2 <HAL_UART_Receive+0x74>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d104      	bne.n	80018d2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	61bb      	str	r3, [r7, #24]
 80018d0:	e003      	b.n	80018da <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80018da:	e047      	b.n	800196c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	2200      	movs	r2, #0
 80018e4:	2120      	movs	r1, #32
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 f850 	bl	800198c <UART_WaitOnFlagUntilTimeout>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d005      	beq.n	80018fe <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2220      	movs	r2, #32
 80018f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e042      	b.n	8001984 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10c      	bne.n	800191e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	b29b      	uxth	r3, r3
 800190c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001910:	b29a      	uxth	r2, r3
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	3302      	adds	r3, #2
 800191a:	61bb      	str	r3, [r7, #24]
 800191c:	e01f      	b.n	800195e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001926:	d007      	beq.n	8001938 <HAL_UART_Receive+0xda>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10a      	bne.n	8001946 <HAL_UART_Receive+0xe8>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d106      	bne.n	8001946 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	b2da      	uxtb	r2, r3
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	701a      	strb	r2, [r3, #0]
 8001944:	e008      	b.n	8001958 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001952:	b2da      	uxtb	r2, r3
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	3301      	adds	r3, #1
 800195c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001962:	b29b      	uxth	r3, r3
 8001964:	3b01      	subs	r3, #1
 8001966:	b29a      	uxth	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001970:	b29b      	uxth	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1b2      	bne.n	80018dc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2220      	movs	r2, #32
 800197a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	e000      	b.n	8001984 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001982:	2302      	movs	r3, #2
  }
}
 8001984:	4618      	mov	r0, r3
 8001986:	3720      	adds	r7, #32
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	4613      	mov	r3, r2
 800199a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800199c:	e03b      	b.n	8001a16 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a4:	d037      	beq.n	8001a16 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019a6:	f7fe ffe5 	bl	8000974 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	6a3a      	ldr	r2, [r7, #32]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d302      	bcc.n	80019bc <UART_WaitOnFlagUntilTimeout+0x30>
 80019b6:	6a3b      	ldr	r3, [r7, #32]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e03a      	b.n	8001a36 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d023      	beq.n	8001a16 <UART_WaitOnFlagUntilTimeout+0x8a>
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	2b80      	cmp	r3, #128	@ 0x80
 80019d2:	d020      	beq.n	8001a16 <UART_WaitOnFlagUntilTimeout+0x8a>
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2b40      	cmp	r3, #64	@ 0x40
 80019d8:	d01d      	beq.n	8001a16 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d116      	bne.n	8001a16 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f000 f81d 	bl	8001a3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2208      	movs	r2, #8
 8001a08:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e00f      	b.n	8001a36 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	bf0c      	ite	eq
 8001a26:	2301      	moveq	r3, #1
 8001a28:	2300      	movne	r3, #0
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d0b4      	beq.n	800199e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b095      	sub	sp, #84	@ 0x54
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	330c      	adds	r3, #12
 8001a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a50:	e853 3f00 	ldrex	r3, [r3]
 8001a54:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001a5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	330c      	adds	r3, #12
 8001a64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a66:	643a      	str	r2, [r7, #64]	@ 0x40
 8001a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001a6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001a6e:	e841 2300 	strex	r3, r2, [r1]
 8001a72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1e5      	bne.n	8001a46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	3314      	adds	r3, #20
 8001a80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	e853 3f00 	ldrex	r3, [r3]
 8001a88:	61fb      	str	r3, [r7, #28]
   return(result);
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	f023 0301 	bic.w	r3, r3, #1
 8001a90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	3314      	adds	r3, #20
 8001a98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001a9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001aa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001aa2:	e841 2300 	strex	r3, r2, [r1]
 8001aa6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1e5      	bne.n	8001a7a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d119      	bne.n	8001aea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	330c      	adds	r3, #12
 8001abc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	e853 3f00 	ldrex	r3, [r3]
 8001ac4:	60bb      	str	r3, [r7, #8]
   return(result);
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	f023 0310 	bic.w	r3, r3, #16
 8001acc:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	330c      	adds	r3, #12
 8001ad4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001ad6:	61ba      	str	r2, [r7, #24]
 8001ad8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ada:	6979      	ldr	r1, [r7, #20]
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	e841 2300 	strex	r3, r2, [r1]
 8001ae2:	613b      	str	r3, [r7, #16]
   return(result);
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1e5      	bne.n	8001ab6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2220      	movs	r2, #32
 8001aee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001af8:	bf00      	nop
 8001afa:	3754      	adds	r7, #84	@ 0x54
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
	...

08001b04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001b3e:	f023 030c 	bic.w	r3, r3, #12
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	68b9      	ldr	r1, [r7, #8]
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	699a      	ldr	r2, [r3, #24]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a2c      	ldr	r2, [pc, #176]	@ (8001c18 <UART_SetConfig+0x114>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d103      	bne.n	8001b74 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001b6c:	f7ff fd6a 	bl	8001644 <HAL_RCC_GetPCLK2Freq>
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	e002      	b.n	8001b7a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001b74:	f7ff fd52 	bl	800161c <HAL_RCC_GetPCLK1Freq>
 8001b78:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	009a      	lsls	r2, r3, #2
 8001b84:	441a      	add	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b90:	4a22      	ldr	r2, [pc, #136]	@ (8001c1c <UART_SetConfig+0x118>)
 8001b92:	fba2 2303 	umull	r2, r3, r2, r3
 8001b96:	095b      	lsrs	r3, r3, #5
 8001b98:	0119      	lsls	r1, r3, #4
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	009a      	lsls	r2, r3, #2
 8001ba4:	441a      	add	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c1c <UART_SetConfig+0x118>)
 8001bb2:	fba3 0302 	umull	r0, r3, r3, r2
 8001bb6:	095b      	lsrs	r3, r3, #5
 8001bb8:	2064      	movs	r0, #100	@ 0x64
 8001bba:	fb00 f303 	mul.w	r3, r0, r3
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	011b      	lsls	r3, r3, #4
 8001bc2:	3332      	adds	r3, #50	@ 0x32
 8001bc4:	4a15      	ldr	r2, [pc, #84]	@ (8001c1c <UART_SetConfig+0x118>)
 8001bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bca:	095b      	lsrs	r3, r3, #5
 8001bcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bd0:	4419      	add	r1, r3
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	009a      	lsls	r2, r3, #2
 8001bdc:	441a      	add	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001be8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c1c <UART_SetConfig+0x118>)
 8001bea:	fba3 0302 	umull	r0, r3, r3, r2
 8001bee:	095b      	lsrs	r3, r3, #5
 8001bf0:	2064      	movs	r0, #100	@ 0x64
 8001bf2:	fb00 f303 	mul.w	r3, r0, r3
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	3332      	adds	r3, #50	@ 0x32
 8001bfc:	4a07      	ldr	r2, [pc, #28]	@ (8001c1c <UART_SetConfig+0x118>)
 8001bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001c02:	095b      	lsrs	r3, r3, #5
 8001c04:	f003 020f 	and.w	r2, r3, #15
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	440a      	add	r2, r1
 8001c0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001c10:	bf00      	nop
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40013800 	.word	0x40013800
 8001c1c:	51eb851f 	.word	0x51eb851f

08001c20 <_vsniprintf_r>:
 8001c20:	b530      	push	{r4, r5, lr}
 8001c22:	4614      	mov	r4, r2
 8001c24:	2c00      	cmp	r4, #0
 8001c26:	4605      	mov	r5, r0
 8001c28:	461a      	mov	r2, r3
 8001c2a:	b09b      	sub	sp, #108	@ 0x6c
 8001c2c:	da05      	bge.n	8001c3a <_vsniprintf_r+0x1a>
 8001c2e:	238b      	movs	r3, #139	@ 0x8b
 8001c30:	6003      	str	r3, [r0, #0]
 8001c32:	f04f 30ff 	mov.w	r0, #4294967295
 8001c36:	b01b      	add	sp, #108	@ 0x6c
 8001c38:	bd30      	pop	{r4, r5, pc}
 8001c3a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8001c3e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8001c42:	f04f 0300 	mov.w	r3, #0
 8001c46:	9319      	str	r3, [sp, #100]	@ 0x64
 8001c48:	bf0c      	ite	eq
 8001c4a:	4623      	moveq	r3, r4
 8001c4c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8001c50:	9302      	str	r3, [sp, #8]
 8001c52:	9305      	str	r3, [sp, #20]
 8001c54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c58:	9100      	str	r1, [sp, #0]
 8001c5a:	9104      	str	r1, [sp, #16]
 8001c5c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8001c60:	4669      	mov	r1, sp
 8001c62:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8001c64:	f000 f9ac 	bl	8001fc0 <_svfiprintf_r>
 8001c68:	1c43      	adds	r3, r0, #1
 8001c6a:	bfbc      	itt	lt
 8001c6c:	238b      	movlt	r3, #139	@ 0x8b
 8001c6e:	602b      	strlt	r3, [r5, #0]
 8001c70:	2c00      	cmp	r4, #0
 8001c72:	d0e0      	beq.n	8001c36 <_vsniprintf_r+0x16>
 8001c74:	2200      	movs	r2, #0
 8001c76:	9b00      	ldr	r3, [sp, #0]
 8001c78:	701a      	strb	r2, [r3, #0]
 8001c7a:	e7dc      	b.n	8001c36 <_vsniprintf_r+0x16>

08001c7c <vsniprintf>:
 8001c7c:	b507      	push	{r0, r1, r2, lr}
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	4613      	mov	r3, r2
 8001c82:	460a      	mov	r2, r1
 8001c84:	4601      	mov	r1, r0
 8001c86:	4803      	ldr	r0, [pc, #12]	@ (8001c94 <vsniprintf+0x18>)
 8001c88:	6800      	ldr	r0, [r0, #0]
 8001c8a:	f7ff ffc9 	bl	8001c20 <_vsniprintf_r>
 8001c8e:	b003      	add	sp, #12
 8001c90:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c94:	2000000c 	.word	0x2000000c

08001c98 <memset>:
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4402      	add	r2, r0
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d100      	bne.n	8001ca2 <memset+0xa>
 8001ca0:	4770      	bx	lr
 8001ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8001ca6:	e7f9      	b.n	8001c9c <memset+0x4>

08001ca8 <__errno>:
 8001ca8:	4b01      	ldr	r3, [pc, #4]	@ (8001cb0 <__errno+0x8>)
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	2000000c 	.word	0x2000000c

08001cb4 <__libc_init_array>:
 8001cb4:	b570      	push	{r4, r5, r6, lr}
 8001cb6:	2600      	movs	r6, #0
 8001cb8:	4d0c      	ldr	r5, [pc, #48]	@ (8001cec <__libc_init_array+0x38>)
 8001cba:	4c0d      	ldr	r4, [pc, #52]	@ (8001cf0 <__libc_init_array+0x3c>)
 8001cbc:	1b64      	subs	r4, r4, r5
 8001cbe:	10a4      	asrs	r4, r4, #2
 8001cc0:	42a6      	cmp	r6, r4
 8001cc2:	d109      	bne.n	8001cd8 <__libc_init_array+0x24>
 8001cc4:	f000 fc76 	bl	80025b4 <_init>
 8001cc8:	2600      	movs	r6, #0
 8001cca:	4d0a      	ldr	r5, [pc, #40]	@ (8001cf4 <__libc_init_array+0x40>)
 8001ccc:	4c0a      	ldr	r4, [pc, #40]	@ (8001cf8 <__libc_init_array+0x44>)
 8001cce:	1b64      	subs	r4, r4, r5
 8001cd0:	10a4      	asrs	r4, r4, #2
 8001cd2:	42a6      	cmp	r6, r4
 8001cd4:	d105      	bne.n	8001ce2 <__libc_init_array+0x2e>
 8001cd6:	bd70      	pop	{r4, r5, r6, pc}
 8001cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cdc:	4798      	blx	r3
 8001cde:	3601      	adds	r6, #1
 8001ce0:	e7ee      	b.n	8001cc0 <__libc_init_array+0xc>
 8001ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ce6:	4798      	blx	r3
 8001ce8:	3601      	adds	r6, #1
 8001cea:	e7f2      	b.n	8001cd2 <__libc_init_array+0x1e>
 8001cec:	0800268c 	.word	0x0800268c
 8001cf0:	0800268c 	.word	0x0800268c
 8001cf4:	0800268c 	.word	0x0800268c
 8001cf8:	08002690 	.word	0x08002690

08001cfc <__retarget_lock_acquire_recursive>:
 8001cfc:	4770      	bx	lr

08001cfe <__retarget_lock_release_recursive>:
 8001cfe:	4770      	bx	lr

08001d00 <memcpy>:
 8001d00:	440a      	add	r2, r1
 8001d02:	4291      	cmp	r1, r2
 8001d04:	f100 33ff 	add.w	r3, r0, #4294967295
 8001d08:	d100      	bne.n	8001d0c <memcpy+0xc>
 8001d0a:	4770      	bx	lr
 8001d0c:	b510      	push	{r4, lr}
 8001d0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001d12:	4291      	cmp	r1, r2
 8001d14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001d18:	d1f9      	bne.n	8001d0e <memcpy+0xe>
 8001d1a:	bd10      	pop	{r4, pc}

08001d1c <_free_r>:
 8001d1c:	b538      	push	{r3, r4, r5, lr}
 8001d1e:	4605      	mov	r5, r0
 8001d20:	2900      	cmp	r1, #0
 8001d22:	d040      	beq.n	8001da6 <_free_r+0x8a>
 8001d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d28:	1f0c      	subs	r4, r1, #4
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	bfb8      	it	lt
 8001d2e:	18e4      	addlt	r4, r4, r3
 8001d30:	f000 f8de 	bl	8001ef0 <__malloc_lock>
 8001d34:	4a1c      	ldr	r2, [pc, #112]	@ (8001da8 <_free_r+0x8c>)
 8001d36:	6813      	ldr	r3, [r2, #0]
 8001d38:	b933      	cbnz	r3, 8001d48 <_free_r+0x2c>
 8001d3a:	6063      	str	r3, [r4, #4]
 8001d3c:	6014      	str	r4, [r2, #0]
 8001d3e:	4628      	mov	r0, r5
 8001d40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d44:	f000 b8da 	b.w	8001efc <__malloc_unlock>
 8001d48:	42a3      	cmp	r3, r4
 8001d4a:	d908      	bls.n	8001d5e <_free_r+0x42>
 8001d4c:	6820      	ldr	r0, [r4, #0]
 8001d4e:	1821      	adds	r1, r4, r0
 8001d50:	428b      	cmp	r3, r1
 8001d52:	bf01      	itttt	eq
 8001d54:	6819      	ldreq	r1, [r3, #0]
 8001d56:	685b      	ldreq	r3, [r3, #4]
 8001d58:	1809      	addeq	r1, r1, r0
 8001d5a:	6021      	streq	r1, [r4, #0]
 8001d5c:	e7ed      	b.n	8001d3a <_free_r+0x1e>
 8001d5e:	461a      	mov	r2, r3
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	b10b      	cbz	r3, 8001d68 <_free_r+0x4c>
 8001d64:	42a3      	cmp	r3, r4
 8001d66:	d9fa      	bls.n	8001d5e <_free_r+0x42>
 8001d68:	6811      	ldr	r1, [r2, #0]
 8001d6a:	1850      	adds	r0, r2, r1
 8001d6c:	42a0      	cmp	r0, r4
 8001d6e:	d10b      	bne.n	8001d88 <_free_r+0x6c>
 8001d70:	6820      	ldr	r0, [r4, #0]
 8001d72:	4401      	add	r1, r0
 8001d74:	1850      	adds	r0, r2, r1
 8001d76:	4283      	cmp	r3, r0
 8001d78:	6011      	str	r1, [r2, #0]
 8001d7a:	d1e0      	bne.n	8001d3e <_free_r+0x22>
 8001d7c:	6818      	ldr	r0, [r3, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	4408      	add	r0, r1
 8001d82:	6010      	str	r0, [r2, #0]
 8001d84:	6053      	str	r3, [r2, #4]
 8001d86:	e7da      	b.n	8001d3e <_free_r+0x22>
 8001d88:	d902      	bls.n	8001d90 <_free_r+0x74>
 8001d8a:	230c      	movs	r3, #12
 8001d8c:	602b      	str	r3, [r5, #0]
 8001d8e:	e7d6      	b.n	8001d3e <_free_r+0x22>
 8001d90:	6820      	ldr	r0, [r4, #0]
 8001d92:	1821      	adds	r1, r4, r0
 8001d94:	428b      	cmp	r3, r1
 8001d96:	bf01      	itttt	eq
 8001d98:	6819      	ldreq	r1, [r3, #0]
 8001d9a:	685b      	ldreq	r3, [r3, #4]
 8001d9c:	1809      	addeq	r1, r1, r0
 8001d9e:	6021      	streq	r1, [r4, #0]
 8001da0:	6063      	str	r3, [r4, #4]
 8001da2:	6054      	str	r4, [r2, #4]
 8001da4:	e7cb      	b.n	8001d3e <_free_r+0x22>
 8001da6:	bd38      	pop	{r3, r4, r5, pc}
 8001da8:	200010f4 	.word	0x200010f4

08001dac <sbrk_aligned>:
 8001dac:	b570      	push	{r4, r5, r6, lr}
 8001dae:	4e0f      	ldr	r6, [pc, #60]	@ (8001dec <sbrk_aligned+0x40>)
 8001db0:	460c      	mov	r4, r1
 8001db2:	6831      	ldr	r1, [r6, #0]
 8001db4:	4605      	mov	r5, r0
 8001db6:	b911      	cbnz	r1, 8001dbe <sbrk_aligned+0x12>
 8001db8:	f000 fba8 	bl	800250c <_sbrk_r>
 8001dbc:	6030      	str	r0, [r6, #0]
 8001dbe:	4621      	mov	r1, r4
 8001dc0:	4628      	mov	r0, r5
 8001dc2:	f000 fba3 	bl	800250c <_sbrk_r>
 8001dc6:	1c43      	adds	r3, r0, #1
 8001dc8:	d103      	bne.n	8001dd2 <sbrk_aligned+0x26>
 8001dca:	f04f 34ff 	mov.w	r4, #4294967295
 8001dce:	4620      	mov	r0, r4
 8001dd0:	bd70      	pop	{r4, r5, r6, pc}
 8001dd2:	1cc4      	adds	r4, r0, #3
 8001dd4:	f024 0403 	bic.w	r4, r4, #3
 8001dd8:	42a0      	cmp	r0, r4
 8001dda:	d0f8      	beq.n	8001dce <sbrk_aligned+0x22>
 8001ddc:	1a21      	subs	r1, r4, r0
 8001dde:	4628      	mov	r0, r5
 8001de0:	f000 fb94 	bl	800250c <_sbrk_r>
 8001de4:	3001      	adds	r0, #1
 8001de6:	d1f2      	bne.n	8001dce <sbrk_aligned+0x22>
 8001de8:	e7ef      	b.n	8001dca <sbrk_aligned+0x1e>
 8001dea:	bf00      	nop
 8001dec:	200010f0 	.word	0x200010f0

08001df0 <_malloc_r>:
 8001df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001df4:	1ccd      	adds	r5, r1, #3
 8001df6:	f025 0503 	bic.w	r5, r5, #3
 8001dfa:	3508      	adds	r5, #8
 8001dfc:	2d0c      	cmp	r5, #12
 8001dfe:	bf38      	it	cc
 8001e00:	250c      	movcc	r5, #12
 8001e02:	2d00      	cmp	r5, #0
 8001e04:	4606      	mov	r6, r0
 8001e06:	db01      	blt.n	8001e0c <_malloc_r+0x1c>
 8001e08:	42a9      	cmp	r1, r5
 8001e0a:	d904      	bls.n	8001e16 <_malloc_r+0x26>
 8001e0c:	230c      	movs	r3, #12
 8001e0e:	6033      	str	r3, [r6, #0]
 8001e10:	2000      	movs	r0, #0
 8001e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001eec <_malloc_r+0xfc>
 8001e1a:	f000 f869 	bl	8001ef0 <__malloc_lock>
 8001e1e:	f8d8 3000 	ldr.w	r3, [r8]
 8001e22:	461c      	mov	r4, r3
 8001e24:	bb44      	cbnz	r4, 8001e78 <_malloc_r+0x88>
 8001e26:	4629      	mov	r1, r5
 8001e28:	4630      	mov	r0, r6
 8001e2a:	f7ff ffbf 	bl	8001dac <sbrk_aligned>
 8001e2e:	1c43      	adds	r3, r0, #1
 8001e30:	4604      	mov	r4, r0
 8001e32:	d158      	bne.n	8001ee6 <_malloc_r+0xf6>
 8001e34:	f8d8 4000 	ldr.w	r4, [r8]
 8001e38:	4627      	mov	r7, r4
 8001e3a:	2f00      	cmp	r7, #0
 8001e3c:	d143      	bne.n	8001ec6 <_malloc_r+0xd6>
 8001e3e:	2c00      	cmp	r4, #0
 8001e40:	d04b      	beq.n	8001eda <_malloc_r+0xea>
 8001e42:	6823      	ldr	r3, [r4, #0]
 8001e44:	4639      	mov	r1, r7
 8001e46:	4630      	mov	r0, r6
 8001e48:	eb04 0903 	add.w	r9, r4, r3
 8001e4c:	f000 fb5e 	bl	800250c <_sbrk_r>
 8001e50:	4581      	cmp	r9, r0
 8001e52:	d142      	bne.n	8001eda <_malloc_r+0xea>
 8001e54:	6821      	ldr	r1, [r4, #0]
 8001e56:	4630      	mov	r0, r6
 8001e58:	1a6d      	subs	r5, r5, r1
 8001e5a:	4629      	mov	r1, r5
 8001e5c:	f7ff ffa6 	bl	8001dac <sbrk_aligned>
 8001e60:	3001      	adds	r0, #1
 8001e62:	d03a      	beq.n	8001eda <_malloc_r+0xea>
 8001e64:	6823      	ldr	r3, [r4, #0]
 8001e66:	442b      	add	r3, r5
 8001e68:	6023      	str	r3, [r4, #0]
 8001e6a:	f8d8 3000 	ldr.w	r3, [r8]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	bb62      	cbnz	r2, 8001ecc <_malloc_r+0xdc>
 8001e72:	f8c8 7000 	str.w	r7, [r8]
 8001e76:	e00f      	b.n	8001e98 <_malloc_r+0xa8>
 8001e78:	6822      	ldr	r2, [r4, #0]
 8001e7a:	1b52      	subs	r2, r2, r5
 8001e7c:	d420      	bmi.n	8001ec0 <_malloc_r+0xd0>
 8001e7e:	2a0b      	cmp	r2, #11
 8001e80:	d917      	bls.n	8001eb2 <_malloc_r+0xc2>
 8001e82:	1961      	adds	r1, r4, r5
 8001e84:	42a3      	cmp	r3, r4
 8001e86:	6025      	str	r5, [r4, #0]
 8001e88:	bf18      	it	ne
 8001e8a:	6059      	strne	r1, [r3, #4]
 8001e8c:	6863      	ldr	r3, [r4, #4]
 8001e8e:	bf08      	it	eq
 8001e90:	f8c8 1000 	streq.w	r1, [r8]
 8001e94:	5162      	str	r2, [r4, r5]
 8001e96:	604b      	str	r3, [r1, #4]
 8001e98:	4630      	mov	r0, r6
 8001e9a:	f000 f82f 	bl	8001efc <__malloc_unlock>
 8001e9e:	f104 000b 	add.w	r0, r4, #11
 8001ea2:	1d23      	adds	r3, r4, #4
 8001ea4:	f020 0007 	bic.w	r0, r0, #7
 8001ea8:	1ac2      	subs	r2, r0, r3
 8001eaa:	bf1c      	itt	ne
 8001eac:	1a1b      	subne	r3, r3, r0
 8001eae:	50a3      	strne	r3, [r4, r2]
 8001eb0:	e7af      	b.n	8001e12 <_malloc_r+0x22>
 8001eb2:	6862      	ldr	r2, [r4, #4]
 8001eb4:	42a3      	cmp	r3, r4
 8001eb6:	bf0c      	ite	eq
 8001eb8:	f8c8 2000 	streq.w	r2, [r8]
 8001ebc:	605a      	strne	r2, [r3, #4]
 8001ebe:	e7eb      	b.n	8001e98 <_malloc_r+0xa8>
 8001ec0:	4623      	mov	r3, r4
 8001ec2:	6864      	ldr	r4, [r4, #4]
 8001ec4:	e7ae      	b.n	8001e24 <_malloc_r+0x34>
 8001ec6:	463c      	mov	r4, r7
 8001ec8:	687f      	ldr	r7, [r7, #4]
 8001eca:	e7b6      	b.n	8001e3a <_malloc_r+0x4a>
 8001ecc:	461a      	mov	r2, r3
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	42a3      	cmp	r3, r4
 8001ed2:	d1fb      	bne.n	8001ecc <_malloc_r+0xdc>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	6053      	str	r3, [r2, #4]
 8001ed8:	e7de      	b.n	8001e98 <_malloc_r+0xa8>
 8001eda:	230c      	movs	r3, #12
 8001edc:	4630      	mov	r0, r6
 8001ede:	6033      	str	r3, [r6, #0]
 8001ee0:	f000 f80c 	bl	8001efc <__malloc_unlock>
 8001ee4:	e794      	b.n	8001e10 <_malloc_r+0x20>
 8001ee6:	6005      	str	r5, [r0, #0]
 8001ee8:	e7d6      	b.n	8001e98 <_malloc_r+0xa8>
 8001eea:	bf00      	nop
 8001eec:	200010f4 	.word	0x200010f4

08001ef0 <__malloc_lock>:
 8001ef0:	4801      	ldr	r0, [pc, #4]	@ (8001ef8 <__malloc_lock+0x8>)
 8001ef2:	f7ff bf03 	b.w	8001cfc <__retarget_lock_acquire_recursive>
 8001ef6:	bf00      	nop
 8001ef8:	200010ec 	.word	0x200010ec

08001efc <__malloc_unlock>:
 8001efc:	4801      	ldr	r0, [pc, #4]	@ (8001f04 <__malloc_unlock+0x8>)
 8001efe:	f7ff befe 	b.w	8001cfe <__retarget_lock_release_recursive>
 8001f02:	bf00      	nop
 8001f04:	200010ec 	.word	0x200010ec

08001f08 <__ssputs_r>:
 8001f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f0c:	461f      	mov	r7, r3
 8001f0e:	688e      	ldr	r6, [r1, #8]
 8001f10:	4682      	mov	sl, r0
 8001f12:	42be      	cmp	r6, r7
 8001f14:	460c      	mov	r4, r1
 8001f16:	4690      	mov	r8, r2
 8001f18:	680b      	ldr	r3, [r1, #0]
 8001f1a:	d82d      	bhi.n	8001f78 <__ssputs_r+0x70>
 8001f1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001f20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001f24:	d026      	beq.n	8001f74 <__ssputs_r+0x6c>
 8001f26:	6965      	ldr	r5, [r4, #20]
 8001f28:	6909      	ldr	r1, [r1, #16]
 8001f2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001f2e:	eba3 0901 	sub.w	r9, r3, r1
 8001f32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001f36:	1c7b      	adds	r3, r7, #1
 8001f38:	444b      	add	r3, r9
 8001f3a:	106d      	asrs	r5, r5, #1
 8001f3c:	429d      	cmp	r5, r3
 8001f3e:	bf38      	it	cc
 8001f40:	461d      	movcc	r5, r3
 8001f42:	0553      	lsls	r3, r2, #21
 8001f44:	d527      	bpl.n	8001f96 <__ssputs_r+0x8e>
 8001f46:	4629      	mov	r1, r5
 8001f48:	f7ff ff52 	bl	8001df0 <_malloc_r>
 8001f4c:	4606      	mov	r6, r0
 8001f4e:	b360      	cbz	r0, 8001faa <__ssputs_r+0xa2>
 8001f50:	464a      	mov	r2, r9
 8001f52:	6921      	ldr	r1, [r4, #16]
 8001f54:	f7ff fed4 	bl	8001d00 <memcpy>
 8001f58:	89a3      	ldrh	r3, [r4, #12]
 8001f5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001f5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f62:	81a3      	strh	r3, [r4, #12]
 8001f64:	6126      	str	r6, [r4, #16]
 8001f66:	444e      	add	r6, r9
 8001f68:	6026      	str	r6, [r4, #0]
 8001f6a:	463e      	mov	r6, r7
 8001f6c:	6165      	str	r5, [r4, #20]
 8001f6e:	eba5 0509 	sub.w	r5, r5, r9
 8001f72:	60a5      	str	r5, [r4, #8]
 8001f74:	42be      	cmp	r6, r7
 8001f76:	d900      	bls.n	8001f7a <__ssputs_r+0x72>
 8001f78:	463e      	mov	r6, r7
 8001f7a:	4632      	mov	r2, r6
 8001f7c:	4641      	mov	r1, r8
 8001f7e:	6820      	ldr	r0, [r4, #0]
 8001f80:	f000 faaa 	bl	80024d8 <memmove>
 8001f84:	2000      	movs	r0, #0
 8001f86:	68a3      	ldr	r3, [r4, #8]
 8001f88:	1b9b      	subs	r3, r3, r6
 8001f8a:	60a3      	str	r3, [r4, #8]
 8001f8c:	6823      	ldr	r3, [r4, #0]
 8001f8e:	4433      	add	r3, r6
 8001f90:	6023      	str	r3, [r4, #0]
 8001f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f96:	462a      	mov	r2, r5
 8001f98:	f000 fad6 	bl	8002548 <_realloc_r>
 8001f9c:	4606      	mov	r6, r0
 8001f9e:	2800      	cmp	r0, #0
 8001fa0:	d1e0      	bne.n	8001f64 <__ssputs_r+0x5c>
 8001fa2:	4650      	mov	r0, sl
 8001fa4:	6921      	ldr	r1, [r4, #16]
 8001fa6:	f7ff feb9 	bl	8001d1c <_free_r>
 8001faa:	230c      	movs	r3, #12
 8001fac:	f8ca 3000 	str.w	r3, [sl]
 8001fb0:	89a3      	ldrh	r3, [r4, #12]
 8001fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fba:	81a3      	strh	r3, [r4, #12]
 8001fbc:	e7e9      	b.n	8001f92 <__ssputs_r+0x8a>
	...

08001fc0 <_svfiprintf_r>:
 8001fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fc4:	4698      	mov	r8, r3
 8001fc6:	898b      	ldrh	r3, [r1, #12]
 8001fc8:	4607      	mov	r7, r0
 8001fca:	061b      	lsls	r3, r3, #24
 8001fcc:	460d      	mov	r5, r1
 8001fce:	4614      	mov	r4, r2
 8001fd0:	b09d      	sub	sp, #116	@ 0x74
 8001fd2:	d510      	bpl.n	8001ff6 <_svfiprintf_r+0x36>
 8001fd4:	690b      	ldr	r3, [r1, #16]
 8001fd6:	b973      	cbnz	r3, 8001ff6 <_svfiprintf_r+0x36>
 8001fd8:	2140      	movs	r1, #64	@ 0x40
 8001fda:	f7ff ff09 	bl	8001df0 <_malloc_r>
 8001fde:	6028      	str	r0, [r5, #0]
 8001fe0:	6128      	str	r0, [r5, #16]
 8001fe2:	b930      	cbnz	r0, 8001ff2 <_svfiprintf_r+0x32>
 8001fe4:	230c      	movs	r3, #12
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fec:	b01d      	add	sp, #116	@ 0x74
 8001fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ff2:	2340      	movs	r3, #64	@ 0x40
 8001ff4:	616b      	str	r3, [r5, #20]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ffa:	2320      	movs	r3, #32
 8001ffc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002000:	2330      	movs	r3, #48	@ 0x30
 8002002:	f04f 0901 	mov.w	r9, #1
 8002006:	f8cd 800c 	str.w	r8, [sp, #12]
 800200a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80021a4 <_svfiprintf_r+0x1e4>
 800200e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002012:	4623      	mov	r3, r4
 8002014:	469a      	mov	sl, r3
 8002016:	f813 2b01 	ldrb.w	r2, [r3], #1
 800201a:	b10a      	cbz	r2, 8002020 <_svfiprintf_r+0x60>
 800201c:	2a25      	cmp	r2, #37	@ 0x25
 800201e:	d1f9      	bne.n	8002014 <_svfiprintf_r+0x54>
 8002020:	ebba 0b04 	subs.w	fp, sl, r4
 8002024:	d00b      	beq.n	800203e <_svfiprintf_r+0x7e>
 8002026:	465b      	mov	r3, fp
 8002028:	4622      	mov	r2, r4
 800202a:	4629      	mov	r1, r5
 800202c:	4638      	mov	r0, r7
 800202e:	f7ff ff6b 	bl	8001f08 <__ssputs_r>
 8002032:	3001      	adds	r0, #1
 8002034:	f000 80a7 	beq.w	8002186 <_svfiprintf_r+0x1c6>
 8002038:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800203a:	445a      	add	r2, fp
 800203c:	9209      	str	r2, [sp, #36]	@ 0x24
 800203e:	f89a 3000 	ldrb.w	r3, [sl]
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 809f 	beq.w	8002186 <_svfiprintf_r+0x1c6>
 8002048:	2300      	movs	r3, #0
 800204a:	f04f 32ff 	mov.w	r2, #4294967295
 800204e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002052:	f10a 0a01 	add.w	sl, sl, #1
 8002056:	9304      	str	r3, [sp, #16]
 8002058:	9307      	str	r3, [sp, #28]
 800205a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800205e:	931a      	str	r3, [sp, #104]	@ 0x68
 8002060:	4654      	mov	r4, sl
 8002062:	2205      	movs	r2, #5
 8002064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002068:	484e      	ldr	r0, [pc, #312]	@ (80021a4 <_svfiprintf_r+0x1e4>)
 800206a:	f000 fa5f 	bl	800252c <memchr>
 800206e:	9a04      	ldr	r2, [sp, #16]
 8002070:	b9d8      	cbnz	r0, 80020aa <_svfiprintf_r+0xea>
 8002072:	06d0      	lsls	r0, r2, #27
 8002074:	bf44      	itt	mi
 8002076:	2320      	movmi	r3, #32
 8002078:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800207c:	0711      	lsls	r1, r2, #28
 800207e:	bf44      	itt	mi
 8002080:	232b      	movmi	r3, #43	@ 0x2b
 8002082:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002086:	f89a 3000 	ldrb.w	r3, [sl]
 800208a:	2b2a      	cmp	r3, #42	@ 0x2a
 800208c:	d015      	beq.n	80020ba <_svfiprintf_r+0xfa>
 800208e:	4654      	mov	r4, sl
 8002090:	2000      	movs	r0, #0
 8002092:	f04f 0c0a 	mov.w	ip, #10
 8002096:	9a07      	ldr	r2, [sp, #28]
 8002098:	4621      	mov	r1, r4
 800209a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800209e:	3b30      	subs	r3, #48	@ 0x30
 80020a0:	2b09      	cmp	r3, #9
 80020a2:	d94b      	bls.n	800213c <_svfiprintf_r+0x17c>
 80020a4:	b1b0      	cbz	r0, 80020d4 <_svfiprintf_r+0x114>
 80020a6:	9207      	str	r2, [sp, #28]
 80020a8:	e014      	b.n	80020d4 <_svfiprintf_r+0x114>
 80020aa:	eba0 0308 	sub.w	r3, r0, r8
 80020ae:	fa09 f303 	lsl.w	r3, r9, r3
 80020b2:	4313      	orrs	r3, r2
 80020b4:	46a2      	mov	sl, r4
 80020b6:	9304      	str	r3, [sp, #16]
 80020b8:	e7d2      	b.n	8002060 <_svfiprintf_r+0xa0>
 80020ba:	9b03      	ldr	r3, [sp, #12]
 80020bc:	1d19      	adds	r1, r3, #4
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	9103      	str	r1, [sp, #12]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	bfbb      	ittet	lt
 80020c6:	425b      	neglt	r3, r3
 80020c8:	f042 0202 	orrlt.w	r2, r2, #2
 80020cc:	9307      	strge	r3, [sp, #28]
 80020ce:	9307      	strlt	r3, [sp, #28]
 80020d0:	bfb8      	it	lt
 80020d2:	9204      	strlt	r2, [sp, #16]
 80020d4:	7823      	ldrb	r3, [r4, #0]
 80020d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80020d8:	d10a      	bne.n	80020f0 <_svfiprintf_r+0x130>
 80020da:	7863      	ldrb	r3, [r4, #1]
 80020dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80020de:	d132      	bne.n	8002146 <_svfiprintf_r+0x186>
 80020e0:	9b03      	ldr	r3, [sp, #12]
 80020e2:	3402      	adds	r4, #2
 80020e4:	1d1a      	adds	r2, r3, #4
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	9203      	str	r2, [sp, #12]
 80020ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80020ee:	9305      	str	r3, [sp, #20]
 80020f0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80021a8 <_svfiprintf_r+0x1e8>
 80020f4:	2203      	movs	r2, #3
 80020f6:	4650      	mov	r0, sl
 80020f8:	7821      	ldrb	r1, [r4, #0]
 80020fa:	f000 fa17 	bl	800252c <memchr>
 80020fe:	b138      	cbz	r0, 8002110 <_svfiprintf_r+0x150>
 8002100:	2240      	movs	r2, #64	@ 0x40
 8002102:	9b04      	ldr	r3, [sp, #16]
 8002104:	eba0 000a 	sub.w	r0, r0, sl
 8002108:	4082      	lsls	r2, r0
 800210a:	4313      	orrs	r3, r2
 800210c:	3401      	adds	r4, #1
 800210e:	9304      	str	r3, [sp, #16]
 8002110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002114:	2206      	movs	r2, #6
 8002116:	4825      	ldr	r0, [pc, #148]	@ (80021ac <_svfiprintf_r+0x1ec>)
 8002118:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800211c:	f000 fa06 	bl	800252c <memchr>
 8002120:	2800      	cmp	r0, #0
 8002122:	d036      	beq.n	8002192 <_svfiprintf_r+0x1d2>
 8002124:	4b22      	ldr	r3, [pc, #136]	@ (80021b0 <_svfiprintf_r+0x1f0>)
 8002126:	bb1b      	cbnz	r3, 8002170 <_svfiprintf_r+0x1b0>
 8002128:	9b03      	ldr	r3, [sp, #12]
 800212a:	3307      	adds	r3, #7
 800212c:	f023 0307 	bic.w	r3, r3, #7
 8002130:	3308      	adds	r3, #8
 8002132:	9303      	str	r3, [sp, #12]
 8002134:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002136:	4433      	add	r3, r6
 8002138:	9309      	str	r3, [sp, #36]	@ 0x24
 800213a:	e76a      	b.n	8002012 <_svfiprintf_r+0x52>
 800213c:	460c      	mov	r4, r1
 800213e:	2001      	movs	r0, #1
 8002140:	fb0c 3202 	mla	r2, ip, r2, r3
 8002144:	e7a8      	b.n	8002098 <_svfiprintf_r+0xd8>
 8002146:	2300      	movs	r3, #0
 8002148:	f04f 0c0a 	mov.w	ip, #10
 800214c:	4619      	mov	r1, r3
 800214e:	3401      	adds	r4, #1
 8002150:	9305      	str	r3, [sp, #20]
 8002152:	4620      	mov	r0, r4
 8002154:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002158:	3a30      	subs	r2, #48	@ 0x30
 800215a:	2a09      	cmp	r2, #9
 800215c:	d903      	bls.n	8002166 <_svfiprintf_r+0x1a6>
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0c6      	beq.n	80020f0 <_svfiprintf_r+0x130>
 8002162:	9105      	str	r1, [sp, #20]
 8002164:	e7c4      	b.n	80020f0 <_svfiprintf_r+0x130>
 8002166:	4604      	mov	r4, r0
 8002168:	2301      	movs	r3, #1
 800216a:	fb0c 2101 	mla	r1, ip, r1, r2
 800216e:	e7f0      	b.n	8002152 <_svfiprintf_r+0x192>
 8002170:	ab03      	add	r3, sp, #12
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	462a      	mov	r2, r5
 8002176:	4638      	mov	r0, r7
 8002178:	4b0e      	ldr	r3, [pc, #56]	@ (80021b4 <_svfiprintf_r+0x1f4>)
 800217a:	a904      	add	r1, sp, #16
 800217c:	f3af 8000 	nop.w
 8002180:	1c42      	adds	r2, r0, #1
 8002182:	4606      	mov	r6, r0
 8002184:	d1d6      	bne.n	8002134 <_svfiprintf_r+0x174>
 8002186:	89ab      	ldrh	r3, [r5, #12]
 8002188:	065b      	lsls	r3, r3, #25
 800218a:	f53f af2d 	bmi.w	8001fe8 <_svfiprintf_r+0x28>
 800218e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002190:	e72c      	b.n	8001fec <_svfiprintf_r+0x2c>
 8002192:	ab03      	add	r3, sp, #12
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	462a      	mov	r2, r5
 8002198:	4638      	mov	r0, r7
 800219a:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <_svfiprintf_r+0x1f4>)
 800219c:	a904      	add	r1, sp, #16
 800219e:	f000 f87d 	bl	800229c <_printf_i>
 80021a2:	e7ed      	b.n	8002180 <_svfiprintf_r+0x1c0>
 80021a4:	0800264e 	.word	0x0800264e
 80021a8:	08002654 	.word	0x08002654
 80021ac:	08002658 	.word	0x08002658
 80021b0:	00000000 	.word	0x00000000
 80021b4:	08001f09 	.word	0x08001f09

080021b8 <_printf_common>:
 80021b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021bc:	4616      	mov	r6, r2
 80021be:	4698      	mov	r8, r3
 80021c0:	688a      	ldr	r2, [r1, #8]
 80021c2:	690b      	ldr	r3, [r1, #16]
 80021c4:	4607      	mov	r7, r0
 80021c6:	4293      	cmp	r3, r2
 80021c8:	bfb8      	it	lt
 80021ca:	4613      	movlt	r3, r2
 80021cc:	6033      	str	r3, [r6, #0]
 80021ce:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80021d2:	460c      	mov	r4, r1
 80021d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80021d8:	b10a      	cbz	r2, 80021de <_printf_common+0x26>
 80021da:	3301      	adds	r3, #1
 80021dc:	6033      	str	r3, [r6, #0]
 80021de:	6823      	ldr	r3, [r4, #0]
 80021e0:	0699      	lsls	r1, r3, #26
 80021e2:	bf42      	ittt	mi
 80021e4:	6833      	ldrmi	r3, [r6, #0]
 80021e6:	3302      	addmi	r3, #2
 80021e8:	6033      	strmi	r3, [r6, #0]
 80021ea:	6825      	ldr	r5, [r4, #0]
 80021ec:	f015 0506 	ands.w	r5, r5, #6
 80021f0:	d106      	bne.n	8002200 <_printf_common+0x48>
 80021f2:	f104 0a19 	add.w	sl, r4, #25
 80021f6:	68e3      	ldr	r3, [r4, #12]
 80021f8:	6832      	ldr	r2, [r6, #0]
 80021fa:	1a9b      	subs	r3, r3, r2
 80021fc:	42ab      	cmp	r3, r5
 80021fe:	dc2b      	bgt.n	8002258 <_printf_common+0xa0>
 8002200:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002204:	6822      	ldr	r2, [r4, #0]
 8002206:	3b00      	subs	r3, #0
 8002208:	bf18      	it	ne
 800220a:	2301      	movne	r3, #1
 800220c:	0692      	lsls	r2, r2, #26
 800220e:	d430      	bmi.n	8002272 <_printf_common+0xba>
 8002210:	4641      	mov	r1, r8
 8002212:	4638      	mov	r0, r7
 8002214:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002218:	47c8      	blx	r9
 800221a:	3001      	adds	r0, #1
 800221c:	d023      	beq.n	8002266 <_printf_common+0xae>
 800221e:	6823      	ldr	r3, [r4, #0]
 8002220:	6922      	ldr	r2, [r4, #16]
 8002222:	f003 0306 	and.w	r3, r3, #6
 8002226:	2b04      	cmp	r3, #4
 8002228:	bf14      	ite	ne
 800222a:	2500      	movne	r5, #0
 800222c:	6833      	ldreq	r3, [r6, #0]
 800222e:	f04f 0600 	mov.w	r6, #0
 8002232:	bf08      	it	eq
 8002234:	68e5      	ldreq	r5, [r4, #12]
 8002236:	f104 041a 	add.w	r4, r4, #26
 800223a:	bf08      	it	eq
 800223c:	1aed      	subeq	r5, r5, r3
 800223e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002242:	bf08      	it	eq
 8002244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002248:	4293      	cmp	r3, r2
 800224a:	bfc4      	itt	gt
 800224c:	1a9b      	subgt	r3, r3, r2
 800224e:	18ed      	addgt	r5, r5, r3
 8002250:	42b5      	cmp	r5, r6
 8002252:	d11a      	bne.n	800228a <_printf_common+0xd2>
 8002254:	2000      	movs	r0, #0
 8002256:	e008      	b.n	800226a <_printf_common+0xb2>
 8002258:	2301      	movs	r3, #1
 800225a:	4652      	mov	r2, sl
 800225c:	4641      	mov	r1, r8
 800225e:	4638      	mov	r0, r7
 8002260:	47c8      	blx	r9
 8002262:	3001      	adds	r0, #1
 8002264:	d103      	bne.n	800226e <_printf_common+0xb6>
 8002266:	f04f 30ff 	mov.w	r0, #4294967295
 800226a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800226e:	3501      	adds	r5, #1
 8002270:	e7c1      	b.n	80021f6 <_printf_common+0x3e>
 8002272:	2030      	movs	r0, #48	@ 0x30
 8002274:	18e1      	adds	r1, r4, r3
 8002276:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002280:	4422      	add	r2, r4
 8002282:	3302      	adds	r3, #2
 8002284:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002288:	e7c2      	b.n	8002210 <_printf_common+0x58>
 800228a:	2301      	movs	r3, #1
 800228c:	4622      	mov	r2, r4
 800228e:	4641      	mov	r1, r8
 8002290:	4638      	mov	r0, r7
 8002292:	47c8      	blx	r9
 8002294:	3001      	adds	r0, #1
 8002296:	d0e6      	beq.n	8002266 <_printf_common+0xae>
 8002298:	3601      	adds	r6, #1
 800229a:	e7d9      	b.n	8002250 <_printf_common+0x98>

0800229c <_printf_i>:
 800229c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80022a0:	7e0f      	ldrb	r7, [r1, #24]
 80022a2:	4691      	mov	r9, r2
 80022a4:	2f78      	cmp	r7, #120	@ 0x78
 80022a6:	4680      	mov	r8, r0
 80022a8:	460c      	mov	r4, r1
 80022aa:	469a      	mov	sl, r3
 80022ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80022ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80022b2:	d807      	bhi.n	80022c4 <_printf_i+0x28>
 80022b4:	2f62      	cmp	r7, #98	@ 0x62
 80022b6:	d80a      	bhi.n	80022ce <_printf_i+0x32>
 80022b8:	2f00      	cmp	r7, #0
 80022ba:	f000 80d1 	beq.w	8002460 <_printf_i+0x1c4>
 80022be:	2f58      	cmp	r7, #88	@ 0x58
 80022c0:	f000 80b8 	beq.w	8002434 <_printf_i+0x198>
 80022c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80022c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80022cc:	e03a      	b.n	8002344 <_printf_i+0xa8>
 80022ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80022d2:	2b15      	cmp	r3, #21
 80022d4:	d8f6      	bhi.n	80022c4 <_printf_i+0x28>
 80022d6:	a101      	add	r1, pc, #4	@ (adr r1, 80022dc <_printf_i+0x40>)
 80022d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80022dc:	08002335 	.word	0x08002335
 80022e0:	08002349 	.word	0x08002349
 80022e4:	080022c5 	.word	0x080022c5
 80022e8:	080022c5 	.word	0x080022c5
 80022ec:	080022c5 	.word	0x080022c5
 80022f0:	080022c5 	.word	0x080022c5
 80022f4:	08002349 	.word	0x08002349
 80022f8:	080022c5 	.word	0x080022c5
 80022fc:	080022c5 	.word	0x080022c5
 8002300:	080022c5 	.word	0x080022c5
 8002304:	080022c5 	.word	0x080022c5
 8002308:	08002447 	.word	0x08002447
 800230c:	08002373 	.word	0x08002373
 8002310:	08002401 	.word	0x08002401
 8002314:	080022c5 	.word	0x080022c5
 8002318:	080022c5 	.word	0x080022c5
 800231c:	08002469 	.word	0x08002469
 8002320:	080022c5 	.word	0x080022c5
 8002324:	08002373 	.word	0x08002373
 8002328:	080022c5 	.word	0x080022c5
 800232c:	080022c5 	.word	0x080022c5
 8002330:	08002409 	.word	0x08002409
 8002334:	6833      	ldr	r3, [r6, #0]
 8002336:	1d1a      	adds	r2, r3, #4
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6032      	str	r2, [r6, #0]
 800233c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002340:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002344:	2301      	movs	r3, #1
 8002346:	e09c      	b.n	8002482 <_printf_i+0x1e6>
 8002348:	6833      	ldr	r3, [r6, #0]
 800234a:	6820      	ldr	r0, [r4, #0]
 800234c:	1d19      	adds	r1, r3, #4
 800234e:	6031      	str	r1, [r6, #0]
 8002350:	0606      	lsls	r6, r0, #24
 8002352:	d501      	bpl.n	8002358 <_printf_i+0xbc>
 8002354:	681d      	ldr	r5, [r3, #0]
 8002356:	e003      	b.n	8002360 <_printf_i+0xc4>
 8002358:	0645      	lsls	r5, r0, #25
 800235a:	d5fb      	bpl.n	8002354 <_printf_i+0xb8>
 800235c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002360:	2d00      	cmp	r5, #0
 8002362:	da03      	bge.n	800236c <_printf_i+0xd0>
 8002364:	232d      	movs	r3, #45	@ 0x2d
 8002366:	426d      	negs	r5, r5
 8002368:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800236c:	230a      	movs	r3, #10
 800236e:	4858      	ldr	r0, [pc, #352]	@ (80024d0 <_printf_i+0x234>)
 8002370:	e011      	b.n	8002396 <_printf_i+0xfa>
 8002372:	6821      	ldr	r1, [r4, #0]
 8002374:	6833      	ldr	r3, [r6, #0]
 8002376:	0608      	lsls	r0, r1, #24
 8002378:	f853 5b04 	ldr.w	r5, [r3], #4
 800237c:	d402      	bmi.n	8002384 <_printf_i+0xe8>
 800237e:	0649      	lsls	r1, r1, #25
 8002380:	bf48      	it	mi
 8002382:	b2ad      	uxthmi	r5, r5
 8002384:	2f6f      	cmp	r7, #111	@ 0x6f
 8002386:	6033      	str	r3, [r6, #0]
 8002388:	bf14      	ite	ne
 800238a:	230a      	movne	r3, #10
 800238c:	2308      	moveq	r3, #8
 800238e:	4850      	ldr	r0, [pc, #320]	@ (80024d0 <_printf_i+0x234>)
 8002390:	2100      	movs	r1, #0
 8002392:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002396:	6866      	ldr	r6, [r4, #4]
 8002398:	2e00      	cmp	r6, #0
 800239a:	60a6      	str	r6, [r4, #8]
 800239c:	db05      	blt.n	80023aa <_printf_i+0x10e>
 800239e:	6821      	ldr	r1, [r4, #0]
 80023a0:	432e      	orrs	r6, r5
 80023a2:	f021 0104 	bic.w	r1, r1, #4
 80023a6:	6021      	str	r1, [r4, #0]
 80023a8:	d04b      	beq.n	8002442 <_printf_i+0x1a6>
 80023aa:	4616      	mov	r6, r2
 80023ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80023b0:	fb03 5711 	mls	r7, r3, r1, r5
 80023b4:	5dc7      	ldrb	r7, [r0, r7]
 80023b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80023ba:	462f      	mov	r7, r5
 80023bc:	42bb      	cmp	r3, r7
 80023be:	460d      	mov	r5, r1
 80023c0:	d9f4      	bls.n	80023ac <_printf_i+0x110>
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d10b      	bne.n	80023de <_printf_i+0x142>
 80023c6:	6823      	ldr	r3, [r4, #0]
 80023c8:	07df      	lsls	r7, r3, #31
 80023ca:	d508      	bpl.n	80023de <_printf_i+0x142>
 80023cc:	6923      	ldr	r3, [r4, #16]
 80023ce:	6861      	ldr	r1, [r4, #4]
 80023d0:	4299      	cmp	r1, r3
 80023d2:	bfde      	ittt	le
 80023d4:	2330      	movle	r3, #48	@ 0x30
 80023d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80023da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80023de:	1b92      	subs	r2, r2, r6
 80023e0:	6122      	str	r2, [r4, #16]
 80023e2:	464b      	mov	r3, r9
 80023e4:	4621      	mov	r1, r4
 80023e6:	4640      	mov	r0, r8
 80023e8:	f8cd a000 	str.w	sl, [sp]
 80023ec:	aa03      	add	r2, sp, #12
 80023ee:	f7ff fee3 	bl	80021b8 <_printf_common>
 80023f2:	3001      	adds	r0, #1
 80023f4:	d14a      	bne.n	800248c <_printf_i+0x1f0>
 80023f6:	f04f 30ff 	mov.w	r0, #4294967295
 80023fa:	b004      	add	sp, #16
 80023fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002400:	6823      	ldr	r3, [r4, #0]
 8002402:	f043 0320 	orr.w	r3, r3, #32
 8002406:	6023      	str	r3, [r4, #0]
 8002408:	2778      	movs	r7, #120	@ 0x78
 800240a:	4832      	ldr	r0, [pc, #200]	@ (80024d4 <_printf_i+0x238>)
 800240c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002410:	6823      	ldr	r3, [r4, #0]
 8002412:	6831      	ldr	r1, [r6, #0]
 8002414:	061f      	lsls	r7, r3, #24
 8002416:	f851 5b04 	ldr.w	r5, [r1], #4
 800241a:	d402      	bmi.n	8002422 <_printf_i+0x186>
 800241c:	065f      	lsls	r7, r3, #25
 800241e:	bf48      	it	mi
 8002420:	b2ad      	uxthmi	r5, r5
 8002422:	6031      	str	r1, [r6, #0]
 8002424:	07d9      	lsls	r1, r3, #31
 8002426:	bf44      	itt	mi
 8002428:	f043 0320 	orrmi.w	r3, r3, #32
 800242c:	6023      	strmi	r3, [r4, #0]
 800242e:	b11d      	cbz	r5, 8002438 <_printf_i+0x19c>
 8002430:	2310      	movs	r3, #16
 8002432:	e7ad      	b.n	8002390 <_printf_i+0xf4>
 8002434:	4826      	ldr	r0, [pc, #152]	@ (80024d0 <_printf_i+0x234>)
 8002436:	e7e9      	b.n	800240c <_printf_i+0x170>
 8002438:	6823      	ldr	r3, [r4, #0]
 800243a:	f023 0320 	bic.w	r3, r3, #32
 800243e:	6023      	str	r3, [r4, #0]
 8002440:	e7f6      	b.n	8002430 <_printf_i+0x194>
 8002442:	4616      	mov	r6, r2
 8002444:	e7bd      	b.n	80023c2 <_printf_i+0x126>
 8002446:	6833      	ldr	r3, [r6, #0]
 8002448:	6825      	ldr	r5, [r4, #0]
 800244a:	1d18      	adds	r0, r3, #4
 800244c:	6961      	ldr	r1, [r4, #20]
 800244e:	6030      	str	r0, [r6, #0]
 8002450:	062e      	lsls	r6, r5, #24
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	d501      	bpl.n	800245a <_printf_i+0x1be>
 8002456:	6019      	str	r1, [r3, #0]
 8002458:	e002      	b.n	8002460 <_printf_i+0x1c4>
 800245a:	0668      	lsls	r0, r5, #25
 800245c:	d5fb      	bpl.n	8002456 <_printf_i+0x1ba>
 800245e:	8019      	strh	r1, [r3, #0]
 8002460:	2300      	movs	r3, #0
 8002462:	4616      	mov	r6, r2
 8002464:	6123      	str	r3, [r4, #16]
 8002466:	e7bc      	b.n	80023e2 <_printf_i+0x146>
 8002468:	6833      	ldr	r3, [r6, #0]
 800246a:	2100      	movs	r1, #0
 800246c:	1d1a      	adds	r2, r3, #4
 800246e:	6032      	str	r2, [r6, #0]
 8002470:	681e      	ldr	r6, [r3, #0]
 8002472:	6862      	ldr	r2, [r4, #4]
 8002474:	4630      	mov	r0, r6
 8002476:	f000 f859 	bl	800252c <memchr>
 800247a:	b108      	cbz	r0, 8002480 <_printf_i+0x1e4>
 800247c:	1b80      	subs	r0, r0, r6
 800247e:	6060      	str	r0, [r4, #4]
 8002480:	6863      	ldr	r3, [r4, #4]
 8002482:	6123      	str	r3, [r4, #16]
 8002484:	2300      	movs	r3, #0
 8002486:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800248a:	e7aa      	b.n	80023e2 <_printf_i+0x146>
 800248c:	4632      	mov	r2, r6
 800248e:	4649      	mov	r1, r9
 8002490:	4640      	mov	r0, r8
 8002492:	6923      	ldr	r3, [r4, #16]
 8002494:	47d0      	blx	sl
 8002496:	3001      	adds	r0, #1
 8002498:	d0ad      	beq.n	80023f6 <_printf_i+0x15a>
 800249a:	6823      	ldr	r3, [r4, #0]
 800249c:	079b      	lsls	r3, r3, #30
 800249e:	d413      	bmi.n	80024c8 <_printf_i+0x22c>
 80024a0:	68e0      	ldr	r0, [r4, #12]
 80024a2:	9b03      	ldr	r3, [sp, #12]
 80024a4:	4298      	cmp	r0, r3
 80024a6:	bfb8      	it	lt
 80024a8:	4618      	movlt	r0, r3
 80024aa:	e7a6      	b.n	80023fa <_printf_i+0x15e>
 80024ac:	2301      	movs	r3, #1
 80024ae:	4632      	mov	r2, r6
 80024b0:	4649      	mov	r1, r9
 80024b2:	4640      	mov	r0, r8
 80024b4:	47d0      	blx	sl
 80024b6:	3001      	adds	r0, #1
 80024b8:	d09d      	beq.n	80023f6 <_printf_i+0x15a>
 80024ba:	3501      	adds	r5, #1
 80024bc:	68e3      	ldr	r3, [r4, #12]
 80024be:	9903      	ldr	r1, [sp, #12]
 80024c0:	1a5b      	subs	r3, r3, r1
 80024c2:	42ab      	cmp	r3, r5
 80024c4:	dcf2      	bgt.n	80024ac <_printf_i+0x210>
 80024c6:	e7eb      	b.n	80024a0 <_printf_i+0x204>
 80024c8:	2500      	movs	r5, #0
 80024ca:	f104 0619 	add.w	r6, r4, #25
 80024ce:	e7f5      	b.n	80024bc <_printf_i+0x220>
 80024d0:	0800265f 	.word	0x0800265f
 80024d4:	08002670 	.word	0x08002670

080024d8 <memmove>:
 80024d8:	4288      	cmp	r0, r1
 80024da:	b510      	push	{r4, lr}
 80024dc:	eb01 0402 	add.w	r4, r1, r2
 80024e0:	d902      	bls.n	80024e8 <memmove+0x10>
 80024e2:	4284      	cmp	r4, r0
 80024e4:	4623      	mov	r3, r4
 80024e6:	d807      	bhi.n	80024f8 <memmove+0x20>
 80024e8:	1e43      	subs	r3, r0, #1
 80024ea:	42a1      	cmp	r1, r4
 80024ec:	d008      	beq.n	8002500 <memmove+0x28>
 80024ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80024f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80024f6:	e7f8      	b.n	80024ea <memmove+0x12>
 80024f8:	4601      	mov	r1, r0
 80024fa:	4402      	add	r2, r0
 80024fc:	428a      	cmp	r2, r1
 80024fe:	d100      	bne.n	8002502 <memmove+0x2a>
 8002500:	bd10      	pop	{r4, pc}
 8002502:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002506:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800250a:	e7f7      	b.n	80024fc <memmove+0x24>

0800250c <_sbrk_r>:
 800250c:	b538      	push	{r3, r4, r5, lr}
 800250e:	2300      	movs	r3, #0
 8002510:	4d05      	ldr	r5, [pc, #20]	@ (8002528 <_sbrk_r+0x1c>)
 8002512:	4604      	mov	r4, r0
 8002514:	4608      	mov	r0, r1
 8002516:	602b      	str	r3, [r5, #0]
 8002518:	f7fe f972 	bl	8000800 <_sbrk>
 800251c:	1c43      	adds	r3, r0, #1
 800251e:	d102      	bne.n	8002526 <_sbrk_r+0x1a>
 8002520:	682b      	ldr	r3, [r5, #0]
 8002522:	b103      	cbz	r3, 8002526 <_sbrk_r+0x1a>
 8002524:	6023      	str	r3, [r4, #0]
 8002526:	bd38      	pop	{r3, r4, r5, pc}
 8002528:	200010e8 	.word	0x200010e8

0800252c <memchr>:
 800252c:	4603      	mov	r3, r0
 800252e:	b510      	push	{r4, lr}
 8002530:	b2c9      	uxtb	r1, r1
 8002532:	4402      	add	r2, r0
 8002534:	4293      	cmp	r3, r2
 8002536:	4618      	mov	r0, r3
 8002538:	d101      	bne.n	800253e <memchr+0x12>
 800253a:	2000      	movs	r0, #0
 800253c:	e003      	b.n	8002546 <memchr+0x1a>
 800253e:	7804      	ldrb	r4, [r0, #0]
 8002540:	3301      	adds	r3, #1
 8002542:	428c      	cmp	r4, r1
 8002544:	d1f6      	bne.n	8002534 <memchr+0x8>
 8002546:	bd10      	pop	{r4, pc}

08002548 <_realloc_r>:
 8002548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800254c:	4607      	mov	r7, r0
 800254e:	4614      	mov	r4, r2
 8002550:	460d      	mov	r5, r1
 8002552:	b921      	cbnz	r1, 800255e <_realloc_r+0x16>
 8002554:	4611      	mov	r1, r2
 8002556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800255a:	f7ff bc49 	b.w	8001df0 <_malloc_r>
 800255e:	b92a      	cbnz	r2, 800256c <_realloc_r+0x24>
 8002560:	f7ff fbdc 	bl	8001d1c <_free_r>
 8002564:	4625      	mov	r5, r4
 8002566:	4628      	mov	r0, r5
 8002568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800256c:	f000 f81a 	bl	80025a4 <_malloc_usable_size_r>
 8002570:	4284      	cmp	r4, r0
 8002572:	4606      	mov	r6, r0
 8002574:	d802      	bhi.n	800257c <_realloc_r+0x34>
 8002576:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800257a:	d8f4      	bhi.n	8002566 <_realloc_r+0x1e>
 800257c:	4621      	mov	r1, r4
 800257e:	4638      	mov	r0, r7
 8002580:	f7ff fc36 	bl	8001df0 <_malloc_r>
 8002584:	4680      	mov	r8, r0
 8002586:	b908      	cbnz	r0, 800258c <_realloc_r+0x44>
 8002588:	4645      	mov	r5, r8
 800258a:	e7ec      	b.n	8002566 <_realloc_r+0x1e>
 800258c:	42b4      	cmp	r4, r6
 800258e:	4622      	mov	r2, r4
 8002590:	4629      	mov	r1, r5
 8002592:	bf28      	it	cs
 8002594:	4632      	movcs	r2, r6
 8002596:	f7ff fbb3 	bl	8001d00 <memcpy>
 800259a:	4629      	mov	r1, r5
 800259c:	4638      	mov	r0, r7
 800259e:	f7ff fbbd 	bl	8001d1c <_free_r>
 80025a2:	e7f1      	b.n	8002588 <_realloc_r+0x40>

080025a4 <_malloc_usable_size_r>:
 80025a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025a8:	1f18      	subs	r0, r3, #4
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	bfbc      	itt	lt
 80025ae:	580b      	ldrlt	r3, [r1, r0]
 80025b0:	18c0      	addlt	r0, r0, r3
 80025b2:	4770      	bx	lr

080025b4 <_init>:
 80025b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025b6:	bf00      	nop
 80025b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ba:	bc08      	pop	{r3}
 80025bc:	469e      	mov	lr, r3
 80025be:	4770      	bx	lr

080025c0 <_fini>:
 80025c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025c2:	bf00      	nop
 80025c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025c6:	bc08      	pop	{r3}
 80025c8:	469e      	mov	lr, r3
 80025ca:	4770      	bx	lr
