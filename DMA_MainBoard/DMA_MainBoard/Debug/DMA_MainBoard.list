
DMA_MainBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000243c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002548  08002548  00003548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002590  08002590  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002590  08002590  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002590  08002590  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002590  08002590  00003590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002594  08002594  00003594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002598  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000000c  080025a4  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  080025a4  00004198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000708a  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015e3  00000000  00000000  0000b0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  0000c6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000517  00000000  00000000  0000cd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016830  00000000  00000000  0000d267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008028  00000000  00000000  00023a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000817a2  00000000  00000000  0002babf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad261  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019bc  00000000  00000000  000ad2a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000aec60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002530 	.word	0x08002530

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002530 	.word	0x08002530

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb7e 	bl	8000850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f820 	bl	8000198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8fe 	bl	8000358 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f8d6 	bl	800030c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f856 	bl	8000210 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000164:	f000 f87e 	bl	8000264 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000168:	f000 f8a6 	bl	80002b8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, rx_msg, sizeof(rx_msg));
 800016c:	2201      	movs	r2, #1
 800016e:	4907      	ldr	r1, [pc, #28]	@ (800018c <main+0x40>)
 8000170:	4807      	ldr	r0, [pc, #28]	@ (8000190 <main+0x44>)
 8000172:	f001 fe01 	bl	8001d78 <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000176:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800017a:	4806      	ldr	r0, [pc, #24]	@ (8000194 <main+0x48>)
 800017c:	f001 f886 	bl	800128c <HAL_GPIO_TogglePin>
//	  char debug[] = "no message recieved\n";
//	  HAL_UART_Transmit(&huart1, (uint8_t*)debug, sizeof(debug) - 1, 100);
	  HAL_Delay(500);
 8000180:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000184:	f000 fbc6 	bl	8000914 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000188:	bf00      	nop
 800018a:	e7f4      	b.n	8000176 <main+0x2a>
 800018c:	20000188 	.word	0x20000188
 8000190:	20000070 	.word	0x20000070
 8000194:	40011000 	.word	0x40011000

08000198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b090      	sub	sp, #64	@ 0x40
 800019c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019e:	f107 0318 	add.w	r3, r7, #24
 80001a2:	2228      	movs	r2, #40	@ 0x28
 80001a4:	2100      	movs	r1, #0
 80001a6:	4618      	mov	r0, r3
 80001a8:	f002 f996 	bl	80024d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	2200      	movs	r2, #0
 80001b0:	601a      	str	r2, [r3, #0]
 80001b2:	605a      	str	r2, [r3, #4]
 80001b4:	609a      	str	r2, [r3, #8]
 80001b6:	60da      	str	r2, [r3, #12]
 80001b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ba:	2302      	movs	r3, #2
 80001bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001be:	2301      	movs	r3, #1
 80001c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001c2:	2310      	movs	r3, #16
 80001c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001c6:	2300      	movs	r3, #0
 80001c8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ca:	f107 0318 	add.w	r3, r7, #24
 80001ce:	4618      	mov	r0, r3
 80001d0:	f001 f876 	bl	80012c0 <HAL_RCC_OscConfig>
 80001d4:	4603      	mov	r3, r0
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d001      	beq.n	80001de <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001da:	f000 f981 	bl	80004e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001de:	230f      	movs	r3, #15
 80001e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001e2:	2300      	movs	r3, #0
 80001e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ee:	2300      	movs	r3, #0
 80001f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001f2:	1d3b      	adds	r3, r7, #4
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f001 fae4 	bl	80017c4 <HAL_RCC_ClockConfig>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d001      	beq.n	8000206 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000202:	f000 f96d 	bl	80004e0 <Error_Handler>
  }
}
 8000206:	bf00      	nop
 8000208:	3740      	adds	r7, #64	@ 0x40
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
	...

08000210 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000214:	4b11      	ldr	r3, [pc, #68]	@ (800025c <MX_USART1_UART_Init+0x4c>)
 8000216:	4a12      	ldr	r2, [pc, #72]	@ (8000260 <MX_USART1_UART_Init+0x50>)
 8000218:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800021a:	4b10      	ldr	r3, [pc, #64]	@ (800025c <MX_USART1_UART_Init+0x4c>)
 800021c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000220:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000222:	4b0e      	ldr	r3, [pc, #56]	@ (800025c <MX_USART1_UART_Init+0x4c>)
 8000224:	2200      	movs	r2, #0
 8000226:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000228:	4b0c      	ldr	r3, [pc, #48]	@ (800025c <MX_USART1_UART_Init+0x4c>)
 800022a:	2200      	movs	r2, #0
 800022c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800022e:	4b0b      	ldr	r3, [pc, #44]	@ (800025c <MX_USART1_UART_Init+0x4c>)
 8000230:	2200      	movs	r2, #0
 8000232:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000234:	4b09      	ldr	r3, [pc, #36]	@ (800025c <MX_USART1_UART_Init+0x4c>)
 8000236:	220c      	movs	r2, #12
 8000238:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800023a:	4b08      	ldr	r3, [pc, #32]	@ (800025c <MX_USART1_UART_Init+0x4c>)
 800023c:	2200      	movs	r2, #0
 800023e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000240:	4b06      	ldr	r3, [pc, #24]	@ (800025c <MX_USART1_UART_Init+0x4c>)
 8000242:	2200      	movs	r2, #0
 8000244:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000246:	4805      	ldr	r0, [pc, #20]	@ (800025c <MX_USART1_UART_Init+0x4c>)
 8000248:	f001 fc4a 	bl	8001ae0 <HAL_UART_Init>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000252:	f000 f945 	bl	80004e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	20000028 	.word	0x20000028
 8000260:	40013800 	.word	0x40013800

08000264 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000268:	4b11      	ldr	r3, [pc, #68]	@ (80002b0 <MX_USART2_UART_Init+0x4c>)
 800026a:	4a12      	ldr	r2, [pc, #72]	@ (80002b4 <MX_USART2_UART_Init+0x50>)
 800026c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800026e:	4b10      	ldr	r3, [pc, #64]	@ (80002b0 <MX_USART2_UART_Init+0x4c>)
 8000270:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000274:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000276:	4b0e      	ldr	r3, [pc, #56]	@ (80002b0 <MX_USART2_UART_Init+0x4c>)
 8000278:	2200      	movs	r2, #0
 800027a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800027c:	4b0c      	ldr	r3, [pc, #48]	@ (80002b0 <MX_USART2_UART_Init+0x4c>)
 800027e:	2200      	movs	r2, #0
 8000280:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000282:	4b0b      	ldr	r3, [pc, #44]	@ (80002b0 <MX_USART2_UART_Init+0x4c>)
 8000284:	2200      	movs	r2, #0
 8000286:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000288:	4b09      	ldr	r3, [pc, #36]	@ (80002b0 <MX_USART2_UART_Init+0x4c>)
 800028a:	220c      	movs	r2, #12
 800028c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800028e:	4b08      	ldr	r3, [pc, #32]	@ (80002b0 <MX_USART2_UART_Init+0x4c>)
 8000290:	2200      	movs	r2, #0
 8000292:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000294:	4b06      	ldr	r3, [pc, #24]	@ (80002b0 <MX_USART2_UART_Init+0x4c>)
 8000296:	2200      	movs	r2, #0
 8000298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800029a:	4805      	ldr	r0, [pc, #20]	@ (80002b0 <MX_USART2_UART_Init+0x4c>)
 800029c:	f001 fc20 	bl	8001ae0 <HAL_UART_Init>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002a6:	f000 f91b 	bl	80004e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	20000070 	.word	0x20000070
 80002b4:	40004400 	.word	0x40004400

080002b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80002bc:	4b11      	ldr	r3, [pc, #68]	@ (8000304 <MX_USART3_UART_Init+0x4c>)
 80002be:	4a12      	ldr	r2, [pc, #72]	@ (8000308 <MX_USART3_UART_Init+0x50>)
 80002c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80002c2:	4b10      	ldr	r3, [pc, #64]	@ (8000304 <MX_USART3_UART_Init+0x4c>)
 80002c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80002ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000304 <MX_USART3_UART_Init+0x4c>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80002d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000304 <MX_USART3_UART_Init+0x4c>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80002d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000304 <MX_USART3_UART_Init+0x4c>)
 80002d8:	2200      	movs	r2, #0
 80002da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80002dc:	4b09      	ldr	r3, [pc, #36]	@ (8000304 <MX_USART3_UART_Init+0x4c>)
 80002de:	220c      	movs	r2, #12
 80002e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002e2:	4b08      	ldr	r3, [pc, #32]	@ (8000304 <MX_USART3_UART_Init+0x4c>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80002e8:	4b06      	ldr	r3, [pc, #24]	@ (8000304 <MX_USART3_UART_Init+0x4c>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80002ee:	4805      	ldr	r0, [pc, #20]	@ (8000304 <MX_USART3_UART_Init+0x4c>)
 80002f0:	f001 fbf6 	bl	8001ae0 <HAL_UART_Init>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80002fa:	f000 f8f1 	bl	80004e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	200000b8 	.word	0x200000b8
 8000308:	40004800 	.word	0x40004800

0800030c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000312:	4b10      	ldr	r3, [pc, #64]	@ (8000354 <MX_DMA_Init+0x48>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	4a0f      	ldr	r2, [pc, #60]	@ (8000354 <MX_DMA_Init+0x48>)
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	6153      	str	r3, [r2, #20]
 800031e:	4b0d      	ldr	r3, [pc, #52]	@ (8000354 <MX_DMA_Init+0x48>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800032a:	2200      	movs	r2, #0
 800032c:	2100      	movs	r1, #0
 800032e:	200c      	movs	r0, #12
 8000330:	f000 fbeb 	bl	8000b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000334:	200c      	movs	r0, #12
 8000336:	f000 fc04 	bl	8000b42 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800033a:	2200      	movs	r2, #0
 800033c:	2100      	movs	r1, #0
 800033e:	2010      	movs	r0, #16
 8000340:	f000 fbe3 	bl	8000b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000344:	2010      	movs	r0, #16
 8000346:	f000 fbfc 	bl	8000b42 <HAL_NVIC_EnableIRQ>

}
 800034a:	bf00      	nop
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40021000 	.word	0x40021000

08000358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b088      	sub	sp, #32
 800035c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035e:	f107 0310 	add.w	r3, r7, #16
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800036c:	4b24      	ldr	r3, [pc, #144]	@ (8000400 <MX_GPIO_Init+0xa8>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a23      	ldr	r2, [pc, #140]	@ (8000400 <MX_GPIO_Init+0xa8>)
 8000372:	f043 0310 	orr.w	r3, r3, #16
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b21      	ldr	r3, [pc, #132]	@ (8000400 <MX_GPIO_Init+0xa8>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0310 	and.w	r3, r3, #16
 8000380:	60fb      	str	r3, [r7, #12]
 8000382:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000384:	4b1e      	ldr	r3, [pc, #120]	@ (8000400 <MX_GPIO_Init+0xa8>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a1d      	ldr	r2, [pc, #116]	@ (8000400 <MX_GPIO_Init+0xa8>)
 800038a:	f043 0320 	orr.w	r3, r3, #32
 800038e:	6193      	str	r3, [r2, #24]
 8000390:	4b1b      	ldr	r3, [pc, #108]	@ (8000400 <MX_GPIO_Init+0xa8>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	f003 0320 	and.w	r3, r3, #32
 8000398:	60bb      	str	r3, [r7, #8]
 800039a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039c:	4b18      	ldr	r3, [pc, #96]	@ (8000400 <MX_GPIO_Init+0xa8>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a17      	ldr	r2, [pc, #92]	@ (8000400 <MX_GPIO_Init+0xa8>)
 80003a2:	f043 0304 	orr.w	r3, r3, #4
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b15      	ldr	r3, [pc, #84]	@ (8000400 <MX_GPIO_Init+0xa8>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0304 	and.w	r3, r3, #4
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b4:	4b12      	ldr	r3, [pc, #72]	@ (8000400 <MX_GPIO_Init+0xa8>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a11      	ldr	r2, [pc, #68]	@ (8000400 <MX_GPIO_Init+0xa8>)
 80003ba:	f043 0308 	orr.w	r3, r3, #8
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <MX_GPIO_Init+0xa8>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0308 	and.w	r3, r3, #8
 80003c8:	603b      	str	r3, [r7, #0]
 80003ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003d2:	480c      	ldr	r0, [pc, #48]	@ (8000404 <MX_GPIO_Init+0xac>)
 80003d4:	f000 ff42 	bl	800125c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003de:	2301      	movs	r3, #1
 80003e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e2:	2300      	movs	r3, #0
 80003e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e6:	2302      	movs	r3, #2
 80003e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003ea:	f107 0310 	add.w	r3, r7, #16
 80003ee:	4619      	mov	r1, r3
 80003f0:	4804      	ldr	r0, [pc, #16]	@ (8000404 <MX_GPIO_Init+0xac>)
 80003f2:	f000 fdaf 	bl	8000f54 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003f6:	bf00      	nop
 80003f8:	3720      	adds	r7, #32
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000
 8000404:	40011000 	.word	0x40011000

08000408 <HAL_UART_RxCpltCallback>:
//	}
//}

//HAL_UARTex_RxEventCallback is not supported in stm32f1

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000408:	b590      	push	{r4, r7, lr}
 800040a:	b087      	sub	sp, #28
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a18      	ldr	r2, [pc, #96]	@ (8000478 <HAL_UART_RxCpltCallback+0x70>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d12a      	bne.n	8000470 <HAL_UART_RxCpltCallback+0x68>
		if (memcmp(rx_msg, last_rx, sizeof(rx_msg)) != 0) {
 800041a:	4b18      	ldr	r3, [pc, #96]	@ (800047c <HAL_UART_RxCpltCallback+0x74>)
 800041c:	781a      	ldrb	r2, [r3, #0]
 800041e:	4b18      	ldr	r3, [pc, #96]	@ (8000480 <HAL_UART_RxCpltCallback+0x78>)
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	429a      	cmp	r2, r3
 8000424:	d024      	beq.n	8000470 <HAL_UART_RxCpltCallback+0x68>
			memcpy(tx_msg, rx_msg, sizeof(tx_msg));
 8000426:	4b15      	ldr	r3, [pc, #84]	@ (800047c <HAL_UART_RxCpltCallback+0x74>)
 8000428:	781a      	ldrb	r2, [r3, #0]
 800042a:	4b16      	ldr	r3, [pc, #88]	@ (8000484 <HAL_UART_RxCpltCallback+0x7c>)
 800042c:	701a      	strb	r2, [r3, #0]
			memcpy(last_rx, rx_msg, sizeof(last_rx));
 800042e:	4b13      	ldr	r3, [pc, #76]	@ (800047c <HAL_UART_RxCpltCallback+0x74>)
 8000430:	781a      	ldrb	r2, [r3, #0]
 8000432:	4b13      	ldr	r3, [pc, #76]	@ (8000480 <HAL_UART_RxCpltCallback+0x78>)
 8000434:	701a      	strb	r2, [r3, #0]

			//debug output
			char debug[] = "\n received: ";
 8000436:	4b14      	ldr	r3, [pc, #80]	@ (8000488 <HAL_UART_RxCpltCallback+0x80>)
 8000438:	f107 0408 	add.w	r4, r7, #8
 800043c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800043e:	c407      	stmia	r4!, {r0, r1, r2}
 8000440:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)debug, sizeof(debug) - 1, 100);
 8000442:	f107 0108 	add.w	r1, r7, #8
 8000446:	2364      	movs	r3, #100	@ 0x64
 8000448:	220c      	movs	r2, #12
 800044a:	4810      	ldr	r0, [pc, #64]	@ (800048c <HAL_UART_RxCpltCallback+0x84>)
 800044c:	f001 fb98 	bl	8001b80 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, rx_msg, sizeof(rx_msg), 100);
 8000450:	2364      	movs	r3, #100	@ 0x64
 8000452:	2201      	movs	r2, #1
 8000454:	4909      	ldr	r1, [pc, #36]	@ (800047c <HAL_UART_RxCpltCallback+0x74>)
 8000456:	480d      	ldr	r0, [pc, #52]	@ (800048c <HAL_UART_RxCpltCallback+0x84>)
 8000458:	f001 fb92 	bl	8001b80 <HAL_UART_Transmit>

			//restarting the DMAs
			HAL_UART_Receive_DMA(&huart2, rx_msg, sizeof(rx_msg));
 800045c:	2201      	movs	r2, #1
 800045e:	4907      	ldr	r1, [pc, #28]	@ (800047c <HAL_UART_RxCpltCallback+0x74>)
 8000460:	480b      	ldr	r0, [pc, #44]	@ (8000490 <HAL_UART_RxCpltCallback+0x88>)
 8000462:	f001 fc89 	bl	8001d78 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart3, tx_msg, sizeof(tx_msg));
 8000466:	2201      	movs	r2, #1
 8000468:	4906      	ldr	r1, [pc, #24]	@ (8000484 <HAL_UART_RxCpltCallback+0x7c>)
 800046a:	480a      	ldr	r0, [pc, #40]	@ (8000494 <HAL_UART_RxCpltCallback+0x8c>)
 800046c:	f001 fc14 	bl	8001c98 <HAL_UART_Transmit_DMA>
		}
	}
}
 8000470:	bf00      	nop
 8000472:	371c      	adds	r7, #28
 8000474:	46bd      	mov	sp, r7
 8000476:	bd90      	pop	{r4, r7, pc}
 8000478:	40004400 	.word	0x40004400
 800047c:	20000188 	.word	0x20000188
 8000480:	2000018c 	.word	0x2000018c
 8000484:	20000190 	.word	0x20000190
 8000488:	08002548 	.word	0x08002548
 800048c:	20000028 	.word	0x20000028
 8000490:	20000070 	.word	0x20000070
 8000494:	200000b8 	.word	0x200000b8

08000498 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000498:	b580      	push	{r7, lr}
 800049a:	b086      	sub	sp, #24
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a0b      	ldr	r2, [pc, #44]	@ (80004d4 <HAL_UART_TxCpltCallback+0x3c>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d10f      	bne.n	80004ca <HAL_UART_TxCpltCallback+0x32>
		char debug[] = "forwarded.";
 80004aa:	4a0b      	ldr	r2, [pc, #44]	@ (80004d8 <HAL_UART_TxCpltCallback+0x40>)
 80004ac:	f107 030c 	add.w	r3, r7, #12
 80004b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80004b2:	c303      	stmia	r3!, {r0, r1}
 80004b4:	801a      	strh	r2, [r3, #0]
 80004b6:	3302      	adds	r3, #2
 80004b8:	0c12      	lsrs	r2, r2, #16
 80004ba:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)debug, sizeof(debug) - 1, 100);
 80004bc:	f107 010c 	add.w	r1, r7, #12
 80004c0:	2364      	movs	r3, #100	@ 0x64
 80004c2:	220a      	movs	r2, #10
 80004c4:	4805      	ldr	r0, [pc, #20]	@ (80004dc <HAL_UART_TxCpltCallback+0x44>)
 80004c6:	f001 fb5b 	bl	8001b80 <HAL_UART_Transmit>
	}
}
 80004ca:	bf00      	nop
 80004cc:	3718      	adds	r7, #24
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40004800 	.word	0x40004800
 80004d8:	08002558 	.word	0x08002558
 80004dc:	20000028 	.word	0x20000028

080004e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e4:	b672      	cpsid	i
}
 80004e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <Error_Handler+0x8>

080004ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004f2:	4b15      	ldr	r3, [pc, #84]	@ (8000548 <HAL_MspInit+0x5c>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	4a14      	ldr	r2, [pc, #80]	@ (8000548 <HAL_MspInit+0x5c>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	6193      	str	r3, [r2, #24]
 80004fe:	4b12      	ldr	r3, [pc, #72]	@ (8000548 <HAL_MspInit+0x5c>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050a:	4b0f      	ldr	r3, [pc, #60]	@ (8000548 <HAL_MspInit+0x5c>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	4a0e      	ldr	r2, [pc, #56]	@ (8000548 <HAL_MspInit+0x5c>)
 8000510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000514:	61d3      	str	r3, [r2, #28]
 8000516:	4b0c      	ldr	r3, [pc, #48]	@ (8000548 <HAL_MspInit+0x5c>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000522:	4b0a      	ldr	r3, [pc, #40]	@ (800054c <HAL_MspInit+0x60>)
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	4a04      	ldr	r2, [pc, #16]	@ (800054c <HAL_MspInit+0x60>)
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	40021000 	.word	0x40021000
 800054c:	40010000 	.word	0x40010000

08000550 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08c      	sub	sp, #48	@ 0x30
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000558:	f107 0320 	add.w	r3, r7, #32
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a79      	ldr	r2, [pc, #484]	@ (8000750 <HAL_UART_MspInit+0x200>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d132      	bne.n	80005d6 <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000570:	4b78      	ldr	r3, [pc, #480]	@ (8000754 <HAL_UART_MspInit+0x204>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a77      	ldr	r2, [pc, #476]	@ (8000754 <HAL_UART_MspInit+0x204>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b75      	ldr	r3, [pc, #468]	@ (8000754 <HAL_UART_MspInit+0x204>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000584:	61fb      	str	r3, [r7, #28]
 8000586:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000588:	4b72      	ldr	r3, [pc, #456]	@ (8000754 <HAL_UART_MspInit+0x204>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a71      	ldr	r2, [pc, #452]	@ (8000754 <HAL_UART_MspInit+0x204>)
 800058e:	f043 0304 	orr.w	r3, r3, #4
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b6f      	ldr	r3, [pc, #444]	@ (8000754 <HAL_UART_MspInit+0x204>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0304 	and.w	r3, r3, #4
 800059c:	61bb      	str	r3, [r7, #24]
 800059e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a6:	2302      	movs	r3, #2
 80005a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005aa:	2303      	movs	r3, #3
 80005ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	4619      	mov	r1, r3
 80005b4:	4868      	ldr	r0, [pc, #416]	@ (8000758 <HAL_UART_MspInit+0x208>)
 80005b6:	f000 fccd 	bl	8000f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c0:	2300      	movs	r3, #0
 80005c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c8:	f107 0320 	add.w	r3, r7, #32
 80005cc:	4619      	mov	r1, r3
 80005ce:	4862      	ldr	r0, [pc, #392]	@ (8000758 <HAL_UART_MspInit+0x208>)
 80005d0:	f000 fcc0 	bl	8000f54 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80005d4:	e0b8      	b.n	8000748 <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART2)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a60      	ldr	r2, [pc, #384]	@ (800075c <HAL_UART_MspInit+0x20c>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d156      	bne.n	800068e <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80005e0:	4b5c      	ldr	r3, [pc, #368]	@ (8000754 <HAL_UART_MspInit+0x204>)
 80005e2:	69db      	ldr	r3, [r3, #28]
 80005e4:	4a5b      	ldr	r2, [pc, #364]	@ (8000754 <HAL_UART_MspInit+0x204>)
 80005e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005ea:	61d3      	str	r3, [r2, #28]
 80005ec:	4b59      	ldr	r3, [pc, #356]	@ (8000754 <HAL_UART_MspInit+0x204>)
 80005ee:	69db      	ldr	r3, [r3, #28]
 80005f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005f4:	617b      	str	r3, [r7, #20]
 80005f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f8:	4b56      	ldr	r3, [pc, #344]	@ (8000754 <HAL_UART_MspInit+0x204>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a55      	ldr	r2, [pc, #340]	@ (8000754 <HAL_UART_MspInit+0x204>)
 80005fe:	f043 0304 	orr.w	r3, r3, #4
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b53      	ldr	r3, [pc, #332]	@ (8000754 <HAL_UART_MspInit+0x204>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0304 	and.w	r3, r3, #4
 800060c:	613b      	str	r3, [r7, #16]
 800060e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000610:	2304      	movs	r3, #4
 8000612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000614:	2302      	movs	r3, #2
 8000616:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000618:	2303      	movs	r3, #3
 800061a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061c:	f107 0320 	add.w	r3, r7, #32
 8000620:	4619      	mov	r1, r3
 8000622:	484d      	ldr	r0, [pc, #308]	@ (8000758 <HAL_UART_MspInit+0x208>)
 8000624:	f000 fc96 	bl	8000f54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000628:	2308      	movs	r3, #8
 800062a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062c:	2300      	movs	r3, #0
 800062e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000634:	f107 0320 	add.w	r3, r7, #32
 8000638:	4619      	mov	r1, r3
 800063a:	4847      	ldr	r0, [pc, #284]	@ (8000758 <HAL_UART_MspInit+0x208>)
 800063c:	f000 fc8a 	bl	8000f54 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000640:	4b47      	ldr	r3, [pc, #284]	@ (8000760 <HAL_UART_MspInit+0x210>)
 8000642:	4a48      	ldr	r2, [pc, #288]	@ (8000764 <HAL_UART_MspInit+0x214>)
 8000644:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000646:	4b46      	ldr	r3, [pc, #280]	@ (8000760 <HAL_UART_MspInit+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800064c:	4b44      	ldr	r3, [pc, #272]	@ (8000760 <HAL_UART_MspInit+0x210>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000652:	4b43      	ldr	r3, [pc, #268]	@ (8000760 <HAL_UART_MspInit+0x210>)
 8000654:	2280      	movs	r2, #128	@ 0x80
 8000656:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000658:	4b41      	ldr	r3, [pc, #260]	@ (8000760 <HAL_UART_MspInit+0x210>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800065e:	4b40      	ldr	r3, [pc, #256]	@ (8000760 <HAL_UART_MspInit+0x210>)
 8000660:	2200      	movs	r2, #0
 8000662:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000664:	4b3e      	ldr	r3, [pc, #248]	@ (8000760 <HAL_UART_MspInit+0x210>)
 8000666:	2220      	movs	r2, #32
 8000668:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800066a:	4b3d      	ldr	r3, [pc, #244]	@ (8000760 <HAL_UART_MspInit+0x210>)
 800066c:	2200      	movs	r2, #0
 800066e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000670:	483b      	ldr	r0, [pc, #236]	@ (8000760 <HAL_UART_MspInit+0x210>)
 8000672:	f000 fa81 	bl	8000b78 <HAL_DMA_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <HAL_UART_MspInit+0x130>
      Error_Handler();
 800067c:	f7ff ff30 	bl	80004e0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4a37      	ldr	r2, [pc, #220]	@ (8000760 <HAL_UART_MspInit+0x210>)
 8000684:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000686:	4a36      	ldr	r2, [pc, #216]	@ (8000760 <HAL_UART_MspInit+0x210>)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	6253      	str	r3, [r2, #36]	@ 0x24
}
 800068c:	e05c      	b.n	8000748 <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART3)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a35      	ldr	r2, [pc, #212]	@ (8000768 <HAL_UART_MspInit+0x218>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d157      	bne.n	8000748 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000698:	4b2e      	ldr	r3, [pc, #184]	@ (8000754 <HAL_UART_MspInit+0x204>)
 800069a:	69db      	ldr	r3, [r3, #28]
 800069c:	4a2d      	ldr	r2, [pc, #180]	@ (8000754 <HAL_UART_MspInit+0x204>)
 800069e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80006a2:	61d3      	str	r3, [r2, #28]
 80006a4:	4b2b      	ldr	r3, [pc, #172]	@ (8000754 <HAL_UART_MspInit+0x204>)
 80006a6:	69db      	ldr	r3, [r3, #28]
 80006a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b0:	4b28      	ldr	r3, [pc, #160]	@ (8000754 <HAL_UART_MspInit+0x204>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a27      	ldr	r2, [pc, #156]	@ (8000754 <HAL_UART_MspInit+0x204>)
 80006b6:	f043 0308 	orr.w	r3, r3, #8
 80006ba:	6193      	str	r3, [r2, #24]
 80006bc:	4b25      	ldr	r3, [pc, #148]	@ (8000754 <HAL_UART_MspInit+0x204>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f003 0308 	and.w	r3, r3, #8
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ce:	2302      	movs	r3, #2
 80006d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d2:	2303      	movs	r3, #3
 80006d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	4619      	mov	r1, r3
 80006dc:	4823      	ldr	r0, [pc, #140]	@ (800076c <HAL_UART_MspInit+0x21c>)
 80006de:	f000 fc39 	bl	8000f54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80006e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f0:	f107 0320 	add.w	r3, r7, #32
 80006f4:	4619      	mov	r1, r3
 80006f6:	481d      	ldr	r0, [pc, #116]	@ (800076c <HAL_UART_MspInit+0x21c>)
 80006f8:	f000 fc2c 	bl	8000f54 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80006fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <HAL_UART_MspInit+0x220>)
 80006fe:	4a1d      	ldr	r2, [pc, #116]	@ (8000774 <HAL_UART_MspInit+0x224>)
 8000700:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000702:	4b1b      	ldr	r3, [pc, #108]	@ (8000770 <HAL_UART_MspInit+0x220>)
 8000704:	2210      	movs	r2, #16
 8000706:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000708:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <HAL_UART_MspInit+0x220>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800070e:	4b18      	ldr	r3, [pc, #96]	@ (8000770 <HAL_UART_MspInit+0x220>)
 8000710:	2280      	movs	r2, #128	@ 0x80
 8000712:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000714:	4b16      	ldr	r3, [pc, #88]	@ (8000770 <HAL_UART_MspInit+0x220>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800071a:	4b15      	ldr	r3, [pc, #84]	@ (8000770 <HAL_UART_MspInit+0x220>)
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 8000720:	4b13      	ldr	r3, [pc, #76]	@ (8000770 <HAL_UART_MspInit+0x220>)
 8000722:	2220      	movs	r2, #32
 8000724:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000726:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <HAL_UART_MspInit+0x220>)
 8000728:	2200      	movs	r2, #0
 800072a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800072c:	4810      	ldr	r0, [pc, #64]	@ (8000770 <HAL_UART_MspInit+0x220>)
 800072e:	f000 fa23 	bl	8000b78 <HAL_DMA_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <HAL_UART_MspInit+0x1ec>
      Error_Handler();
 8000738:	f7ff fed2 	bl	80004e0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a0c      	ldr	r2, [pc, #48]	@ (8000770 <HAL_UART_MspInit+0x220>)
 8000740:	639a      	str	r2, [r3, #56]	@ 0x38
 8000742:	4a0b      	ldr	r2, [pc, #44]	@ (8000770 <HAL_UART_MspInit+0x220>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000748:	bf00      	nop
 800074a:	3730      	adds	r7, #48	@ 0x30
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40013800 	.word	0x40013800
 8000754:	40021000 	.word	0x40021000
 8000758:	40010800 	.word	0x40010800
 800075c:	40004400 	.word	0x40004400
 8000760:	20000100 	.word	0x20000100
 8000764:	4002006c 	.word	0x4002006c
 8000768:	40004800 	.word	0x40004800
 800076c:	40010c00 	.word	0x40010c00
 8000770:	20000144 	.word	0x20000144
 8000774:	4002001c 	.word	0x4002001c

08000778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <NMI_Handler+0x4>

08000780 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <HardFault_Handler+0x4>

08000788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <MemManage_Handler+0x4>

08000790 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <BusFault_Handler+0x4>

08000798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <UsageFault_Handler+0x4>

080007a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr

080007ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr

080007b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr

080007c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c8:	f000 f888 	bl	80008dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80007d4:	4802      	ldr	r0, [pc, #8]	@ (80007e0 <DMA1_Channel2_IRQHandler+0x10>)
 80007d6:	f000 fa89 	bl	8000cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000144 	.word	0x20000144

080007e4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80007e8:	4802      	ldr	r0, [pc, #8]	@ (80007f4 <DMA1_Channel6_IRQHandler+0x10>)
 80007ea:	f000 fa7f 	bl	8000cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000100 	.word	0x20000100

080007f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr

08000804 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000804:	f7ff fff8 	bl	80007f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000808:	480b      	ldr	r0, [pc, #44]	@ (8000838 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800080a:	490c      	ldr	r1, [pc, #48]	@ (800083c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800080c:	4a0c      	ldr	r2, [pc, #48]	@ (8000840 <LoopFillZerobss+0x16>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000810:	e002      	b.n	8000818 <LoopCopyDataInit>

08000812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000816:	3304      	adds	r3, #4

08000818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800081c:	d3f9      	bcc.n	8000812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800081e:	4a09      	ldr	r2, [pc, #36]	@ (8000844 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000820:	4c09      	ldr	r4, [pc, #36]	@ (8000848 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000824:	e001      	b.n	800082a <LoopFillZerobss>

08000826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000828:	3204      	adds	r2, #4

0800082a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800082c:	d3fb      	bcc.n	8000826 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800082e:	f001 fe5b 	bl	80024e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000832:	f7ff fc8b 	bl	800014c <main>
  bx lr
 8000836:	4770      	bx	lr
  ldr r0, =_sdata
 8000838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800083c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000840:	08002598 	.word	0x08002598
  ldr r2, =_sbss
 8000844:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000848:	20000198 	.word	0x20000198

0800084c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800084c:	e7fe      	b.n	800084c <ADC1_2_IRQHandler>
	...

08000850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000854:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <HAL_Init+0x28>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a07      	ldr	r2, [pc, #28]	@ (8000878 <HAL_Init+0x28>)
 800085a:	f043 0310 	orr.w	r3, r3, #16
 800085e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000860:	2003      	movs	r0, #3
 8000862:	f000 f947 	bl	8000af4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000866:	200f      	movs	r0, #15
 8000868:	f000 f808 	bl	800087c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800086c:	f7ff fe3e 	bl	80004ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40022000 	.word	0x40022000

0800087c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000884:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <HAL_InitTick+0x54>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <HAL_InitTick+0x58>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	4619      	mov	r1, r3
 800088e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000892:	fbb3 f3f1 	udiv	r3, r3, r1
 8000896:	fbb2 f3f3 	udiv	r3, r2, r3
 800089a:	4618      	mov	r0, r3
 800089c:	f000 f95f 	bl	8000b5e <HAL_SYSTICK_Config>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
 80008a8:	e00e      	b.n	80008c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2b0f      	cmp	r3, #15
 80008ae:	d80a      	bhi.n	80008c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b0:	2200      	movs	r2, #0
 80008b2:	6879      	ldr	r1, [r7, #4]
 80008b4:	f04f 30ff 	mov.w	r0, #4294967295
 80008b8:	f000 f927 	bl	8000b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008bc:	4a06      	ldr	r2, [pc, #24]	@ (80008d8 <HAL_InitTick+0x5c>)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008c2:	2300      	movs	r3, #0
 80008c4:	e000      	b.n	80008c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000000 	.word	0x20000000
 80008d4:	20000008 	.word	0x20000008
 80008d8:	20000004 	.word	0x20000004

080008dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e0:	4b05      	ldr	r3, [pc, #20]	@ (80008f8 <HAL_IncTick+0x1c>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b05      	ldr	r3, [pc, #20]	@ (80008fc <HAL_IncTick+0x20>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4413      	add	r3, r2
 80008ec:	4a03      	ldr	r2, [pc, #12]	@ (80008fc <HAL_IncTick+0x20>)
 80008ee:	6013      	str	r3, [r2, #0]
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr
 80008f8:	20000008 	.word	0x20000008
 80008fc:	20000194 	.word	0x20000194

08000900 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  return uwTick;
 8000904:	4b02      	ldr	r3, [pc, #8]	@ (8000910 <HAL_GetTick+0x10>)
 8000906:	681b      	ldr	r3, [r3, #0]
}
 8000908:	4618      	mov	r0, r3
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	20000194 	.word	0x20000194

08000914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800091c:	f7ff fff0 	bl	8000900 <HAL_GetTick>
 8000920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800092c:	d005      	beq.n	800093a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800092e:	4b0a      	ldr	r3, [pc, #40]	@ (8000958 <HAL_Delay+0x44>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	461a      	mov	r2, r3
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	4413      	add	r3, r2
 8000938:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800093a:	bf00      	nop
 800093c:	f7ff ffe0 	bl	8000900 <HAL_GetTick>
 8000940:	4602      	mov	r2, r0
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	429a      	cmp	r2, r3
 800094a:	d8f7      	bhi.n	800093c <HAL_Delay+0x28>
  {
  }
}
 800094c:	bf00      	nop
 800094e:	bf00      	nop
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000008 	.word	0x20000008

0800095c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800096c:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <__NVIC_SetPriorityGrouping+0x44>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000972:	68ba      	ldr	r2, [r7, #8]
 8000974:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000978:	4013      	ands	r3, r2
 800097a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000984:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000988:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800098c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800098e:	4a04      	ldr	r2, [pc, #16]	@ (80009a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	60d3      	str	r3, [r2, #12]
}
 8000994:	bf00      	nop
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a8:	4b04      	ldr	r3, [pc, #16]	@ (80009bc <__NVIC_GetPriorityGrouping+0x18>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	0a1b      	lsrs	r3, r3, #8
 80009ae:	f003 0307 	and.w	r3, r3, #7
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	db0b      	blt.n	80009ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	f003 021f 	and.w	r2, r3, #31
 80009d8:	4906      	ldr	r1, [pc, #24]	@ (80009f4 <__NVIC_EnableIRQ+0x34>)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	095b      	lsrs	r3, r3, #5
 80009e0:	2001      	movs	r0, #1
 80009e2:	fa00 f202 	lsl.w	r2, r0, r2
 80009e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	e000e100 	.word	0xe000e100

080009f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	6039      	str	r1, [r7, #0]
 8000a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	db0a      	blt.n	8000a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	490c      	ldr	r1, [pc, #48]	@ (8000a44 <__NVIC_SetPriority+0x4c>)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	0112      	lsls	r2, r2, #4
 8000a18:	b2d2      	uxtb	r2, r2
 8000a1a:	440b      	add	r3, r1
 8000a1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a20:	e00a      	b.n	8000a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4908      	ldr	r1, [pc, #32]	@ (8000a48 <__NVIC_SetPriority+0x50>)
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	f003 030f 	and.w	r3, r3, #15
 8000a2e:	3b04      	subs	r3, #4
 8000a30:	0112      	lsls	r2, r2, #4
 8000a32:	b2d2      	uxtb	r2, r2
 8000a34:	440b      	add	r3, r1
 8000a36:	761a      	strb	r2, [r3, #24]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000e100 	.word	0xe000e100
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b089      	sub	sp, #36	@ 0x24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	f1c3 0307 	rsb	r3, r3, #7
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	bf28      	it	cs
 8000a6a:	2304      	movcs	r3, #4
 8000a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3304      	adds	r3, #4
 8000a72:	2b06      	cmp	r3, #6
 8000a74:	d902      	bls.n	8000a7c <NVIC_EncodePriority+0x30>
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3b03      	subs	r3, #3
 8000a7a:	e000      	b.n	8000a7e <NVIC_EncodePriority+0x32>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a80:	f04f 32ff 	mov.w	r2, #4294967295
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43da      	mvns	r2, r3
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	401a      	ands	r2, r3
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a94:	f04f 31ff 	mov.w	r1, #4294967295
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9e:	43d9      	mvns	r1, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa4:	4313      	orrs	r3, r2
         );
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3724      	adds	r7, #36	@ 0x24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr

08000ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ac0:	d301      	bcc.n	8000ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e00f      	b.n	8000ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8000af0 <SysTick_Config+0x40>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ace:	210f      	movs	r1, #15
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	f7ff ff90 	bl	80009f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad8:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <SysTick_Config+0x40>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ade:	4b04      	ldr	r3, [pc, #16]	@ (8000af0 <SysTick_Config+0x40>)
 8000ae0:	2207      	movs	r2, #7
 8000ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	e000e010 	.word	0xe000e010

08000af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff ff2d 	bl	800095c <__NVIC_SetPriorityGrouping>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b086      	sub	sp, #24
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	4603      	mov	r3, r0
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	607a      	str	r2, [r7, #4]
 8000b16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b1c:	f7ff ff42 	bl	80009a4 <__NVIC_GetPriorityGrouping>
 8000b20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	68b9      	ldr	r1, [r7, #8]
 8000b26:	6978      	ldr	r0, [r7, #20]
 8000b28:	f7ff ff90 	bl	8000a4c <NVIC_EncodePriority>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b32:	4611      	mov	r1, r2
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ff5f 	bl	80009f8 <__NVIC_SetPriority>
}
 8000b3a:	bf00      	nop
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	4603      	mov	r3, r0
 8000b4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff35 	bl	80009c0 <__NVIC_EnableIRQ>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff ffa2 	bl	8000ab0 <SysTick_Config>
 8000b6c:	4603      	mov	r3, r0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d101      	bne.n	8000b8e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e043      	b.n	8000c16 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	4b22      	ldr	r3, [pc, #136]	@ (8000c20 <HAL_DMA_Init+0xa8>)
 8000b96:	4413      	add	r3, r2
 8000b98:	4a22      	ldr	r2, [pc, #136]	@ (8000c24 <HAL_DMA_Init+0xac>)
 8000b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9e:	091b      	lsrs	r3, r3, #4
 8000ba0:	009a      	lsls	r2, r3, #2
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a1f      	ldr	r2, [pc, #124]	@ (8000c28 <HAL_DMA_Init+0xb0>)
 8000baa:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2202      	movs	r2, #2
 8000bb0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000bc2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000bc6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000be8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2201      	movs	r2, #1
 8000c08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr
 8000c20:	bffdfff8 	.word	0xbffdfff8
 8000c24:	cccccccd 	.word	0xcccccccd
 8000c28:	40020000 	.word	0x40020000

08000c2c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
 8000c38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d101      	bne.n	8000c4c <HAL_DMA_Start_IT+0x20>
 8000c48:	2302      	movs	r3, #2
 8000c4a:	e04b      	b.n	8000ce4 <HAL_DMA_Start_IT+0xb8>
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d13a      	bne.n	8000cd6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2202      	movs	r2, #2
 8000c64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f022 0201 	bic.w	r2, r2, #1
 8000c7c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	68b9      	ldr	r1, [r7, #8]
 8000c84:	68f8      	ldr	r0, [r7, #12]
 8000c86:	f000 f937 	bl	8000ef8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d008      	beq.n	8000ca4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f042 020e 	orr.w	r2, r2, #14
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	e00f      	b.n	8000cc4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f022 0204 	bic.w	r2, r2, #4
 8000cb2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f042 020a 	orr.w	r2, r2, #10
 8000cc2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f042 0201 	orr.w	r2, r2, #1
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	e005      	b.n	8000ce2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d08:	2204      	movs	r2, #4
 8000d0a:	409a      	lsls	r2, r3
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d04f      	beq.n	8000db4 <HAL_DMA_IRQHandler+0xc8>
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	f003 0304 	and.w	r3, r3, #4
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d04a      	beq.n	8000db4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f003 0320 	and.w	r3, r3, #32
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d107      	bne.n	8000d3c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f022 0204 	bic.w	r2, r2, #4
 8000d3a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a66      	ldr	r2, [pc, #408]	@ (8000edc <HAL_DMA_IRQHandler+0x1f0>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d029      	beq.n	8000d9a <HAL_DMA_IRQHandler+0xae>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a65      	ldr	r2, [pc, #404]	@ (8000ee0 <HAL_DMA_IRQHandler+0x1f4>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d022      	beq.n	8000d96 <HAL_DMA_IRQHandler+0xaa>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a63      	ldr	r2, [pc, #396]	@ (8000ee4 <HAL_DMA_IRQHandler+0x1f8>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d01a      	beq.n	8000d90 <HAL_DMA_IRQHandler+0xa4>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a62      	ldr	r2, [pc, #392]	@ (8000ee8 <HAL_DMA_IRQHandler+0x1fc>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d012      	beq.n	8000d8a <HAL_DMA_IRQHandler+0x9e>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a60      	ldr	r2, [pc, #384]	@ (8000eec <HAL_DMA_IRQHandler+0x200>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d00a      	beq.n	8000d84 <HAL_DMA_IRQHandler+0x98>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a5f      	ldr	r2, [pc, #380]	@ (8000ef0 <HAL_DMA_IRQHandler+0x204>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d102      	bne.n	8000d7e <HAL_DMA_IRQHandler+0x92>
 8000d78:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d7c:	e00e      	b.n	8000d9c <HAL_DMA_IRQHandler+0xb0>
 8000d7e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000d82:	e00b      	b.n	8000d9c <HAL_DMA_IRQHandler+0xb0>
 8000d84:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000d88:	e008      	b.n	8000d9c <HAL_DMA_IRQHandler+0xb0>
 8000d8a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d8e:	e005      	b.n	8000d9c <HAL_DMA_IRQHandler+0xb0>
 8000d90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d94:	e002      	b.n	8000d9c <HAL_DMA_IRQHandler+0xb0>
 8000d96:	2340      	movs	r3, #64	@ 0x40
 8000d98:	e000      	b.n	8000d9c <HAL_DMA_IRQHandler+0xb0>
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	4a55      	ldr	r2, [pc, #340]	@ (8000ef4 <HAL_DMA_IRQHandler+0x208>)
 8000d9e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	f000 8094 	beq.w	8000ed2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000db2:	e08e      	b.n	8000ed2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db8:	2202      	movs	r2, #2
 8000dba:	409a      	lsls	r2, r3
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d056      	beq.n	8000e72 <HAL_DMA_IRQHandler+0x186>
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d051      	beq.n	8000e72 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f003 0320 	and.w	r3, r3, #32
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d10b      	bne.n	8000df4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f022 020a 	bic.w	r2, r2, #10
 8000dea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2201      	movs	r2, #1
 8000df0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a38      	ldr	r2, [pc, #224]	@ (8000edc <HAL_DMA_IRQHandler+0x1f0>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d029      	beq.n	8000e52 <HAL_DMA_IRQHandler+0x166>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a37      	ldr	r2, [pc, #220]	@ (8000ee0 <HAL_DMA_IRQHandler+0x1f4>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d022      	beq.n	8000e4e <HAL_DMA_IRQHandler+0x162>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a35      	ldr	r2, [pc, #212]	@ (8000ee4 <HAL_DMA_IRQHandler+0x1f8>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d01a      	beq.n	8000e48 <HAL_DMA_IRQHandler+0x15c>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a34      	ldr	r2, [pc, #208]	@ (8000ee8 <HAL_DMA_IRQHandler+0x1fc>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d012      	beq.n	8000e42 <HAL_DMA_IRQHandler+0x156>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a32      	ldr	r2, [pc, #200]	@ (8000eec <HAL_DMA_IRQHandler+0x200>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d00a      	beq.n	8000e3c <HAL_DMA_IRQHandler+0x150>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a31      	ldr	r2, [pc, #196]	@ (8000ef0 <HAL_DMA_IRQHandler+0x204>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d102      	bne.n	8000e36 <HAL_DMA_IRQHandler+0x14a>
 8000e30:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000e34:	e00e      	b.n	8000e54 <HAL_DMA_IRQHandler+0x168>
 8000e36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e3a:	e00b      	b.n	8000e54 <HAL_DMA_IRQHandler+0x168>
 8000e3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e40:	e008      	b.n	8000e54 <HAL_DMA_IRQHandler+0x168>
 8000e42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e46:	e005      	b.n	8000e54 <HAL_DMA_IRQHandler+0x168>
 8000e48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e4c:	e002      	b.n	8000e54 <HAL_DMA_IRQHandler+0x168>
 8000e4e:	2320      	movs	r3, #32
 8000e50:	e000      	b.n	8000e54 <HAL_DMA_IRQHandler+0x168>
 8000e52:	2302      	movs	r3, #2
 8000e54:	4a27      	ldr	r2, [pc, #156]	@ (8000ef4 <HAL_DMA_IRQHandler+0x208>)
 8000e56:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d034      	beq.n	8000ed2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000e70:	e02f      	b.n	8000ed2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e76:	2208      	movs	r2, #8
 8000e78:	409a      	lsls	r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d028      	beq.n	8000ed4 <HAL_DMA_IRQHandler+0x1e8>
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	f003 0308 	and.w	r3, r3, #8
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d023      	beq.n	8000ed4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f022 020e 	bic.w	r2, r2, #14
 8000e9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eaa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d004      	beq.n	8000ed4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	4798      	blx	r3
    }
  }
  return;
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
}
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40020008 	.word	0x40020008
 8000ee0:	4002001c 	.word	0x4002001c
 8000ee4:	40020030 	.word	0x40020030
 8000ee8:	40020044 	.word	0x40020044
 8000eec:	40020058 	.word	0x40020058
 8000ef0:	4002006c 	.word	0x4002006c
 8000ef4:	40020000 	.word	0x40020000

08000ef8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
 8000f04:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f0e:	2101      	movs	r1, #1
 8000f10:	fa01 f202 	lsl.w	r2, r1, r2
 8000f14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	683a      	ldr	r2, [r7, #0]
 8000f1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	2b10      	cmp	r3, #16
 8000f24:	d108      	bne.n	8000f38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f36:	e007      	b.n	8000f48 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	68ba      	ldr	r2, [r7, #8]
 8000f3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	60da      	str	r2, [r3, #12]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
	...

08000f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b08b      	sub	sp, #44	@ 0x2c
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f62:	2300      	movs	r3, #0
 8000f64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f66:	e169      	b.n	800123c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	69fa      	ldr	r2, [r7, #28]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	f040 8158 	bne.w	8001236 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	4a9a      	ldr	r2, [pc, #616]	@ (80011f4 <HAL_GPIO_Init+0x2a0>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d05e      	beq.n	800104e <HAL_GPIO_Init+0xfa>
 8000f90:	4a98      	ldr	r2, [pc, #608]	@ (80011f4 <HAL_GPIO_Init+0x2a0>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d875      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000f96:	4a98      	ldr	r2, [pc, #608]	@ (80011f8 <HAL_GPIO_Init+0x2a4>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d058      	beq.n	800104e <HAL_GPIO_Init+0xfa>
 8000f9c:	4a96      	ldr	r2, [pc, #600]	@ (80011f8 <HAL_GPIO_Init+0x2a4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d86f      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000fa2:	4a96      	ldr	r2, [pc, #600]	@ (80011fc <HAL_GPIO_Init+0x2a8>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d052      	beq.n	800104e <HAL_GPIO_Init+0xfa>
 8000fa8:	4a94      	ldr	r2, [pc, #592]	@ (80011fc <HAL_GPIO_Init+0x2a8>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d869      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000fae:	4a94      	ldr	r2, [pc, #592]	@ (8001200 <HAL_GPIO_Init+0x2ac>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d04c      	beq.n	800104e <HAL_GPIO_Init+0xfa>
 8000fb4:	4a92      	ldr	r2, [pc, #584]	@ (8001200 <HAL_GPIO_Init+0x2ac>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d863      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000fba:	4a92      	ldr	r2, [pc, #584]	@ (8001204 <HAL_GPIO_Init+0x2b0>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d046      	beq.n	800104e <HAL_GPIO_Init+0xfa>
 8000fc0:	4a90      	ldr	r2, [pc, #576]	@ (8001204 <HAL_GPIO_Init+0x2b0>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d85d      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000fc6:	2b12      	cmp	r3, #18
 8000fc8:	d82a      	bhi.n	8001020 <HAL_GPIO_Init+0xcc>
 8000fca:	2b12      	cmp	r3, #18
 8000fcc:	d859      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000fce:	a201      	add	r2, pc, #4	@ (adr r2, 8000fd4 <HAL_GPIO_Init+0x80>)
 8000fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd4:	0800104f 	.word	0x0800104f
 8000fd8:	08001029 	.word	0x08001029
 8000fdc:	0800103b 	.word	0x0800103b
 8000fe0:	0800107d 	.word	0x0800107d
 8000fe4:	08001083 	.word	0x08001083
 8000fe8:	08001083 	.word	0x08001083
 8000fec:	08001083 	.word	0x08001083
 8000ff0:	08001083 	.word	0x08001083
 8000ff4:	08001083 	.word	0x08001083
 8000ff8:	08001083 	.word	0x08001083
 8000ffc:	08001083 	.word	0x08001083
 8001000:	08001083 	.word	0x08001083
 8001004:	08001083 	.word	0x08001083
 8001008:	08001083 	.word	0x08001083
 800100c:	08001083 	.word	0x08001083
 8001010:	08001083 	.word	0x08001083
 8001014:	08001083 	.word	0x08001083
 8001018:	08001031 	.word	0x08001031
 800101c:	08001045 	.word	0x08001045
 8001020:	4a79      	ldr	r2, [pc, #484]	@ (8001208 <HAL_GPIO_Init+0x2b4>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d013      	beq.n	800104e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001026:	e02c      	b.n	8001082 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	623b      	str	r3, [r7, #32]
          break;
 800102e:	e029      	b.n	8001084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	3304      	adds	r3, #4
 8001036:	623b      	str	r3, [r7, #32]
          break;
 8001038:	e024      	b.n	8001084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	3308      	adds	r3, #8
 8001040:	623b      	str	r3, [r7, #32]
          break;
 8001042:	e01f      	b.n	8001084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	330c      	adds	r3, #12
 800104a:	623b      	str	r3, [r7, #32]
          break;
 800104c:	e01a      	b.n	8001084 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d102      	bne.n	800105c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001056:	2304      	movs	r3, #4
 8001058:	623b      	str	r3, [r7, #32]
          break;
 800105a:	e013      	b.n	8001084 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d105      	bne.n	8001070 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001064:	2308      	movs	r3, #8
 8001066:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69fa      	ldr	r2, [r7, #28]
 800106c:	611a      	str	r2, [r3, #16]
          break;
 800106e:	e009      	b.n	8001084 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001070:	2308      	movs	r3, #8
 8001072:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69fa      	ldr	r2, [r7, #28]
 8001078:	615a      	str	r2, [r3, #20]
          break;
 800107a:	e003      	b.n	8001084 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
          break;
 8001080:	e000      	b.n	8001084 <HAL_GPIO_Init+0x130>
          break;
 8001082:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	2bff      	cmp	r3, #255	@ 0xff
 8001088:	d801      	bhi.n	800108e <HAL_GPIO_Init+0x13a>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	e001      	b.n	8001092 <HAL_GPIO_Init+0x13e>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3304      	adds	r3, #4
 8001092:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	2bff      	cmp	r3, #255	@ 0xff
 8001098:	d802      	bhi.n	80010a0 <HAL_GPIO_Init+0x14c>
 800109a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	e002      	b.n	80010a6 <HAL_GPIO_Init+0x152>
 80010a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a2:	3b08      	subs	r3, #8
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	210f      	movs	r1, #15
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	fa01 f303 	lsl.w	r3, r1, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	401a      	ands	r2, r3
 80010b8:	6a39      	ldr	r1, [r7, #32]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	fa01 f303 	lsl.w	r3, r1, r3
 80010c0:	431a      	orrs	r2, r3
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 80b1 	beq.w	8001236 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010d4:	4b4d      	ldr	r3, [pc, #308]	@ (800120c <HAL_GPIO_Init+0x2b8>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a4c      	ldr	r2, [pc, #304]	@ (800120c <HAL_GPIO_Init+0x2b8>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b4a      	ldr	r3, [pc, #296]	@ (800120c <HAL_GPIO_Init+0x2b8>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010ec:	4a48      	ldr	r2, [pc, #288]	@ (8001210 <HAL_GPIO_Init+0x2bc>)
 80010ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f0:	089b      	lsrs	r3, r3, #2
 80010f2:	3302      	adds	r3, #2
 80010f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	220f      	movs	r2, #15
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	4013      	ands	r3, r2
 800110e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a40      	ldr	r2, [pc, #256]	@ (8001214 <HAL_GPIO_Init+0x2c0>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d013      	beq.n	8001140 <HAL_GPIO_Init+0x1ec>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a3f      	ldr	r2, [pc, #252]	@ (8001218 <HAL_GPIO_Init+0x2c4>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d00d      	beq.n	800113c <HAL_GPIO_Init+0x1e8>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a3e      	ldr	r2, [pc, #248]	@ (800121c <HAL_GPIO_Init+0x2c8>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d007      	beq.n	8001138 <HAL_GPIO_Init+0x1e4>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a3d      	ldr	r2, [pc, #244]	@ (8001220 <HAL_GPIO_Init+0x2cc>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d101      	bne.n	8001134 <HAL_GPIO_Init+0x1e0>
 8001130:	2303      	movs	r3, #3
 8001132:	e006      	b.n	8001142 <HAL_GPIO_Init+0x1ee>
 8001134:	2304      	movs	r3, #4
 8001136:	e004      	b.n	8001142 <HAL_GPIO_Init+0x1ee>
 8001138:	2302      	movs	r3, #2
 800113a:	e002      	b.n	8001142 <HAL_GPIO_Init+0x1ee>
 800113c:	2301      	movs	r3, #1
 800113e:	e000      	b.n	8001142 <HAL_GPIO_Init+0x1ee>
 8001140:	2300      	movs	r3, #0
 8001142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001144:	f002 0203 	and.w	r2, r2, #3
 8001148:	0092      	lsls	r2, r2, #2
 800114a:	4093      	lsls	r3, r2
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	4313      	orrs	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001152:	492f      	ldr	r1, [pc, #188]	@ (8001210 <HAL_GPIO_Init+0x2bc>)
 8001154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001156:	089b      	lsrs	r3, r3, #2
 8001158:	3302      	adds	r3, #2
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d006      	beq.n	800117a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800116c:	4b2d      	ldr	r3, [pc, #180]	@ (8001224 <HAL_GPIO_Init+0x2d0>)
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	492c      	ldr	r1, [pc, #176]	@ (8001224 <HAL_GPIO_Init+0x2d0>)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	608b      	str	r3, [r1, #8]
 8001178:	e006      	b.n	8001188 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800117a:	4b2a      	ldr	r3, [pc, #168]	@ (8001224 <HAL_GPIO_Init+0x2d0>)
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	43db      	mvns	r3, r3
 8001182:	4928      	ldr	r1, [pc, #160]	@ (8001224 <HAL_GPIO_Init+0x2d0>)
 8001184:	4013      	ands	r3, r2
 8001186:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d006      	beq.n	80011a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001194:	4b23      	ldr	r3, [pc, #140]	@ (8001224 <HAL_GPIO_Init+0x2d0>)
 8001196:	68da      	ldr	r2, [r3, #12]
 8001198:	4922      	ldr	r1, [pc, #136]	@ (8001224 <HAL_GPIO_Init+0x2d0>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	60cb      	str	r3, [r1, #12]
 80011a0:	e006      	b.n	80011b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011a2:	4b20      	ldr	r3, [pc, #128]	@ (8001224 <HAL_GPIO_Init+0x2d0>)
 80011a4:	68da      	ldr	r2, [r3, #12]
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	491e      	ldr	r1, [pc, #120]	@ (8001224 <HAL_GPIO_Init+0x2d0>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d006      	beq.n	80011ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011bc:	4b19      	ldr	r3, [pc, #100]	@ (8001224 <HAL_GPIO_Init+0x2d0>)
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	4918      	ldr	r1, [pc, #96]	@ (8001224 <HAL_GPIO_Init+0x2d0>)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	604b      	str	r3, [r1, #4]
 80011c8:	e006      	b.n	80011d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011ca:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <HAL_GPIO_Init+0x2d0>)
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	4914      	ldr	r1, [pc, #80]	@ (8001224 <HAL_GPIO_Init+0x2d0>)
 80011d4:	4013      	ands	r3, r2
 80011d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d021      	beq.n	8001228 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001224 <HAL_GPIO_Init+0x2d0>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	490e      	ldr	r1, [pc, #56]	@ (8001224 <HAL_GPIO_Init+0x2d0>)
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	600b      	str	r3, [r1, #0]
 80011f0:	e021      	b.n	8001236 <HAL_GPIO_Init+0x2e2>
 80011f2:	bf00      	nop
 80011f4:	10320000 	.word	0x10320000
 80011f8:	10310000 	.word	0x10310000
 80011fc:	10220000 	.word	0x10220000
 8001200:	10210000 	.word	0x10210000
 8001204:	10120000 	.word	0x10120000
 8001208:	10110000 	.word	0x10110000
 800120c:	40021000 	.word	0x40021000
 8001210:	40010000 	.word	0x40010000
 8001214:	40010800 	.word	0x40010800
 8001218:	40010c00 	.word	0x40010c00
 800121c:	40011000 	.word	0x40011000
 8001220:	40011400 	.word	0x40011400
 8001224:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001228:	4b0b      	ldr	r3, [pc, #44]	@ (8001258 <HAL_GPIO_Init+0x304>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	43db      	mvns	r3, r3
 8001230:	4909      	ldr	r1, [pc, #36]	@ (8001258 <HAL_GPIO_Init+0x304>)
 8001232:	4013      	ands	r3, r2
 8001234:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001238:	3301      	adds	r3, #1
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001242:	fa22 f303 	lsr.w	r3, r2, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	f47f ae8e 	bne.w	8000f68 <HAL_GPIO_Init+0x14>
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	372c      	adds	r7, #44	@ 0x2c
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	40010400 	.word	0x40010400

0800125c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
 8001268:	4613      	mov	r3, r2
 800126a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800126c:	787b      	ldrb	r3, [r7, #1]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001272:	887a      	ldrh	r2, [r7, #2]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001278:	e003      	b.n	8001282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	041a      	lsls	r2, r3, #16
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	611a      	str	r2, [r3, #16]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr

0800128c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800129e:	887a      	ldrh	r2, [r7, #2]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4013      	ands	r3, r2
 80012a4:	041a      	lsls	r2, r3, #16
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	43d9      	mvns	r1, r3
 80012aa:	887b      	ldrh	r3, [r7, #2]
 80012ac:	400b      	ands	r3, r1
 80012ae:	431a      	orrs	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	611a      	str	r2, [r3, #16]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr
	...

080012c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e272      	b.n	80017b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 8087 	beq.w	80013ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012e0:	4b92      	ldr	r3, [pc, #584]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 030c 	and.w	r3, r3, #12
 80012e8:	2b04      	cmp	r3, #4
 80012ea:	d00c      	beq.n	8001306 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012ec:	4b8f      	ldr	r3, [pc, #572]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 030c 	and.w	r3, r3, #12
 80012f4:	2b08      	cmp	r3, #8
 80012f6:	d112      	bne.n	800131e <HAL_RCC_OscConfig+0x5e>
 80012f8:	4b8c      	ldr	r3, [pc, #560]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001304:	d10b      	bne.n	800131e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001306:	4b89      	ldr	r3, [pc, #548]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d06c      	beq.n	80013ec <HAL_RCC_OscConfig+0x12c>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d168      	bne.n	80013ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e24c      	b.n	80017b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001326:	d106      	bne.n	8001336 <HAL_RCC_OscConfig+0x76>
 8001328:	4b80      	ldr	r3, [pc, #512]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a7f      	ldr	r2, [pc, #508]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 800132e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	e02e      	b.n	8001394 <HAL_RCC_OscConfig+0xd4>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10c      	bne.n	8001358 <HAL_RCC_OscConfig+0x98>
 800133e:	4b7b      	ldr	r3, [pc, #492]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a7a      	ldr	r2, [pc, #488]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 8001344:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	4b78      	ldr	r3, [pc, #480]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a77      	ldr	r2, [pc, #476]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 8001350:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	e01d      	b.n	8001394 <HAL_RCC_OscConfig+0xd4>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001360:	d10c      	bne.n	800137c <HAL_RCC_OscConfig+0xbc>
 8001362:	4b72      	ldr	r3, [pc, #456]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a71      	ldr	r2, [pc, #452]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 8001368:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	4b6f      	ldr	r3, [pc, #444]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a6e      	ldr	r2, [pc, #440]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 8001374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	e00b      	b.n	8001394 <HAL_RCC_OscConfig+0xd4>
 800137c:	4b6b      	ldr	r3, [pc, #428]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a6a      	ldr	r2, [pc, #424]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 8001382:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	4b68      	ldr	r3, [pc, #416]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a67      	ldr	r2, [pc, #412]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 800138e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001392:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d013      	beq.n	80013c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139c:	f7ff fab0 	bl	8000900 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a4:	f7ff faac 	bl	8000900 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b64      	cmp	r3, #100	@ 0x64
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e200      	b.n	80017b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b6:	4b5d      	ldr	r3, [pc, #372]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0f0      	beq.n	80013a4 <HAL_RCC_OscConfig+0xe4>
 80013c2:	e014      	b.n	80013ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c4:	f7ff fa9c 	bl	8000900 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013cc:	f7ff fa98 	bl	8000900 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b64      	cmp	r3, #100	@ 0x64
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e1ec      	b.n	80017b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013de:	4b53      	ldr	r3, [pc, #332]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f0      	bne.n	80013cc <HAL_RCC_OscConfig+0x10c>
 80013ea:	e000      	b.n	80013ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d063      	beq.n	80014c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013fa:	4b4c      	ldr	r3, [pc, #304]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 030c 	and.w	r3, r3, #12
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00b      	beq.n	800141e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001406:	4b49      	ldr	r3, [pc, #292]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 030c 	and.w	r3, r3, #12
 800140e:	2b08      	cmp	r3, #8
 8001410:	d11c      	bne.n	800144c <HAL_RCC_OscConfig+0x18c>
 8001412:	4b46      	ldr	r3, [pc, #280]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d116      	bne.n	800144c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141e:	4b43      	ldr	r3, [pc, #268]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d005      	beq.n	8001436 <HAL_RCC_OscConfig+0x176>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d001      	beq.n	8001436 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e1c0      	b.n	80017b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001436:	4b3d      	ldr	r3, [pc, #244]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	4939      	ldr	r1, [pc, #228]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 8001446:	4313      	orrs	r3, r2
 8001448:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800144a:	e03a      	b.n	80014c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d020      	beq.n	8001496 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001454:	4b36      	ldr	r3, [pc, #216]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 8001456:	2201      	movs	r2, #1
 8001458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145a:	f7ff fa51 	bl	8000900 <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001462:	f7ff fa4d 	bl	8000900 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e1a1      	b.n	80017b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001474:	4b2d      	ldr	r3, [pc, #180]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0f0      	beq.n	8001462 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001480:	4b2a      	ldr	r3, [pc, #168]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	4927      	ldr	r1, [pc, #156]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 8001490:	4313      	orrs	r3, r2
 8001492:	600b      	str	r3, [r1, #0]
 8001494:	e015      	b.n	80014c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001496:	4b26      	ldr	r3, [pc, #152]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149c:	f7ff fa30 	bl	8000900 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a4:	f7ff fa2c 	bl	8000900 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e180      	b.n	80017b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b6:	4b1d      	ldr	r3, [pc, #116]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d03a      	beq.n	8001544 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d019      	beq.n	800150a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014d6:	4b17      	ldr	r3, [pc, #92]	@ (8001534 <HAL_RCC_OscConfig+0x274>)
 80014d8:	2201      	movs	r2, #1
 80014da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014dc:	f7ff fa10 	bl	8000900 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e4:	f7ff fa0c 	bl	8000900 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e160      	b.n	80017b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f6:	4b0d      	ldr	r3, [pc, #52]	@ (800152c <HAL_RCC_OscConfig+0x26c>)
 80014f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f0      	beq.n	80014e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001502:	2001      	movs	r0, #1
 8001504:	f000 face 	bl	8001aa4 <RCC_Delay>
 8001508:	e01c      	b.n	8001544 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800150a:	4b0a      	ldr	r3, [pc, #40]	@ (8001534 <HAL_RCC_OscConfig+0x274>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001510:	f7ff f9f6 	bl	8000900 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001516:	e00f      	b.n	8001538 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001518:	f7ff f9f2 	bl	8000900 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d908      	bls.n	8001538 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e146      	b.n	80017b8 <HAL_RCC_OscConfig+0x4f8>
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000
 8001530:	42420000 	.word	0x42420000
 8001534:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001538:	4b92      	ldr	r3, [pc, #584]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 800153a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1e9      	bne.n	8001518 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80a6 	beq.w	800169e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001556:	4b8b      	ldr	r3, [pc, #556]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d10d      	bne.n	800157e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001562:	4b88      	ldr	r3, [pc, #544]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	4a87      	ldr	r2, [pc, #540]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 8001568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800156c:	61d3      	str	r3, [r2, #28]
 800156e:	4b85      	ldr	r3, [pc, #532]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800157a:	2301      	movs	r3, #1
 800157c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157e:	4b82      	ldr	r3, [pc, #520]	@ (8001788 <HAL_RCC_OscConfig+0x4c8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001586:	2b00      	cmp	r3, #0
 8001588:	d118      	bne.n	80015bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800158a:	4b7f      	ldr	r3, [pc, #508]	@ (8001788 <HAL_RCC_OscConfig+0x4c8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a7e      	ldr	r2, [pc, #504]	@ (8001788 <HAL_RCC_OscConfig+0x4c8>)
 8001590:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001596:	f7ff f9b3 	bl	8000900 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800159e:	f7ff f9af 	bl	8000900 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b64      	cmp	r3, #100	@ 0x64
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e103      	b.n	80017b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b0:	4b75      	ldr	r3, [pc, #468]	@ (8001788 <HAL_RCC_OscConfig+0x4c8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d106      	bne.n	80015d2 <HAL_RCC_OscConfig+0x312>
 80015c4:	4b6f      	ldr	r3, [pc, #444]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	4a6e      	ldr	r2, [pc, #440]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6213      	str	r3, [r2, #32]
 80015d0:	e02d      	b.n	800162e <HAL_RCC_OscConfig+0x36e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10c      	bne.n	80015f4 <HAL_RCC_OscConfig+0x334>
 80015da:	4b6a      	ldr	r3, [pc, #424]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	4a69      	ldr	r2, [pc, #420]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 80015e0:	f023 0301 	bic.w	r3, r3, #1
 80015e4:	6213      	str	r3, [r2, #32]
 80015e6:	4b67      	ldr	r3, [pc, #412]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	4a66      	ldr	r2, [pc, #408]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 80015ec:	f023 0304 	bic.w	r3, r3, #4
 80015f0:	6213      	str	r3, [r2, #32]
 80015f2:	e01c      	b.n	800162e <HAL_RCC_OscConfig+0x36e>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	2b05      	cmp	r3, #5
 80015fa:	d10c      	bne.n	8001616 <HAL_RCC_OscConfig+0x356>
 80015fc:	4b61      	ldr	r3, [pc, #388]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	4a60      	ldr	r2, [pc, #384]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 8001602:	f043 0304 	orr.w	r3, r3, #4
 8001606:	6213      	str	r3, [r2, #32]
 8001608:	4b5e      	ldr	r3, [pc, #376]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	4a5d      	ldr	r2, [pc, #372]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	6213      	str	r3, [r2, #32]
 8001614:	e00b      	b.n	800162e <HAL_RCC_OscConfig+0x36e>
 8001616:	4b5b      	ldr	r3, [pc, #364]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	4a5a      	ldr	r2, [pc, #360]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 800161c:	f023 0301 	bic.w	r3, r3, #1
 8001620:	6213      	str	r3, [r2, #32]
 8001622:	4b58      	ldr	r3, [pc, #352]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	4a57      	ldr	r2, [pc, #348]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 8001628:	f023 0304 	bic.w	r3, r3, #4
 800162c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d015      	beq.n	8001662 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001636:	f7ff f963 	bl	8000900 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800163c:	e00a      	b.n	8001654 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800163e:	f7ff f95f 	bl	8000900 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	f241 3288 	movw	r2, #5000	@ 0x1388
 800164c:	4293      	cmp	r3, r2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e0b1      	b.n	80017b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001654:	4b4b      	ldr	r3, [pc, #300]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0ee      	beq.n	800163e <HAL_RCC_OscConfig+0x37e>
 8001660:	e014      	b.n	800168c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001662:	f7ff f94d 	bl	8000900 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001668:	e00a      	b.n	8001680 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800166a:	f7ff f949 	bl	8000900 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001678:	4293      	cmp	r3, r2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e09b      	b.n	80017b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001680:	4b40      	ldr	r3, [pc, #256]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1ee      	bne.n	800166a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800168c:	7dfb      	ldrb	r3, [r7, #23]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d105      	bne.n	800169e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001692:	4b3c      	ldr	r3, [pc, #240]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	4a3b      	ldr	r2, [pc, #236]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 8001698:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800169c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 8087 	beq.w	80017b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016a8:	4b36      	ldr	r3, [pc, #216]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 030c 	and.w	r3, r3, #12
 80016b0:	2b08      	cmp	r3, #8
 80016b2:	d061      	beq.n	8001778 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69db      	ldr	r3, [r3, #28]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d146      	bne.n	800174a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016bc:	4b33      	ldr	r3, [pc, #204]	@ (800178c <HAL_RCC_OscConfig+0x4cc>)
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c2:	f7ff f91d 	bl	8000900 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ca:	f7ff f919 	bl	8000900 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e06d      	b.n	80017b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016dc:	4b29      	ldr	r3, [pc, #164]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1f0      	bne.n	80016ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016f0:	d108      	bne.n	8001704 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016f2:	4b24      	ldr	r3, [pc, #144]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	4921      	ldr	r1, [pc, #132]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 8001700:	4313      	orrs	r3, r2
 8001702:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001704:	4b1f      	ldr	r3, [pc, #124]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a19      	ldr	r1, [r3, #32]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001714:	430b      	orrs	r3, r1
 8001716:	491b      	ldr	r1, [pc, #108]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 8001718:	4313      	orrs	r3, r2
 800171a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800171c:	4b1b      	ldr	r3, [pc, #108]	@ (800178c <HAL_RCC_OscConfig+0x4cc>)
 800171e:	2201      	movs	r2, #1
 8001720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001722:	f7ff f8ed 	bl	8000900 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172a:	f7ff f8e9 	bl	8000900 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e03d      	b.n	80017b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800173c:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0x46a>
 8001748:	e035      	b.n	80017b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174a:	4b10      	ldr	r3, [pc, #64]	@ (800178c <HAL_RCC_OscConfig+0x4cc>)
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff f8d6 	bl	8000900 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001758:	f7ff f8d2 	bl	8000900 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e026      	b.n	80017b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800176a:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <HAL_RCC_OscConfig+0x4c4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x498>
 8001776:	e01e      	b.n	80017b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d107      	bne.n	8001790 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e019      	b.n	80017b8 <HAL_RCC_OscConfig+0x4f8>
 8001784:	40021000 	.word	0x40021000
 8001788:	40007000 	.word	0x40007000
 800178c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001790:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <HAL_RCC_OscConfig+0x500>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d106      	bne.n	80017b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d001      	beq.n	80017b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40021000 	.word	0x40021000

080017c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e0d0      	b.n	800197a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017d8:	4b6a      	ldr	r3, [pc, #424]	@ (8001984 <HAL_RCC_ClockConfig+0x1c0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d910      	bls.n	8001808 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e6:	4b67      	ldr	r3, [pc, #412]	@ (8001984 <HAL_RCC_ClockConfig+0x1c0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f023 0207 	bic.w	r2, r3, #7
 80017ee:	4965      	ldr	r1, [pc, #404]	@ (8001984 <HAL_RCC_ClockConfig+0x1c0>)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f6:	4b63      	ldr	r3, [pc, #396]	@ (8001984 <HAL_RCC_ClockConfig+0x1c0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d001      	beq.n	8001808 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e0b8      	b.n	800197a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d020      	beq.n	8001856 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b00      	cmp	r3, #0
 800181e:	d005      	beq.n	800182c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001820:	4b59      	ldr	r3, [pc, #356]	@ (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	4a58      	ldr	r2, [pc, #352]	@ (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 8001826:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800182a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	2b00      	cmp	r3, #0
 8001836:	d005      	beq.n	8001844 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001838:	4b53      	ldr	r3, [pc, #332]	@ (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	4a52      	ldr	r2, [pc, #328]	@ (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 800183e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001842:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001844:	4b50      	ldr	r3, [pc, #320]	@ (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	494d      	ldr	r1, [pc, #308]	@ (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 8001852:	4313      	orrs	r3, r2
 8001854:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d040      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d107      	bne.n	800187a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186a:	4b47      	ldr	r3, [pc, #284]	@ (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d115      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e07f      	b.n	800197a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b02      	cmp	r3, #2
 8001880:	d107      	bne.n	8001892 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001882:	4b41      	ldr	r3, [pc, #260]	@ (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d109      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e073      	b.n	800197a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001892:	4b3d      	ldr	r3, [pc, #244]	@ (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e06b      	b.n	800197a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018a2:	4b39      	ldr	r3, [pc, #228]	@ (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f023 0203 	bic.w	r2, r3, #3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	4936      	ldr	r1, [pc, #216]	@ (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018b4:	f7ff f824 	bl	8000900 <HAL_GetTick>
 80018b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ba:	e00a      	b.n	80018d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018bc:	f7ff f820 	bl	8000900 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e053      	b.n	800197a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 020c 	and.w	r2, r3, #12
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d1eb      	bne.n	80018bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018e4:	4b27      	ldr	r3, [pc, #156]	@ (8001984 <HAL_RCC_ClockConfig+0x1c0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d210      	bcs.n	8001914 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f2:	4b24      	ldr	r3, [pc, #144]	@ (8001984 <HAL_RCC_ClockConfig+0x1c0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 0207 	bic.w	r2, r3, #7
 80018fa:	4922      	ldr	r1, [pc, #136]	@ (8001984 <HAL_RCC_ClockConfig+0x1c0>)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	4313      	orrs	r3, r2
 8001900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001902:	4b20      	ldr	r3, [pc, #128]	@ (8001984 <HAL_RCC_ClockConfig+0x1c0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	429a      	cmp	r2, r3
 800190e:	d001      	beq.n	8001914 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e032      	b.n	800197a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	d008      	beq.n	8001932 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001920:	4b19      	ldr	r3, [pc, #100]	@ (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	4916      	ldr	r1, [pc, #88]	@ (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 800192e:	4313      	orrs	r3, r2
 8001930:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	2b00      	cmp	r3, #0
 800193c:	d009      	beq.n	8001952 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800193e:	4b12      	ldr	r3, [pc, #72]	@ (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	490e      	ldr	r1, [pc, #56]	@ (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 800194e:	4313      	orrs	r3, r2
 8001950:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001952:	f000 f821 	bl	8001998 <HAL_RCC_GetSysClockFreq>
 8001956:	4602      	mov	r2, r0
 8001958:	4b0b      	ldr	r3, [pc, #44]	@ (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	091b      	lsrs	r3, r3, #4
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	490a      	ldr	r1, [pc, #40]	@ (800198c <HAL_RCC_ClockConfig+0x1c8>)
 8001964:	5ccb      	ldrb	r3, [r1, r3]
 8001966:	fa22 f303 	lsr.w	r3, r2, r3
 800196a:	4a09      	ldr	r2, [pc, #36]	@ (8001990 <HAL_RCC_ClockConfig+0x1cc>)
 800196c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800196e:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <HAL_RCC_ClockConfig+0x1d0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe ff82 	bl	800087c <HAL_InitTick>

  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40022000 	.word	0x40022000
 8001988:	40021000 	.word	0x40021000
 800198c:	08002564 	.word	0x08002564
 8001990:	20000000 	.word	0x20000000
 8001994:	20000004 	.word	0x20000004

08001998 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001998:	b480      	push	{r7}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	2300      	movs	r3, #0
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	2300      	movs	r3, #0
 80019ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019b2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x94>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 030c 	and.w	r3, r3, #12
 80019be:	2b04      	cmp	r3, #4
 80019c0:	d002      	beq.n	80019c8 <HAL_RCC_GetSysClockFreq+0x30>
 80019c2:	2b08      	cmp	r3, #8
 80019c4:	d003      	beq.n	80019ce <HAL_RCC_GetSysClockFreq+0x36>
 80019c6:	e027      	b.n	8001a18 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019c8:	4b19      	ldr	r3, [pc, #100]	@ (8001a30 <HAL_RCC_GetSysClockFreq+0x98>)
 80019ca:	613b      	str	r3, [r7, #16]
      break;
 80019cc:	e027      	b.n	8001a1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	0c9b      	lsrs	r3, r3, #18
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	4a17      	ldr	r2, [pc, #92]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019d8:	5cd3      	ldrb	r3, [r2, r3]
 80019da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d010      	beq.n	8001a08 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019e6:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x94>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	0c5b      	lsrs	r3, r3, #17
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	4a11      	ldr	r2, [pc, #68]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019f2:	5cd3      	ldrb	r3, [r2, r3]
 80019f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a30 <HAL_RCC_GetSysClockFreq+0x98>)
 80019fa:	fb03 f202 	mul.w	r2, r3, r2
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	e004      	b.n	8001a12 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a0c      	ldr	r2, [pc, #48]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a0c:	fb02 f303 	mul.w	r3, r2, r3
 8001a10:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	613b      	str	r3, [r7, #16]
      break;
 8001a16:	e002      	b.n	8001a1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a18:	4b05      	ldr	r3, [pc, #20]	@ (8001a30 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a1a:	613b      	str	r3, [r7, #16]
      break;
 8001a1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a1e:	693b      	ldr	r3, [r7, #16]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	371c      	adds	r7, #28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	007a1200 	.word	0x007a1200
 8001a34:	0800257c 	.word	0x0800257c
 8001a38:	0800258c 	.word	0x0800258c
 8001a3c:	003d0900 	.word	0x003d0900

08001a40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a44:	4b02      	ldr	r3, [pc, #8]	@ (8001a50 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	20000000 	.word	0x20000000

08001a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a58:	f7ff fff2 	bl	8001a40 <HAL_RCC_GetHCLKFreq>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	0a1b      	lsrs	r3, r3, #8
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	4903      	ldr	r1, [pc, #12]	@ (8001a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a6a:	5ccb      	ldrb	r3, [r1, r3]
 8001a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40021000 	.word	0x40021000
 8001a78:	08002574 	.word	0x08002574

08001a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a80:	f7ff ffde 	bl	8001a40 <HAL_RCC_GetHCLKFreq>
 8001a84:	4602      	mov	r2, r0
 8001a86:	4b05      	ldr	r3, [pc, #20]	@ (8001a9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	0adb      	lsrs	r3, r3, #11
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	4903      	ldr	r1, [pc, #12]	@ (8001aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a92:	5ccb      	ldrb	r3, [r1, r3]
 8001a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	08002574 	.word	0x08002574

08001aa4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001aac:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad8 <RCC_Delay+0x34>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8001adc <RCC_Delay+0x38>)
 8001ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab6:	0a5b      	lsrs	r3, r3, #9
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	fb02 f303 	mul.w	r3, r2, r3
 8001abe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ac0:	bf00      	nop
  }
  while (Delay --);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	1e5a      	subs	r2, r3, #1
 8001ac6:	60fa      	str	r2, [r7, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1f9      	bne.n	8001ac0 <RCC_Delay+0x1c>
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	10624dd3 	.word	0x10624dd3

08001ae0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e042      	b.n	8001b78 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d106      	bne.n	8001b0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7fe fd22 	bl	8000550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2224      	movs	r2, #36	@ 0x24
 8001b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 fc49 	bl	80023bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	691a      	ldr	r2, [r3, #16]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001b38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	695a      	ldr	r2, [r3, #20]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001b48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2220      	movs	r2, #32
 8001b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	@ 0x28
 8001b84:	af02      	add	r7, sp, #8
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	603b      	str	r3, [r7, #0]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b20      	cmp	r3, #32
 8001b9e:	d175      	bne.n	8001c8c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <HAL_UART_Transmit+0x2c>
 8001ba6:	88fb      	ldrh	r3, [r7, #6]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e06e      	b.n	8001c8e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2221      	movs	r2, #33	@ 0x21
 8001bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bbe:	f7fe fe9f 	bl	8000900 <HAL_GetTick>
 8001bc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	88fa      	ldrh	r2, [r7, #6]
 8001bc8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	88fa      	ldrh	r2, [r7, #6]
 8001bce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bd8:	d108      	bne.n	8001bec <HAL_UART_Transmit+0x6c>
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d104      	bne.n	8001bec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	e003      	b.n	8001bf4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001bf4:	e02e      	b.n	8001c54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2180      	movs	r1, #128	@ 0x80
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f000 fa5d 	bl	80020c0 <UART_WaitOnFlagUntilTimeout>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2220      	movs	r2, #32
 8001c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e03a      	b.n	8001c8e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10b      	bne.n	8001c36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	3302      	adds	r3, #2
 8001c32:	61bb      	str	r3, [r7, #24]
 8001c34:	e007      	b.n	8001c46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	781a      	ldrb	r2, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	3301      	adds	r3, #1
 8001c44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1cb      	bne.n	8001bf6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2200      	movs	r2, #0
 8001c66:	2140      	movs	r1, #64	@ 0x40
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f000 fa29 	bl	80020c0 <UART_WaitOnFlagUntilTimeout>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2220      	movs	r2, #32
 8001c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e006      	b.n	8001c8e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2220      	movs	r2, #32
 8001c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	e000      	b.n	8001c8e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001c8c:	2302      	movs	r3, #2
  }
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3720      	adds	r7, #32
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08c      	sub	sp, #48	@ 0x30
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b20      	cmp	r3, #32
 8001cb0:	d156      	bne.n	8001d60 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d002      	beq.n	8001cbe <HAL_UART_Transmit_DMA+0x26>
 8001cb8:	88fb      	ldrh	r3, [r7, #6]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e04f      	b.n	8001d62 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	88fa      	ldrh	r2, [r7, #6]
 8001ccc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	88fa      	ldrh	r2, [r7, #6]
 8001cd2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2221      	movs	r2, #33	@ 0x21
 8001cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ce6:	4a21      	ldr	r2, [pc, #132]	@ (8001d6c <HAL_UART_Transmit_DMA+0xd4>)
 8001ce8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cee:	4a20      	ldr	r2, [pc, #128]	@ (8001d70 <HAL_UART_Transmit_DMA+0xd8>)
 8001cf0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cf6:	4a1f      	ldr	r2, [pc, #124]	@ (8001d74 <HAL_UART_Transmit_DMA+0xdc>)
 8001cf8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cfe:	2200      	movs	r2, #0
 8001d00:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8001d02:	f107 0308 	add.w	r3, r7, #8
 8001d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d0e:	6819      	ldr	r1, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	3304      	adds	r3, #4
 8001d16:	461a      	mov	r2, r3
 8001d18:	88fb      	ldrh	r3, [r7, #6]
 8001d1a:	f7fe ff87 	bl	8000c2c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d26:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	3314      	adds	r3, #20
 8001d2e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	e853 3f00 	ldrex	r3, [r3]
 8001d36:	617b      	str	r3, [r7, #20]
   return(result);
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	3314      	adds	r3, #20
 8001d46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d48:	627a      	str	r2, [r7, #36]	@ 0x24
 8001d4a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d4c:	6a39      	ldr	r1, [r7, #32]
 8001d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d50:	e841 2300 	strex	r3, r2, [r1]
 8001d54:	61fb      	str	r3, [r7, #28]
   return(result);
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1e5      	bne.n	8001d28 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	e000      	b.n	8001d62 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8001d60:	2302      	movs	r3, #2
  }
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3730      	adds	r7, #48	@ 0x30
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	08001e0f 	.word	0x08001e0f
 8001d70:	08001ea9 	.word	0x08001ea9
 8001d74:	0800202d 	.word	0x0800202d

08001d78 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	4613      	mov	r3, r2
 8001d84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b20      	cmp	r3, #32
 8001d90:	d112      	bne.n	8001db8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <HAL_UART_Receive_DMA+0x26>
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e00b      	b.n	8001dba <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8001da8:	88fb      	ldrh	r3, [r7, #6]
 8001daa:	461a      	mov	r2, r3
 8001dac:	68b9      	ldr	r1, [r7, #8]
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f000 f9e0 	bl	8002174 <UART_Start_Receive_DMA>
 8001db4:	4603      	mov	r3, r0
 8001db6:	e000      	b.n	8001dba <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001db8:	2302      	movs	r3, #2
  }
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr

08001de6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr

08001e0e <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b090      	sub	sp, #64	@ 0x40
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0320 	and.w	r3, r3, #32
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d137      	bne.n	8001e9a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8001e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	3314      	adds	r3, #20
 8001e36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3a:	e853 3f00 	ldrex	r3, [r3]
 8001e3e:	623b      	str	r3, [r7, #32]
   return(result);
 8001e40:	6a3b      	ldr	r3, [r7, #32]
 8001e42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	3314      	adds	r3, #20
 8001e4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001e50:	633a      	str	r2, [r7, #48]	@ 0x30
 8001e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001e56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e58:	e841 2300 	strex	r3, r2, [r1]
 8001e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1e5      	bne.n	8001e30 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	330c      	adds	r3, #12
 8001e6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	e853 3f00 	ldrex	r3, [r3]
 8001e72:	60fb      	str	r3, [r7, #12]
   return(result);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	330c      	adds	r3, #12
 8001e82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e84:	61fa      	str	r2, [r7, #28]
 8001e86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e88:	69b9      	ldr	r1, [r7, #24]
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	e841 2300 	strex	r3, r2, [r1]
 8001e90:	617b      	str	r3, [r7, #20]
   return(result);
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1e5      	bne.n	8001e64 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001e98:	e002      	b.n	8001ea0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8001e9a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001e9c:	f7fe fafc 	bl	8000498 <HAL_UART_TxCpltCallback>
}
 8001ea0:	bf00      	nop
 8001ea2:	3740      	adds	r7, #64	@ 0x40
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f7ff ff83 	bl	8001dc2 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001ebc:	bf00      	nop
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b09c      	sub	sp, #112	@ 0x70
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0320 	and.w	r3, r3, #32
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d172      	bne.n	8001fc6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8001ee0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001ee6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	330c      	adds	r3, #12
 8001eec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ef0:	e853 3f00 	ldrex	r3, [r3]
 8001ef4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001ef6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001efc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001efe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	330c      	adds	r3, #12
 8001f04:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001f06:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001f08:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001f0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001f0e:	e841 2300 	strex	r3, r2, [r1]
 8001f12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001f14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1e5      	bne.n	8001ee6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	3314      	adds	r3, #20
 8001f20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f24:	e853 3f00 	ldrex	r3, [r3]
 8001f28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f2c:	f023 0301 	bic.w	r3, r3, #1
 8001f30:	667b      	str	r3, [r7, #100]	@ 0x64
 8001f32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	3314      	adds	r3, #20
 8001f38:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001f3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8001f3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001f40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001f42:	e841 2300 	strex	r3, r2, [r1]
 8001f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1e5      	bne.n	8001f1a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	3314      	adds	r3, #20
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f58:	e853 3f00 	ldrex	r3, [r3]
 8001f5c:	623b      	str	r3, [r7, #32]
   return(result);
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001f64:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	3314      	adds	r3, #20
 8001f6c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001f6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8001f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001f74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f76:	e841 2300 	strex	r3, r2, [r1]
 8001f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1e5      	bne.n	8001f4e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001f82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f84:	2220      	movs	r2, #32
 8001f86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d119      	bne.n	8001fc6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	330c      	adds	r3, #12
 8001f98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	e853 3f00 	ldrex	r3, [r3]
 8001fa0:	60fb      	str	r3, [r7, #12]
   return(result);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f023 0310 	bic.w	r3, r3, #16
 8001fa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001faa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	330c      	adds	r3, #12
 8001fb0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001fb2:	61fa      	str	r2, [r7, #28]
 8001fb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fb6:	69b9      	ldr	r1, [r7, #24]
 8001fb8:	69fa      	ldr	r2, [r7, #28]
 8001fba:	e841 2300 	strex	r3, r2, [r1]
 8001fbe:	617b      	str	r3, [r7, #20]
   return(result);
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1e5      	bne.n	8001f92 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fc8:	2200      	movs	r2, #0
 8001fca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d106      	bne.n	8001fe2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001fd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fd6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001fd8:	4619      	mov	r1, r3
 8001fda:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001fdc:	f7ff ff0c 	bl	8001df8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001fe0:	e002      	b.n	8001fe8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8001fe2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001fe4:	f7fe fa10 	bl	8000408 <HAL_UART_RxCpltCallback>
}
 8001fe8:	bf00      	nop
 8001fea:	3770      	adds	r7, #112	@ 0x70
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2201      	movs	r2, #1
 8002002:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002008:	2b01      	cmp	r3, #1
 800200a:	d108      	bne.n	800201e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002010:	085b      	lsrs	r3, r3, #1
 8002012:	b29b      	uxth	r3, r3
 8002014:	4619      	mov	r1, r3
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f7ff feee 	bl	8001df8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800201c:	e002      	b.n	8002024 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f7ff fed8 	bl	8001dd4 <HAL_UART_RxHalfCpltCallback>
}
 8002024:	bf00      	nop
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002048:	2b00      	cmp	r3, #0
 800204a:	bf14      	ite	ne
 800204c:	2301      	movne	r3, #1
 800204e:	2300      	moveq	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b21      	cmp	r3, #33	@ 0x21
 800205e:	d108      	bne.n	8002072 <UART_DMAError+0x46>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d005      	beq.n	8002072 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	2200      	movs	r2, #0
 800206a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800206c:	68b8      	ldr	r0, [r7, #8]
 800206e:	f000 f91b 	bl	80022a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800207c:	2b00      	cmp	r3, #0
 800207e:	bf14      	ite	ne
 8002080:	2301      	movne	r3, #1
 8002082:	2300      	moveq	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b22      	cmp	r3, #34	@ 0x22
 8002092:	d108      	bne.n	80020a6 <UART_DMAError+0x7a>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d005      	beq.n	80020a6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	2200      	movs	r2, #0
 800209e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80020a0:	68b8      	ldr	r0, [r7, #8]
 80020a2:	f000 f928 	bl	80022f6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020aa:	f043 0210 	orr.w	r2, r3, #16
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80020b2:	68b8      	ldr	r0, [r7, #8]
 80020b4:	f7ff fe97 	bl	8001de6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80020b8:	bf00      	nop
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020d0:	e03b      	b.n	800214a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d8:	d037      	beq.n	800214a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020da:	f7fe fc11 	bl	8000900 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	6a3a      	ldr	r2, [r7, #32]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d302      	bcc.n	80020f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80020ea:	6a3b      	ldr	r3, [r7, #32]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e03a      	b.n	800216a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f003 0304 	and.w	r3, r3, #4
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d023      	beq.n	800214a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2b80      	cmp	r3, #128	@ 0x80
 8002106:	d020      	beq.n	800214a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2b40      	cmp	r3, #64	@ 0x40
 800210c:	d01d      	beq.n	800214a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b08      	cmp	r3, #8
 800211a:	d116      	bne.n	800214a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 f8df 	bl	80022f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2208      	movs	r2, #8
 800213c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e00f      	b.n	800216a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	4013      	ands	r3, r2
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	429a      	cmp	r2, r3
 8002158:	bf0c      	ite	eq
 800215a:	2301      	moveq	r3, #1
 800215c:	2300      	movne	r3, #0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	461a      	mov	r2, r3
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	429a      	cmp	r2, r3
 8002166:	d0b4      	beq.n	80020d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b098      	sub	sp, #96	@ 0x60
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	4613      	mov	r3, r2
 8002180:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	88fa      	ldrh	r2, [r7, #6]
 800218c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2222      	movs	r2, #34	@ 0x22
 8002198:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a0:	4a3e      	ldr	r2, [pc, #248]	@ (800229c <UART_Start_Receive_DMA+0x128>)
 80021a2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a8:	4a3d      	ldr	r2, [pc, #244]	@ (80022a0 <UART_Start_Receive_DMA+0x12c>)
 80021aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b0:	4a3c      	ldr	r2, [pc, #240]	@ (80022a4 <UART_Start_Receive_DMA+0x130>)
 80021b2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b8:	2200      	movs	r2, #0
 80021ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80021bc:	f107 0308 	add.w	r3, r7, #8
 80021c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	3304      	adds	r3, #4
 80021cc:	4619      	mov	r1, r3
 80021ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	f7fe fd2a 	bl	8000c2c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80021d8:	2300      	movs	r3, #0
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d019      	beq.n	800222a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	330c      	adds	r3, #12
 80021fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002200:	e853 3f00 	ldrex	r3, [r3]
 8002204:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800220c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	330c      	adds	r3, #12
 8002214:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002216:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002218:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800221a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800221c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800221e:	e841 2300 	strex	r3, r2, [r1]
 8002222:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8002224:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1e5      	bne.n	80021f6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	3314      	adds	r3, #20
 8002230:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002234:	e853 3f00 	ldrex	r3, [r3]
 8002238:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800223a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	657b      	str	r3, [r7, #84]	@ 0x54
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	3314      	adds	r3, #20
 8002248:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800224a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800224c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800224e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002250:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002252:	e841 2300 	strex	r3, r2, [r1]
 8002256:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1e5      	bne.n	800222a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	3314      	adds	r3, #20
 8002264:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	e853 3f00 	ldrex	r3, [r3]
 800226c:	617b      	str	r3, [r7, #20]
   return(result);
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002274:	653b      	str	r3, [r7, #80]	@ 0x50
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	3314      	adds	r3, #20
 800227c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800227e:	627a      	str	r2, [r7, #36]	@ 0x24
 8002280:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002282:	6a39      	ldr	r1, [r7, #32]
 8002284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002286:	e841 2300 	strex	r3, r2, [r1]
 800228a:	61fb      	str	r3, [r7, #28]
   return(result);
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1e5      	bne.n	800225e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3760      	adds	r7, #96	@ 0x60
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	08001ec5 	.word	0x08001ec5
 80022a0:	08001ff1 	.word	0x08001ff1
 80022a4:	0800202d 	.word	0x0800202d

080022a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b089      	sub	sp, #36	@ 0x24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	330c      	adds	r3, #12
 80022b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	e853 3f00 	ldrex	r3, [r3]
 80022be:	60bb      	str	r3, [r7, #8]
   return(result);
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80022c6:	61fb      	str	r3, [r7, #28]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	330c      	adds	r3, #12
 80022ce:	69fa      	ldr	r2, [r7, #28]
 80022d0:	61ba      	str	r2, [r7, #24]
 80022d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022d4:	6979      	ldr	r1, [r7, #20]
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	e841 2300 	strex	r3, r2, [r1]
 80022dc:	613b      	str	r3, [r7, #16]
   return(result);
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1e5      	bne.n	80022b0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80022ec:	bf00      	nop
 80022ee:	3724      	adds	r7, #36	@ 0x24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr

080022f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b095      	sub	sp, #84	@ 0x54
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	330c      	adds	r3, #12
 8002304:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002308:	e853 3f00 	ldrex	r3, [r3]
 800230c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800230e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002310:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002314:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	330c      	adds	r3, #12
 800231c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800231e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002320:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002322:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002324:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002326:	e841 2300 	strex	r3, r2, [r1]
 800232a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800232c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1e5      	bne.n	80022fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	3314      	adds	r3, #20
 8002338:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	e853 3f00 	ldrex	r3, [r3]
 8002340:	61fb      	str	r3, [r7, #28]
   return(result);
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	f023 0301 	bic.w	r3, r3, #1
 8002348:	64bb      	str	r3, [r7, #72]	@ 0x48
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	3314      	adds	r3, #20
 8002350:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002352:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002354:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002356:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002358:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800235a:	e841 2300 	strex	r3, r2, [r1]
 800235e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1e5      	bne.n	8002332 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236a:	2b01      	cmp	r3, #1
 800236c:	d119      	bne.n	80023a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	330c      	adds	r3, #12
 8002374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	e853 3f00 	ldrex	r3, [r3]
 800237c:	60bb      	str	r3, [r7, #8]
   return(result);
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	f023 0310 	bic.w	r3, r3, #16
 8002384:	647b      	str	r3, [r7, #68]	@ 0x44
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	330c      	adds	r3, #12
 800238c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800238e:	61ba      	str	r2, [r7, #24]
 8002390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002392:	6979      	ldr	r1, [r7, #20]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	e841 2300 	strex	r3, r2, [r1]
 800239a:	613b      	str	r3, [r7, #16]
   return(result);
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1e5      	bne.n	800236e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80023b0:	bf00      	nop
 80023b2:	3754      	adds	r7, #84	@ 0x54
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr
	...

080023bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80023f6:	f023 030c 	bic.w	r3, r3, #12
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	68b9      	ldr	r1, [r7, #8]
 8002400:	430b      	orrs	r3, r1
 8002402:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699a      	ldr	r2, [r3, #24]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a2c      	ldr	r2, [pc, #176]	@ (80024d0 <UART_SetConfig+0x114>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d103      	bne.n	800242c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002424:	f7ff fb2a 	bl	8001a7c <HAL_RCC_GetPCLK2Freq>
 8002428:	60f8      	str	r0, [r7, #12]
 800242a:	e002      	b.n	8002432 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800242c:	f7ff fb12 	bl	8001a54 <HAL_RCC_GetPCLK1Freq>
 8002430:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4613      	mov	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	009a      	lsls	r2, r3, #2
 800243c:	441a      	add	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	fbb2 f3f3 	udiv	r3, r2, r3
 8002448:	4a22      	ldr	r2, [pc, #136]	@ (80024d4 <UART_SetConfig+0x118>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	0119      	lsls	r1, r3, #4
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	009a      	lsls	r2, r3, #2
 800245c:	441a      	add	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	fbb2 f2f3 	udiv	r2, r2, r3
 8002468:	4b1a      	ldr	r3, [pc, #104]	@ (80024d4 <UART_SetConfig+0x118>)
 800246a:	fba3 0302 	umull	r0, r3, r3, r2
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	2064      	movs	r0, #100	@ 0x64
 8002472:	fb00 f303 	mul.w	r3, r0, r3
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	3332      	adds	r3, #50	@ 0x32
 800247c:	4a15      	ldr	r2, [pc, #84]	@ (80024d4 <UART_SetConfig+0x118>)
 800247e:	fba2 2303 	umull	r2, r3, r2, r3
 8002482:	095b      	lsrs	r3, r3, #5
 8002484:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002488:	4419      	add	r1, r3
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	009a      	lsls	r2, r3, #2
 8002494:	441a      	add	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	fbb2 f2f3 	udiv	r2, r2, r3
 80024a0:	4b0c      	ldr	r3, [pc, #48]	@ (80024d4 <UART_SetConfig+0x118>)
 80024a2:	fba3 0302 	umull	r0, r3, r3, r2
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	2064      	movs	r0, #100	@ 0x64
 80024aa:	fb00 f303 	mul.w	r3, r0, r3
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	3332      	adds	r3, #50	@ 0x32
 80024b4:	4a07      	ldr	r2, [pc, #28]	@ (80024d4 <UART_SetConfig+0x118>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	f003 020f 	and.w	r2, r3, #15
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	440a      	add	r2, r1
 80024c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80024c8:	bf00      	nop
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40013800 	.word	0x40013800
 80024d4:	51eb851f 	.word	0x51eb851f

080024d8 <memset>:
 80024d8:	4603      	mov	r3, r0
 80024da:	4402      	add	r2, r0
 80024dc:	4293      	cmp	r3, r2
 80024de:	d100      	bne.n	80024e2 <memset+0xa>
 80024e0:	4770      	bx	lr
 80024e2:	f803 1b01 	strb.w	r1, [r3], #1
 80024e6:	e7f9      	b.n	80024dc <memset+0x4>

080024e8 <__libc_init_array>:
 80024e8:	b570      	push	{r4, r5, r6, lr}
 80024ea:	2600      	movs	r6, #0
 80024ec:	4d0c      	ldr	r5, [pc, #48]	@ (8002520 <__libc_init_array+0x38>)
 80024ee:	4c0d      	ldr	r4, [pc, #52]	@ (8002524 <__libc_init_array+0x3c>)
 80024f0:	1b64      	subs	r4, r4, r5
 80024f2:	10a4      	asrs	r4, r4, #2
 80024f4:	42a6      	cmp	r6, r4
 80024f6:	d109      	bne.n	800250c <__libc_init_array+0x24>
 80024f8:	f000 f81a 	bl	8002530 <_init>
 80024fc:	2600      	movs	r6, #0
 80024fe:	4d0a      	ldr	r5, [pc, #40]	@ (8002528 <__libc_init_array+0x40>)
 8002500:	4c0a      	ldr	r4, [pc, #40]	@ (800252c <__libc_init_array+0x44>)
 8002502:	1b64      	subs	r4, r4, r5
 8002504:	10a4      	asrs	r4, r4, #2
 8002506:	42a6      	cmp	r6, r4
 8002508:	d105      	bne.n	8002516 <__libc_init_array+0x2e>
 800250a:	bd70      	pop	{r4, r5, r6, pc}
 800250c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002510:	4798      	blx	r3
 8002512:	3601      	adds	r6, #1
 8002514:	e7ee      	b.n	80024f4 <__libc_init_array+0xc>
 8002516:	f855 3b04 	ldr.w	r3, [r5], #4
 800251a:	4798      	blx	r3
 800251c:	3601      	adds	r6, #1
 800251e:	e7f2      	b.n	8002506 <__libc_init_array+0x1e>
 8002520:	08002590 	.word	0x08002590
 8002524:	08002590 	.word	0x08002590
 8002528:	08002590 	.word	0x08002590
 800252c:	08002594 	.word	0x08002594

08002530 <_init>:
 8002530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002532:	bf00      	nop
 8002534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002536:	bc08      	pop	{r3}
 8002538:	469e      	mov	lr, r3
 800253a:	4770      	bx	lr

0800253c <_fini>:
 800253c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253e:	bf00      	nop
 8002540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002542:	bc08      	pop	{r3}
 8002544:	469e      	mov	lr, r3
 8002546:	4770      	bx	lr
