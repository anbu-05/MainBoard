
DMA_MainBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b04  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08003c10  08003c10  00004c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d4c  08003d4c  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003d4c  08003d4c  0000505c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003d4c  08003d4c  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d4c  08003d4c  00004d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d50  08003d50  00004d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003d54  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001234  2000005c  08003db0  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001290  08003db0  00005290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007a40  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001774  00000000  00000000  0000cac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000710  00000000  00000000  0000e240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000573  00000000  00000000  0000e950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016db0  00000000  00000000  0000eec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000883b  00000000  00000000  00025c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082578  00000000  00000000  0002e4ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b0a26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002074  00000000  00000000  000b0a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000b2ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003bf8 	.word	0x08003bf8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003bf8 	.word	0x08003bf8

0800014c <storeMessage>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



void storeMessage(Message_t* record, Message_t* msg) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	for (int i=0;i<MAX_TOPICS;i++) {
 8000156:	2300      	movs	r3, #0
 8000158:	60fb      	str	r3, [r7, #12]
 800015a:	e01b      	b.n	8000194 <storeMessage+0x48>
		if (record[i].ID == 0) {
 800015c:	68fa      	ldr	r2, [r7, #12]
 800015e:	4613      	mov	r3, r2
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	4413      	add	r3, r2
 8000164:	009b      	lsls	r3, r3, #2
 8000166:	461a      	mov	r2, r3
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	4413      	add	r3, r2
 800016c:	885b      	ldrh	r3, [r3, #2]
 800016e:	2b00      	cmp	r3, #0
 8000170:	d10d      	bne.n	800018e <storeMessage+0x42>
		  memcpy(&record[i], msg, MSG_TOTAL_SIZE);
 8000172:	68fa      	ldr	r2, [r7, #12]
 8000174:	4613      	mov	r3, r2
 8000176:	011b      	lsls	r3, r3, #4
 8000178:	4413      	add	r3, r2
 800017a:	009b      	lsls	r3, r3, #2
 800017c:	461a      	mov	r2, r3
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	4413      	add	r3, r2
 8000182:	2244      	movs	r2, #68	@ 0x44
 8000184:	6839      	ldr	r1, [r7, #0]
 8000186:	4618      	mov	r0, r3
 8000188:	f003 f8dc 	bl	8003344 <memcpy>
		  break;
 800018c:	e006      	b.n	800019c <storeMessage+0x50>
	for (int i=0;i<MAX_TOPICS;i++) {
 800018e:	68fb      	ldr	r3, [r7, #12]
 8000190:	3301      	adds	r3, #1
 8000192:	60fb      	str	r3, [r7, #12]
 8000194:	68fb      	ldr	r3, [r7, #12]
 8000196:	2b0f      	cmp	r3, #15
 8000198:	dde0      	ble.n	800015c <storeMessage+0x10>
		}
	}
}
 800019a:	bf00      	nop
 800019c:	bf00      	nop
 800019e:	3710      	adds	r7, #16
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}

080001a4 <findMessage>:

Message_t* findMessage(Message_t* record, uint16_t ID) {
 80001a4:	b480      	push	{r7}
 80001a6:	b085      	sub	sp, #20
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
 80001ac:	460b      	mov	r3, r1
 80001ae:	807b      	strh	r3, [r7, #2]
	for (int i=0;i<MAX_TOPICS;i++) {
 80001b0:	2300      	movs	r3, #0
 80001b2:	60fb      	str	r3, [r7, #12]
 80001b4:	e017      	b.n	80001e6 <findMessage+0x42>
		if (record[i].ID == ID) return &record[i];
 80001b6:	68fa      	ldr	r2, [r7, #12]
 80001b8:	4613      	mov	r3, r2
 80001ba:	011b      	lsls	r3, r3, #4
 80001bc:	4413      	add	r3, r2
 80001be:	009b      	lsls	r3, r3, #2
 80001c0:	461a      	mov	r2, r3
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	4413      	add	r3, r2
 80001c6:	885b      	ldrh	r3, [r3, #2]
 80001c8:	887a      	ldrh	r2, [r7, #2]
 80001ca:	429a      	cmp	r2, r3
 80001cc:	d108      	bne.n	80001e0 <findMessage+0x3c>
 80001ce:	68fa      	ldr	r2, [r7, #12]
 80001d0:	4613      	mov	r3, r2
 80001d2:	011b      	lsls	r3, r3, #4
 80001d4:	4413      	add	r3, r2
 80001d6:	009b      	lsls	r3, r3, #2
 80001d8:	461a      	mov	r2, r3
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4413      	add	r3, r2
 80001de:	e006      	b.n	80001ee <findMessage+0x4a>
	for (int i=0;i<MAX_TOPICS;i++) {
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	3301      	adds	r3, #1
 80001e4:	60fb      	str	r3, [r7, #12]
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	2b0f      	cmp	r3, #15
 80001ea:	dde4      	ble.n	80001b6 <findMessage+0x12>
	}
	return NULL;
 80001ec:	2300      	movs	r3, #0
}
 80001ee:	4618      	mov	r0, r3
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr

080001f8 <processMessage>:
void processMessage(UART_HandleTypeDef* huart,
					uint8_t* rxBuff,
					uint8_t* txBuff,
					Message_t* ownRec,
					Message_t* recA,
					Message_t* recB) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b0bc      	sub	sp, #240	@ 0xf0
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	60f8      	str	r0, [r7, #12]
 8000200:	60b9      	str	r1, [r7, #8]
 8000202:	607a      	str	r2, [r7, #4]
 8000204:	603b      	str	r3, [r7, #0]

//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	Message_t* msg = (Message_t*) rxBuff;
 8000206:	68bb      	ldr	r3, [r7, #8]
 8000208:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

	//fixing endian-ness -interpreting the incoming message as big-endian
	uint16_t type = (msg->type << 8) | (msg->type >> 8);
 800020c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8000210:	881b      	ldrh	r3, [r3, #0]
 8000212:	b21b      	sxth	r3, r3
 8000214:	021b      	lsls	r3, r3, #8
 8000216:	b21a      	sxth	r2, r3
 8000218:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800021c:	881b      	ldrh	r3, [r3, #0]
 800021e:	0a1b      	lsrs	r3, r3, #8
 8000220:	b29b      	uxth	r3, r3
 8000222:	b21b      	sxth	r3, r3
 8000224:	4313      	orrs	r3, r2
 8000226:	b21b      	sxth	r3, r3
 8000228:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
	uint16_t ID   = (msg->ID   << 8) | (msg->ID   >> 8);
 800022c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8000230:	885b      	ldrh	r3, [r3, #2]
 8000232:	b21b      	sxth	r3, r3
 8000234:	021b      	lsls	r3, r3, #8
 8000236:	b21a      	sxth	r2, r3
 8000238:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800023c:	885b      	ldrh	r3, [r3, #2]
 800023e:	0a1b      	lsrs	r3, r3, #8
 8000240:	b29b      	uxth	r3, r3
 8000242:	b21b      	sxth	r3, r3
 8000244:	4313      	orrs	r3, r2
 8000246:	b21b      	sxth	r3, r3
 8000248:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4

	//debugging
	uint8_t debug[64] = {'\0'};
 800024c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000250:	2240      	movs	r2, #64	@ 0x40
 8000252:	2100      	movs	r1, #0
 8000254:	4618      	mov	r0, r3
 8000256:	f003 f841 	bl	80032dc <memset>
	int n = sprintf(debug, "processMessage called with message type = %u\n", type);
 800025a:	f8b7 20e6 	ldrh.w	r2, [r7, #230]	@ 0xe6
 800025e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000262:	495b      	ldr	r1, [pc, #364]	@ (80003d0 <processMessage+0x1d8>)
 8000264:	4618      	mov	r0, r3
 8000266:	f003 f817 	bl	8003298 <siprintf>
 800026a:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
	HAL_UART_Transmit(&huart1, debug, n, 100);
 800026e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000272:	b29a      	uxth	r2, r3
 8000274:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8000278:	2364      	movs	r3, #100	@ 0x64
 800027a:	4856      	ldr	r0, [pc, #344]	@ (80003d4 <processMessage+0x1dc>)
 800027c:	f001 fffa 	bl	8002274 <HAL_UART_Transmit>

	if (type == MSG_TYPE_PUBLISH) {
 8000280:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	@ 0xe6
 8000284:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000288:	d11f      	bne.n	80002ca <processMessage+0xd2>

		//debugging
		uint8_t debug[64] = {'\0'};
 800028a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800028e:	2240      	movs	r2, #64	@ 0x40
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f003 f822 	bl	80032dc <memset>
		int n = sprintf(debug, "PUB ID=%d\n", ID);
 8000298:	f8b7 20e4 	ldrh.w	r2, [r7, #228]	@ 0xe4
 800029c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80002a0:	494d      	ldr	r1, [pc, #308]	@ (80003d8 <processMessage+0x1e0>)
 80002a2:	4618      	mov	r0, r3
 80002a4:	f002 fff8 	bl	8003298 <siprintf>
 80002a8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
		HAL_UART_Transmit(&huart1, debug, n, 100);
 80002ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80002b0:	b29a      	uxth	r2, r3
 80002b2:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80002b6:	2364      	movs	r3, #100	@ 0x64
 80002b8:	4846      	ldr	r0, [pc, #280]	@ (80003d4 <processMessage+0x1dc>)
 80002ba:	f001 ffdb 	bl	8002274 <HAL_UART_Transmit>

		storeMessage(ownRec, msg);
 80002be:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 80002c2:	6838      	ldr	r0, [r7, #0]
 80002c4:	f7ff ff42 	bl	800014c <storeMessage>
			uint8_t debug[64] = {'\0'};
			int n = sprintf(debug, "transfer message not found for ID %u\n", ID);
			HAL_UART_Transmit(&huart1, debug, n, 100);
		}
	}
}
 80002c8:	e07e      	b.n	80003c8 <processMessage+0x1d0>
	else if (type == MSG_TYPE_SUBSCRIBE) {
 80002ca:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	@ 0xe6
 80002ce:	f5b3 5f88 	cmp.w	r3, #4352	@ 0x1100
 80002d2:	d179      	bne.n	80003c8 <processMessage+0x1d0>
		uint8_t debug[64] = {'\0'};
 80002d4:	f107 0310 	add.w	r3, r7, #16
 80002d8:	2240      	movs	r2, #64	@ 0x40
 80002da:	2100      	movs	r1, #0
 80002dc:	4618      	mov	r0, r3
 80002de:	f002 fffd 	bl	80032dc <memset>
		int n = sprintf(debug, "SUB ID=%u\n", ID);
 80002e2:	f8b7 20e4 	ldrh.w	r2, [r7, #228]	@ 0xe4
 80002e6:	f107 0310 	add.w	r3, r7, #16
 80002ea:	493c      	ldr	r1, [pc, #240]	@ (80003dc <processMessage+0x1e4>)
 80002ec:	4618      	mov	r0, r3
 80002ee:	f002 ffd3 	bl	8003298 <siprintf>
 80002f2:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
		HAL_UART_Transmit(&huart1, debug, n, 100);
 80002f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80002fa:	b29a      	uxth	r2, r3
 80002fc:	f107 0110 	add.w	r1, r7, #16
 8000300:	2364      	movs	r3, #100	@ 0x64
 8000302:	4834      	ldr	r0, [pc, #208]	@ (80003d4 <processMessage+0x1dc>)
 8000304:	f001 ffb6 	bl	8002274 <HAL_UART_Transmit>
		Message_t* found = findMessage(recA, ID);
 8000308:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	@ 0xe4
 800030c:	4619      	mov	r1, r3
 800030e:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 8000312:	f7ff ff47 	bl	80001a4 <findMessage>
 8000316:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
		if (!found) found = findMessage(recB, ID);
 800031a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800031e:	2b00      	cmp	r3, #0
 8000320:	d108      	bne.n	8000334 <processMessage+0x13c>
 8000322:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	@ 0xe4
 8000326:	4619      	mov	r1, r3
 8000328:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 800032c:	f7ff ff3a 	bl	80001a4 <findMessage>
 8000330:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
		if (found) {
 8000334:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000338:	2b00      	cmp	r3, #0
 800033a:	d02b      	beq.n	8000394 <processMessage+0x19c>
			uint8_t debug[64] = {'\0'};
 800033c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000340:	2240      	movs	r2, #64	@ 0x40
 8000342:	2100      	movs	r1, #0
 8000344:	4618      	mov	r0, r3
 8000346:	f002 ffc9 	bl	80032dc <memset>
			int n = sprintf(debug, "RESP ID=%u %s\n", ID, found ? "OK" : "NOK");
 800034a:	f8b7 20e4 	ldrh.w	r2, [r7, #228]	@ 0xe4
 800034e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <processMessage+0x162>
 8000356:	4b22      	ldr	r3, [pc, #136]	@ (80003e0 <processMessage+0x1e8>)
 8000358:	e000      	b.n	800035c <processMessage+0x164>
 800035a:	4b22      	ldr	r3, [pc, #136]	@ (80003e4 <processMessage+0x1ec>)
 800035c:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000360:	4921      	ldr	r1, [pc, #132]	@ (80003e8 <processMessage+0x1f0>)
 8000362:	f002 ff99 	bl	8003298 <siprintf>
 8000366:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
			HAL_UART_Transmit(&huart1, debug, n, 100);
 800036a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800036e:	b29a      	uxth	r2, r3
 8000370:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8000374:	2364      	movs	r3, #100	@ 0x64
 8000376:	4817      	ldr	r0, [pc, #92]	@ (80003d4 <processMessage+0x1dc>)
 8000378:	f001 ff7c 	bl	8002274 <HAL_UART_Transmit>
			memcpy(txBuff, found, MSG_TOTAL_SIZE);
 800037c:	2244      	movs	r2, #68	@ 0x44
 800037e:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 8000382:	6878      	ldr	r0, [r7, #4]
 8000384:	f002 ffde 	bl	8003344 <memcpy>
			HAL_UART_Transmit_IT(huart, txBuff, MSG_TOTAL_SIZE);
 8000388:	2244      	movs	r2, #68	@ 0x44
 800038a:	6879      	ldr	r1, [r7, #4]
 800038c:	68f8      	ldr	r0, [r7, #12]
 800038e:	f001 fffc 	bl	800238a <HAL_UART_Transmit_IT>
}
 8000392:	e019      	b.n	80003c8 <processMessage+0x1d0>
			uint8_t debug[64] = {'\0'};
 8000394:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000398:	2240      	movs	r2, #64	@ 0x40
 800039a:	2100      	movs	r1, #0
 800039c:	4618      	mov	r0, r3
 800039e:	f002 ff9d 	bl	80032dc <memset>
			int n = sprintf(debug, "transfer message not found for ID %u\n", ID);
 80003a2:	f8b7 20e4 	ldrh.w	r2, [r7, #228]	@ 0xe4
 80003a6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80003aa:	4910      	ldr	r1, [pc, #64]	@ (80003ec <processMessage+0x1f4>)
 80003ac:	4618      	mov	r0, r3
 80003ae:	f002 ff73 	bl	8003298 <siprintf>
 80003b2:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
			HAL_UART_Transmit(&huart1, debug, n, 100);
 80003b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80003ba:	b29a      	uxth	r2, r3
 80003bc:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80003c0:	2364      	movs	r3, #100	@ 0x64
 80003c2:	4804      	ldr	r0, [pc, #16]	@ (80003d4 <processMessage+0x1dc>)
 80003c4:	f001 ff56 	bl	8002274 <HAL_UART_Transmit>
}
 80003c8:	bf00      	nop
 80003ca:	37f0      	adds	r7, #240	@ 0xf0
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	08003c10 	.word	0x08003c10
 80003d4:	20000078 	.word	0x20000078
 80003d8:	08003c40 	.word	0x08003c40
 80003dc:	08003c4c 	.word	0x08003c4c
 80003e0:	08003c58 	.word	0x08003c58
 80003e4:	08003c5c 	.word	0x08003c5c
 80003e8:	08003c60 	.word	0x08003c60
 80003ec:	08003c70 	.word	0x08003c70

080003f0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b096      	sub	sp, #88	@ 0x58
 80003f4:	af02      	add	r7, sp, #8
 80003f6:	6078      	str	r0, [r7, #4]
 80003f8:	460b      	mov	r3, r1
 80003fa:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART1) {
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a35      	ldr	r2, [pc, #212]	@ (80004d8 <HAL_UARTEx_RxEventCallback+0xe8>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d10f      	bne.n	8000426 <HAL_UARTEx_RxEventCallback+0x36>
        processMessage(&huart1, UART1_rxBuffer, UART1_txBuffer, UART1_record, UART2_record, UART3_record);
 8000406:	4b35      	ldr	r3, [pc, #212]	@ (80004dc <HAL_UARTEx_RxEventCallback+0xec>)
 8000408:	9301      	str	r3, [sp, #4]
 800040a:	4b35      	ldr	r3, [pc, #212]	@ (80004e0 <HAL_UARTEx_RxEventCallback+0xf0>)
 800040c:	9300      	str	r3, [sp, #0]
 800040e:	4b35      	ldr	r3, [pc, #212]	@ (80004e4 <HAL_UARTEx_RxEventCallback+0xf4>)
 8000410:	4a35      	ldr	r2, [pc, #212]	@ (80004e8 <HAL_UARTEx_RxEventCallback+0xf8>)
 8000412:	4936      	ldr	r1, [pc, #216]	@ (80004ec <HAL_UARTEx_RxEventCallback+0xfc>)
 8000414:	4836      	ldr	r0, [pc, #216]	@ (80004f0 <HAL_UARTEx_RxEventCallback+0x100>)
 8000416:	f7ff feef 	bl	80001f8 <processMessage>
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, UART1_rxBuffer, MSG_TOTAL_SIZE);
 800041a:	2244      	movs	r2, #68	@ 0x44
 800041c:	4933      	ldr	r1, [pc, #204]	@ (80004ec <HAL_UARTEx_RxEventCallback+0xfc>)
 800041e:	4834      	ldr	r0, [pc, #208]	@ (80004f0 <HAL_UARTEx_RxEventCallback+0x100>)
 8000420:	f001 ffe8 	bl	80023f4 <HAL_UARTEx_ReceiveToIdle_DMA>
		HAL_UART_Transmit(&huart1, debug, n, 100);

        processMessage(&huart3, UART3_rxBuffer, UART3_txBuffer, UART3_record, UART1_record, UART2_record);
        HAL_UARTEx_ReceiveToIdle_DMA(&huart3, UART3_rxBuffer, MSG_TOTAL_SIZE);
    }
}
 8000424:	e054      	b.n	80004d0 <HAL_UARTEx_RxEventCallback+0xe0>
    else if (huart->Instance == USART2) {
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a32      	ldr	r2, [pc, #200]	@ (80004f4 <HAL_UARTEx_RxEventCallback+0x104>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d125      	bne.n	800047c <HAL_UARTEx_RxEventCallback+0x8c>
		uint8_t debug[64] = {0};
 8000430:	f107 0308 	add.w	r3, r7, #8
 8000434:	2240      	movs	r2, #64	@ 0x40
 8000436:	2100      	movs	r1, #0
 8000438:	4618      	mov	r0, r3
 800043a:	f002 ff4f 	bl	80032dc <memset>
		int n = sprintf(debug, "USART2 rx complete callback\n");
 800043e:	f107 0308 	add.w	r3, r7, #8
 8000442:	492d      	ldr	r1, [pc, #180]	@ (80004f8 <HAL_UARTEx_RxEventCallback+0x108>)
 8000444:	4618      	mov	r0, r3
 8000446:	f002 ff27 	bl	8003298 <siprintf>
 800044a:	64b8      	str	r0, [r7, #72]	@ 0x48
		HAL_UART_Transmit(&huart1, debug, n, 100);
 800044c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800044e:	b29a      	uxth	r2, r3
 8000450:	f107 0108 	add.w	r1, r7, #8
 8000454:	2364      	movs	r3, #100	@ 0x64
 8000456:	4826      	ldr	r0, [pc, #152]	@ (80004f0 <HAL_UARTEx_RxEventCallback+0x100>)
 8000458:	f001 ff0c 	bl	8002274 <HAL_UART_Transmit>
        processMessage(&huart2, UART2_rxBuffer, UART2_txBuffer, UART2_record, UART1_record, UART3_record);
 800045c:	4b1f      	ldr	r3, [pc, #124]	@ (80004dc <HAL_UARTEx_RxEventCallback+0xec>)
 800045e:	9301      	str	r3, [sp, #4]
 8000460:	4b20      	ldr	r3, [pc, #128]	@ (80004e4 <HAL_UARTEx_RxEventCallback+0xf4>)
 8000462:	9300      	str	r3, [sp, #0]
 8000464:	4b1e      	ldr	r3, [pc, #120]	@ (80004e0 <HAL_UARTEx_RxEventCallback+0xf0>)
 8000466:	4a25      	ldr	r2, [pc, #148]	@ (80004fc <HAL_UARTEx_RxEventCallback+0x10c>)
 8000468:	4925      	ldr	r1, [pc, #148]	@ (8000500 <HAL_UARTEx_RxEventCallback+0x110>)
 800046a:	4826      	ldr	r0, [pc, #152]	@ (8000504 <HAL_UARTEx_RxEventCallback+0x114>)
 800046c:	f7ff fec4 	bl	80001f8 <processMessage>
        HAL_UARTEx_ReceiveToIdle_DMA(&huart2, UART2_rxBuffer, MSG_TOTAL_SIZE);
 8000470:	2244      	movs	r2, #68	@ 0x44
 8000472:	4923      	ldr	r1, [pc, #140]	@ (8000500 <HAL_UARTEx_RxEventCallback+0x110>)
 8000474:	4823      	ldr	r0, [pc, #140]	@ (8000504 <HAL_UARTEx_RxEventCallback+0x114>)
 8000476:	f001 ffbd 	bl	80023f4 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 800047a:	e029      	b.n	80004d0 <HAL_UARTEx_RxEventCallback+0xe0>
    else if (huart->Instance == USART3) {
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a21      	ldr	r2, [pc, #132]	@ (8000508 <HAL_UARTEx_RxEventCallback+0x118>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d124      	bne.n	80004d0 <HAL_UARTEx_RxEventCallback+0xe0>
		uint8_t debug[64] = {0};
 8000486:	f107 0308 	add.w	r3, r7, #8
 800048a:	2240      	movs	r2, #64	@ 0x40
 800048c:	2100      	movs	r1, #0
 800048e:	4618      	mov	r0, r3
 8000490:	f002 ff24 	bl	80032dc <memset>
		int n = sprintf(debug, "USART3 rx complete callback\n");
 8000494:	f107 0308 	add.w	r3, r7, #8
 8000498:	491c      	ldr	r1, [pc, #112]	@ (800050c <HAL_UARTEx_RxEventCallback+0x11c>)
 800049a:	4618      	mov	r0, r3
 800049c:	f002 fefc 	bl	8003298 <siprintf>
 80004a0:	64f8      	str	r0, [r7, #76]	@ 0x4c
		HAL_UART_Transmit(&huart1, debug, n, 100);
 80004a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80004a4:	b29a      	uxth	r2, r3
 80004a6:	f107 0108 	add.w	r1, r7, #8
 80004aa:	2364      	movs	r3, #100	@ 0x64
 80004ac:	4810      	ldr	r0, [pc, #64]	@ (80004f0 <HAL_UARTEx_RxEventCallback+0x100>)
 80004ae:	f001 fee1 	bl	8002274 <HAL_UART_Transmit>
        processMessage(&huart3, UART3_rxBuffer, UART3_txBuffer, UART3_record, UART1_record, UART2_record);
 80004b2:	4b0b      	ldr	r3, [pc, #44]	@ (80004e0 <HAL_UARTEx_RxEventCallback+0xf0>)
 80004b4:	9301      	str	r3, [sp, #4]
 80004b6:	4b0b      	ldr	r3, [pc, #44]	@ (80004e4 <HAL_UARTEx_RxEventCallback+0xf4>)
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	4b08      	ldr	r3, [pc, #32]	@ (80004dc <HAL_UARTEx_RxEventCallback+0xec>)
 80004bc:	4a14      	ldr	r2, [pc, #80]	@ (8000510 <HAL_UARTEx_RxEventCallback+0x120>)
 80004be:	4915      	ldr	r1, [pc, #84]	@ (8000514 <HAL_UARTEx_RxEventCallback+0x124>)
 80004c0:	4815      	ldr	r0, [pc, #84]	@ (8000518 <HAL_UARTEx_RxEventCallback+0x128>)
 80004c2:	f7ff fe99 	bl	80001f8 <processMessage>
        HAL_UARTEx_ReceiveToIdle_DMA(&huart3, UART3_rxBuffer, MSG_TOTAL_SIZE);
 80004c6:	2244      	movs	r2, #68	@ 0x44
 80004c8:	4912      	ldr	r1, [pc, #72]	@ (8000514 <HAL_UARTEx_RxEventCallback+0x124>)
 80004ca:	4813      	ldr	r0, [pc, #76]	@ (8000518 <HAL_UARTEx_RxEventCallback+0x128>)
 80004cc:	f001 ff92 	bl	80023f4 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80004d0:	bf00      	nop
 80004d2:	3750      	adds	r7, #80	@ 0x50
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	40013800 	.word	0x40013800
 80004dc:	20000d00 	.word	0x20000d00
 80004e0:	200008c0 	.word	0x200008c0
 80004e4:	20000480 	.word	0x20000480
 80004e8:	200003b4 	.word	0x200003b4
 80004ec:	200002e8 	.word	0x200002e8
 80004f0:	20000078 	.word	0x20000078
 80004f4:	40004400 	.word	0x40004400
 80004f8:	08003c98 	.word	0x08003c98
 80004fc:	200003f8 	.word	0x200003f8
 8000500:	2000032c 	.word	0x2000032c
 8000504:	200000c0 	.word	0x200000c0
 8000508:	40004800 	.word	0x40004800
 800050c:	08003cb8 	.word	0x08003cb8
 8000510:	2000043c 	.word	0x2000043c
 8000514:	20000370 	.word	0x20000370
 8000518:	20000108 	.word	0x20000108

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b090      	sub	sp, #64	@ 0x40
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f000 fc99 	bl	8000e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f83b 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 f943 	bl	80007b4 <MX_GPIO_Init>
  MX_DMA_Init();
 800052e:	f000 f8fb 	bl	8000728 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000532:	f000 f87b 	bl	800062c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000536:	f000 f8a3 	bl	8000680 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800053a:	f000 f8cb 	bl	80006d4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, UART1_rxBuffer, MSG_TOTAL_SIZE);
 800053e:	2244      	movs	r2, #68	@ 0x44
 8000540:	4910      	ldr	r1, [pc, #64]	@ (8000584 <main+0x68>)
 8000542:	4811      	ldr	r0, [pc, #68]	@ (8000588 <main+0x6c>)
 8000544:	f001 ff56 	bl	80023f4 <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, UART2_rxBuffer, MSG_TOTAL_SIZE);
 8000548:	2244      	movs	r2, #68	@ 0x44
 800054a:	4910      	ldr	r1, [pc, #64]	@ (800058c <main+0x70>)
 800054c:	4810      	ldr	r0, [pc, #64]	@ (8000590 <main+0x74>)
 800054e:	f001 ff51 	bl	80023f4 <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, UART3_rxBuffer, MSG_TOTAL_SIZE);
 8000552:	2244      	movs	r2, #68	@ 0x44
 8000554:	490f      	ldr	r1, [pc, #60]	@ (8000594 <main+0x78>)
 8000556:	4810      	ldr	r0, [pc, #64]	@ (8000598 <main+0x7c>)
 8000558:	f001 ff4c 	bl	80023f4 <HAL_UARTEx_ReceiveToIdle_DMA>

	//debugging
	uint8_t debug[64] = {'\0'};
 800055c:	463b      	mov	r3, r7
 800055e:	2240      	movs	r2, #64	@ 0x40
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f002 feba 	bl	80032dc <memset>
	sprintf(debug, "STM32 start debug\n");
 8000568:	463b      	mov	r3, r7
 800056a:	490c      	ldr	r1, [pc, #48]	@ (800059c <main+0x80>)
 800056c:	4618      	mov	r0, r3
 800056e:	f002 fe93 	bl	8003298 <siprintf>
	HAL_UART_Transmit(&huart1, debug, sizeof(debug), 100);
 8000572:	4639      	mov	r1, r7
 8000574:	2364      	movs	r3, #100	@ 0x64
 8000576:	2240      	movs	r2, #64	@ 0x40
 8000578:	4803      	ldr	r0, [pc, #12]	@ (8000588 <main+0x6c>)
 800057a:	f001 fe7b 	bl	8002274 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800057e:	bf00      	nop
 8000580:	e7fd      	b.n	800057e <main+0x62>
 8000582:	bf00      	nop
 8000584:	200002e8 	.word	0x200002e8
 8000588:	20000078 	.word	0x20000078
 800058c:	2000032c 	.word	0x2000032c
 8000590:	200000c0 	.word	0x200000c0
 8000594:	20000370 	.word	0x20000370
 8000598:	20000108 	.word	0x20000108
 800059c:	08003cd8 	.word	0x08003cd8

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b090      	sub	sp, #64	@ 0x40
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0318 	add.w	r3, r7, #24
 80005aa:	2228      	movs	r2, #40	@ 0x28
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 fe94 	bl	80032dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c2:	2301      	movs	r3, #1
 80005c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d0:	2301      	movs	r3, #1
 80005d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d4:	2302      	movs	r3, #2
 80005d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005de:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80005e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0318 	add.w	r3, r7, #24
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 f9e3 	bl	80019b4 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005f4:	f000 f936 	bl	8000864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2302      	movs	r3, #2
 80005fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000604:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2102      	movs	r1, #2
 8000612:	4618      	mov	r0, r3
 8000614:	f001 fc50 	bl	8001eb8 <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800061e:	f000 f921 	bl	8000864 <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3740      	adds	r7, #64	@ 0x40
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000630:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <MX_USART1_UART_Init+0x4c>)
 8000632:	4a12      	ldr	r2, [pc, #72]	@ (800067c <MX_USART1_UART_Init+0x50>)
 8000634:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000636:	4b10      	ldr	r3, [pc, #64]	@ (8000678 <MX_USART1_UART_Init+0x4c>)
 8000638:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800063c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800063e:	4b0e      	ldr	r3, [pc, #56]	@ (8000678 <MX_USART1_UART_Init+0x4c>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000644:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <MX_USART1_UART_Init+0x4c>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800064a:	4b0b      	ldr	r3, [pc, #44]	@ (8000678 <MX_USART1_UART_Init+0x4c>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000650:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <MX_USART1_UART_Init+0x4c>)
 8000652:	220c      	movs	r2, #12
 8000654:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000656:	4b08      	ldr	r3, [pc, #32]	@ (8000678 <MX_USART1_UART_Init+0x4c>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800065c:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <MX_USART1_UART_Init+0x4c>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000662:	4805      	ldr	r0, [pc, #20]	@ (8000678 <MX_USART1_UART_Init+0x4c>)
 8000664:	f001 fdb6 	bl	80021d4 <HAL_UART_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800066e:	f000 f8f9 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000078 	.word	0x20000078
 800067c:	40013800 	.word	0x40013800

08000680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000684:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <MX_USART2_UART_Init+0x4c>)
 8000686:	4a12      	ldr	r2, [pc, #72]	@ (80006d0 <MX_USART2_UART_Init+0x50>)
 8000688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800068a:	4b10      	ldr	r3, [pc, #64]	@ (80006cc <MX_USART2_UART_Init+0x4c>)
 800068c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <MX_USART2_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b0c      	ldr	r3, [pc, #48]	@ (80006cc <MX_USART2_UART_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069e:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <MX_USART2_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <MX_USART2_UART_Init+0x4c>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <MX_USART2_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <MX_USART2_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	@ (80006cc <MX_USART2_UART_Init+0x4c>)
 80006b8:	f001 fd8c 	bl	80021d4 <HAL_UART_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006c2:	f000 f8cf 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200000c0 	.word	0x200000c0
 80006d0:	40004400 	.word	0x40004400

080006d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006d8:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_USART3_UART_Init+0x4c>)
 80006da:	4a12      	ldr	r2, [pc, #72]	@ (8000724 <MX_USART3_UART_Init+0x50>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006de:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <MX_USART3_UART_Init+0x4c>)
 80006e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_USART3_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <MX_USART3_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <MX_USART3_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_USART3_UART_Init+0x4c>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <MX_USART3_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_USART3_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <MX_USART3_UART_Init+0x4c>)
 800070c:	f001 fd62 	bl	80021d4 <HAL_UART_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000716:	f000 f8a5 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000108 	.word	0x20000108
 8000724:	40004800 	.word	0x40004800

08000728 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800072e:	4b20      	ldr	r3, [pc, #128]	@ (80007b0 <MX_DMA_Init+0x88>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	4a1f      	ldr	r2, [pc, #124]	@ (80007b0 <MX_DMA_Init+0x88>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6153      	str	r3, [r2, #20]
 800073a:	4b1d      	ldr	r3, [pc, #116]	@ (80007b0 <MX_DMA_Init+0x88>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2100      	movs	r1, #0
 800074a:	200c      	movs	r0, #12
 800074c:	f000 fcbd 	bl	80010ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000750:	200c      	movs	r0, #12
 8000752:	f000 fcd6 	bl	8001102 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2100      	movs	r1, #0
 800075a:	200d      	movs	r0, #13
 800075c:	f000 fcb5 	bl	80010ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000760:	200d      	movs	r0, #13
 8000762:	f000 fcce 	bl	8001102 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000766:	2200      	movs	r2, #0
 8000768:	2100      	movs	r1, #0
 800076a:	200e      	movs	r0, #14
 800076c:	f000 fcad 	bl	80010ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000770:	200e      	movs	r0, #14
 8000772:	f000 fcc6 	bl	8001102 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	200f      	movs	r0, #15
 800077c:	f000 fca5 	bl	80010ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000780:	200f      	movs	r0, #15
 8000782:	f000 fcbe 	bl	8001102 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	2010      	movs	r0, #16
 800078c:	f000 fc9d 	bl	80010ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000790:	2010      	movs	r0, #16
 8000792:	f000 fcb6 	bl	8001102 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2100      	movs	r1, #0
 800079a:	2011      	movs	r0, #17
 800079c:	f000 fc95 	bl	80010ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80007a0:	2011      	movs	r0, #17
 80007a2:	f000 fcae 	bl	8001102 <HAL_NVIC_EnableIRQ>

}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40021000 	.word	0x40021000

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 0310 	add.w	r3, r7, #16
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c8:	4b24      	ldr	r3, [pc, #144]	@ (800085c <MX_GPIO_Init+0xa8>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a23      	ldr	r2, [pc, #140]	@ (800085c <MX_GPIO_Init+0xa8>)
 80007ce:	f043 0310 	orr.w	r3, r3, #16
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b21      	ldr	r3, [pc, #132]	@ (800085c <MX_GPIO_Init+0xa8>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f003 0310 	and.w	r3, r3, #16
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e0:	4b1e      	ldr	r3, [pc, #120]	@ (800085c <MX_GPIO_Init+0xa8>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a1d      	ldr	r2, [pc, #116]	@ (800085c <MX_GPIO_Init+0xa8>)
 80007e6:	f043 0320 	orr.w	r3, r3, #32
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b1b      	ldr	r3, [pc, #108]	@ (800085c <MX_GPIO_Init+0xa8>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0320 	and.w	r3, r3, #32
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f8:	4b18      	ldr	r3, [pc, #96]	@ (800085c <MX_GPIO_Init+0xa8>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a17      	ldr	r2, [pc, #92]	@ (800085c <MX_GPIO_Init+0xa8>)
 80007fe:	f043 0304 	orr.w	r3, r3, #4
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b15      	ldr	r3, [pc, #84]	@ (800085c <MX_GPIO_Init+0xa8>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f003 0304 	and.w	r3, r3, #4
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000810:	4b12      	ldr	r3, [pc, #72]	@ (800085c <MX_GPIO_Init+0xa8>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a11      	ldr	r2, [pc, #68]	@ (800085c <MX_GPIO_Init+0xa8>)
 8000816:	f043 0308 	orr.w	r3, r3, #8
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <MX_GPIO_Init+0xa8>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f003 0308 	and.w	r3, r3, #8
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800082e:	480c      	ldr	r0, [pc, #48]	@ (8000860 <MX_GPIO_Init+0xac>)
 8000830:	f001 f8a8 	bl	8001984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000834:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2302      	movs	r3, #2
 8000844:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000846:	f107 0310 	add.w	r3, r7, #16
 800084a:	4619      	mov	r1, r3
 800084c:	4804      	ldr	r0, [pc, #16]	@ (8000860 <MX_GPIO_Init+0xac>)
 800084e:	f000 ff15 	bl	800167c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000852:	bf00      	nop
 8000854:	3720      	adds	r7, #32
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40021000 	.word	0x40021000
 8000860:	40011000 	.word	0x40011000

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <Error_Handler+0x8>

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000876:	4b15      	ldr	r3, [pc, #84]	@ (80008cc <HAL_MspInit+0x5c>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	4a14      	ldr	r2, [pc, #80]	@ (80008cc <HAL_MspInit+0x5c>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6193      	str	r3, [r2, #24]
 8000882:	4b12      	ldr	r3, [pc, #72]	@ (80008cc <HAL_MspInit+0x5c>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <HAL_MspInit+0x5c>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	4a0e      	ldr	r2, [pc, #56]	@ (80008cc <HAL_MspInit+0x5c>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000898:	61d3      	str	r3, [r2, #28]
 800089a:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <HAL_MspInit+0x5c>)
 800089c:	69db      	ldr	r3, [r3, #28]
 800089e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80008a6:	4b0a      	ldr	r3, [pc, #40]	@ (80008d0 <HAL_MspInit+0x60>)
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	4a04      	ldr	r2, [pc, #16]	@ (80008d0 <HAL_MspInit+0x60>)
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	3714      	adds	r7, #20
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr
 80008cc:	40021000 	.word	0x40021000
 80008d0:	40010000 	.word	0x40010000

080008d4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08c      	sub	sp, #48	@ 0x30
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 0320 	add.w	r3, r7, #32
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a8b      	ldr	r2, [pc, #556]	@ (8000b1c <HAL_UART_MspInit+0x248>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	f040 8087 	bne.w	8000a04 <HAL_UART_MspInit+0x130>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008f6:	4b8a      	ldr	r3, [pc, #552]	@ (8000b20 <HAL_UART_MspInit+0x24c>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	4a89      	ldr	r2, [pc, #548]	@ (8000b20 <HAL_UART_MspInit+0x24c>)
 80008fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000900:	6193      	str	r3, [r2, #24]
 8000902:	4b87      	ldr	r3, [pc, #540]	@ (8000b20 <HAL_UART_MspInit+0x24c>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800090a:	61fb      	str	r3, [r7, #28]
 800090c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b84      	ldr	r3, [pc, #528]	@ (8000b20 <HAL_UART_MspInit+0x24c>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	4a83      	ldr	r2, [pc, #524]	@ (8000b20 <HAL_UART_MspInit+0x24c>)
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	6193      	str	r3, [r2, #24]
 800091a:	4b81      	ldr	r3, [pc, #516]	@ (8000b20 <HAL_UART_MspInit+0x24c>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	f003 0304 	and.w	r3, r3, #4
 8000922:	61bb      	str	r3, [r7, #24]
 8000924:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000926:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800092a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	f107 0320 	add.w	r3, r7, #32
 8000938:	4619      	mov	r1, r3
 800093a:	487a      	ldr	r0, [pc, #488]	@ (8000b24 <HAL_UART_MspInit+0x250>)
 800093c:	f000 fe9e 	bl	800167c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000940:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 0320 	add.w	r3, r7, #32
 8000952:	4619      	mov	r1, r3
 8000954:	4873      	ldr	r0, [pc, #460]	@ (8000b24 <HAL_UART_MspInit+0x250>)
 8000956:	f000 fe91 	bl	800167c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800095a:	4b73      	ldr	r3, [pc, #460]	@ (8000b28 <HAL_UART_MspInit+0x254>)
 800095c:	4a73      	ldr	r2, [pc, #460]	@ (8000b2c <HAL_UART_MspInit+0x258>)
 800095e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000960:	4b71      	ldr	r3, [pc, #452]	@ (8000b28 <HAL_UART_MspInit+0x254>)
 8000962:	2200      	movs	r2, #0
 8000964:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000966:	4b70      	ldr	r3, [pc, #448]	@ (8000b28 <HAL_UART_MspInit+0x254>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800096c:	4b6e      	ldr	r3, [pc, #440]	@ (8000b28 <HAL_UART_MspInit+0x254>)
 800096e:	2280      	movs	r2, #128	@ 0x80
 8000970:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000972:	4b6d      	ldr	r3, [pc, #436]	@ (8000b28 <HAL_UART_MspInit+0x254>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000978:	4b6b      	ldr	r3, [pc, #428]	@ (8000b28 <HAL_UART_MspInit+0x254>)
 800097a:	2200      	movs	r2, #0
 800097c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800097e:	4b6a      	ldr	r3, [pc, #424]	@ (8000b28 <HAL_UART_MspInit+0x254>)
 8000980:	2220      	movs	r2, #32
 8000982:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000984:	4b68      	ldr	r3, [pc, #416]	@ (8000b28 <HAL_UART_MspInit+0x254>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800098a:	4867      	ldr	r0, [pc, #412]	@ (8000b28 <HAL_UART_MspInit+0x254>)
 800098c:	f000 fbd4 	bl	8001138 <HAL_DMA_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000996:	f7ff ff65 	bl	8000864 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a62      	ldr	r2, [pc, #392]	@ (8000b28 <HAL_UART_MspInit+0x254>)
 800099e:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009a0:	4a61      	ldr	r2, [pc, #388]	@ (8000b28 <HAL_UART_MspInit+0x254>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80009a6:	4b62      	ldr	r3, [pc, #392]	@ (8000b30 <HAL_UART_MspInit+0x25c>)
 80009a8:	4a62      	ldr	r2, [pc, #392]	@ (8000b34 <HAL_UART_MspInit+0x260>)
 80009aa:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009ac:	4b60      	ldr	r3, [pc, #384]	@ (8000b30 <HAL_UART_MspInit+0x25c>)
 80009ae:	2210      	movs	r2, #16
 80009b0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009b2:	4b5f      	ldr	r3, [pc, #380]	@ (8000b30 <HAL_UART_MspInit+0x25c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009b8:	4b5d      	ldr	r3, [pc, #372]	@ (8000b30 <HAL_UART_MspInit+0x25c>)
 80009ba:	2280      	movs	r2, #128	@ 0x80
 80009bc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009be:	4b5c      	ldr	r3, [pc, #368]	@ (8000b30 <HAL_UART_MspInit+0x25c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009c4:	4b5a      	ldr	r3, [pc, #360]	@ (8000b30 <HAL_UART_MspInit+0x25c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80009ca:	4b59      	ldr	r3, [pc, #356]	@ (8000b30 <HAL_UART_MspInit+0x25c>)
 80009cc:	2220      	movs	r2, #32
 80009ce:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009d0:	4b57      	ldr	r3, [pc, #348]	@ (8000b30 <HAL_UART_MspInit+0x25c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80009d6:	4856      	ldr	r0, [pc, #344]	@ (8000b30 <HAL_UART_MspInit+0x25c>)
 80009d8:	f000 fbae 	bl	8001138 <HAL_DMA_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80009e2:	f7ff ff3f 	bl	8000864 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a51      	ldr	r2, [pc, #324]	@ (8000b30 <HAL_UART_MspInit+0x25c>)
 80009ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80009ec:	4a50      	ldr	r2, [pc, #320]	@ (8000b30 <HAL_UART_MspInit+0x25c>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	2025      	movs	r0, #37	@ 0x25
 80009f8:	f000 fb67 	bl	80010ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009fc:	2025      	movs	r0, #37	@ 0x25
 80009fe:	f000 fb80 	bl	8001102 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a02:	e12f      	b.n	8000c64 <HAL_UART_MspInit+0x390>
  else if(huart->Instance==USART2)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a4b      	ldr	r2, [pc, #300]	@ (8000b38 <HAL_UART_MspInit+0x264>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	f040 809e 	bne.w	8000b4c <HAL_UART_MspInit+0x278>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a10:	4b43      	ldr	r3, [pc, #268]	@ (8000b20 <HAL_UART_MspInit+0x24c>)
 8000a12:	69db      	ldr	r3, [r3, #28]
 8000a14:	4a42      	ldr	r2, [pc, #264]	@ (8000b20 <HAL_UART_MspInit+0x24c>)
 8000a16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a1a:	61d3      	str	r3, [r2, #28]
 8000a1c:	4b40      	ldr	r3, [pc, #256]	@ (8000b20 <HAL_UART_MspInit+0x24c>)
 8000a1e:	69db      	ldr	r3, [r3, #28]
 8000a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a28:	4b3d      	ldr	r3, [pc, #244]	@ (8000b20 <HAL_UART_MspInit+0x24c>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	4a3c      	ldr	r2, [pc, #240]	@ (8000b20 <HAL_UART_MspInit+0x24c>)
 8000a2e:	f043 0304 	orr.w	r3, r3, #4
 8000a32:	6193      	str	r3, [r2, #24]
 8000a34:	4b3a      	ldr	r3, [pc, #232]	@ (8000b20 <HAL_UART_MspInit+0x24c>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	f003 0304 	and.w	r3, r3, #4
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a40:	2304      	movs	r3, #4
 8000a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	f107 0320 	add.w	r3, r7, #32
 8000a50:	4619      	mov	r1, r3
 8000a52:	4834      	ldr	r0, [pc, #208]	@ (8000b24 <HAL_UART_MspInit+0x250>)
 8000a54:	f000 fe12 	bl	800167c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a58:	2308      	movs	r3, #8
 8000a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	f107 0320 	add.w	r3, r7, #32
 8000a68:	4619      	mov	r1, r3
 8000a6a:	482e      	ldr	r0, [pc, #184]	@ (8000b24 <HAL_UART_MspInit+0x250>)
 8000a6c:	f000 fe06 	bl	800167c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000a70:	4b32      	ldr	r3, [pc, #200]	@ (8000b3c <HAL_UART_MspInit+0x268>)
 8000a72:	4a33      	ldr	r2, [pc, #204]	@ (8000b40 <HAL_UART_MspInit+0x26c>)
 8000a74:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a76:	4b31      	ldr	r3, [pc, #196]	@ (8000b3c <HAL_UART_MspInit+0x268>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000b3c <HAL_UART_MspInit+0x268>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a82:	4b2e      	ldr	r3, [pc, #184]	@ (8000b3c <HAL_UART_MspInit+0x268>)
 8000a84:	2280      	movs	r2, #128	@ 0x80
 8000a86:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a88:	4b2c      	ldr	r3, [pc, #176]	@ (8000b3c <HAL_UART_MspInit+0x268>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a8e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b3c <HAL_UART_MspInit+0x268>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000a94:	4b29      	ldr	r3, [pc, #164]	@ (8000b3c <HAL_UART_MspInit+0x268>)
 8000a96:	2220      	movs	r2, #32
 8000a98:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a9a:	4b28      	ldr	r3, [pc, #160]	@ (8000b3c <HAL_UART_MspInit+0x268>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000aa0:	4826      	ldr	r0, [pc, #152]	@ (8000b3c <HAL_UART_MspInit+0x268>)
 8000aa2:	f000 fb49 	bl	8001138 <HAL_DMA_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8000aac:	f7ff feda 	bl	8000864 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a22      	ldr	r2, [pc, #136]	@ (8000b3c <HAL_UART_MspInit+0x268>)
 8000ab4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ab6:	4a21      	ldr	r2, [pc, #132]	@ (8000b3c <HAL_UART_MspInit+0x268>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000abc:	4b21      	ldr	r3, [pc, #132]	@ (8000b44 <HAL_UART_MspInit+0x270>)
 8000abe:	4a22      	ldr	r2, [pc, #136]	@ (8000b48 <HAL_UART_MspInit+0x274>)
 8000ac0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ac2:	4b20      	ldr	r3, [pc, #128]	@ (8000b44 <HAL_UART_MspInit+0x270>)
 8000ac4:	2210      	movs	r2, #16
 8000ac6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ac8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b44 <HAL_UART_MspInit+0x270>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ace:	4b1d      	ldr	r3, [pc, #116]	@ (8000b44 <HAL_UART_MspInit+0x270>)
 8000ad0:	2280      	movs	r2, #128	@ 0x80
 8000ad2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b44 <HAL_UART_MspInit+0x270>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ada:	4b1a      	ldr	r3, [pc, #104]	@ (8000b44 <HAL_UART_MspInit+0x270>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8000ae0:	4b18      	ldr	r3, [pc, #96]	@ (8000b44 <HAL_UART_MspInit+0x270>)
 8000ae2:	2220      	movs	r2, #32
 8000ae4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ae6:	4b17      	ldr	r3, [pc, #92]	@ (8000b44 <HAL_UART_MspInit+0x270>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000aec:	4815      	ldr	r0, [pc, #84]	@ (8000b44 <HAL_UART_MspInit+0x270>)
 8000aee:	f000 fb23 	bl	8001138 <HAL_DMA_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <HAL_UART_MspInit+0x228>
      Error_Handler();
 8000af8:	f7ff feb4 	bl	8000864 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a11      	ldr	r2, [pc, #68]	@ (8000b44 <HAL_UART_MspInit+0x270>)
 8000b00:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b02:	4a10      	ldr	r2, [pc, #64]	@ (8000b44 <HAL_UART_MspInit+0x270>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2026      	movs	r0, #38	@ 0x26
 8000b0e:	f000 fadc 	bl	80010ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b12:	2026      	movs	r0, #38	@ 0x26
 8000b14:	f000 faf5 	bl	8001102 <HAL_NVIC_EnableIRQ>
}
 8000b18:	e0a4      	b.n	8000c64 <HAL_UART_MspInit+0x390>
 8000b1a:	bf00      	nop
 8000b1c:	40013800 	.word	0x40013800
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40010800 	.word	0x40010800
 8000b28:	20000150 	.word	0x20000150
 8000b2c:	40020058 	.word	0x40020058
 8000b30:	20000194 	.word	0x20000194
 8000b34:	40020044 	.word	0x40020044
 8000b38:	40004400 	.word	0x40004400
 8000b3c:	200001d8 	.word	0x200001d8
 8000b40:	4002006c 	.word	0x4002006c
 8000b44:	2000021c 	.word	0x2000021c
 8000b48:	40020080 	.word	0x40020080
  else if(huart->Instance==USART3)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a46      	ldr	r2, [pc, #280]	@ (8000c6c <HAL_UART_MspInit+0x398>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	f040 8086 	bne.w	8000c64 <HAL_UART_MspInit+0x390>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b58:	4b45      	ldr	r3, [pc, #276]	@ (8000c70 <HAL_UART_MspInit+0x39c>)
 8000b5a:	69db      	ldr	r3, [r3, #28]
 8000b5c:	4a44      	ldr	r2, [pc, #272]	@ (8000c70 <HAL_UART_MspInit+0x39c>)
 8000b5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b62:	61d3      	str	r3, [r2, #28]
 8000b64:	4b42      	ldr	r3, [pc, #264]	@ (8000c70 <HAL_UART_MspInit+0x39c>)
 8000b66:	69db      	ldr	r3, [r3, #28]
 8000b68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b70:	4b3f      	ldr	r3, [pc, #252]	@ (8000c70 <HAL_UART_MspInit+0x39c>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	4a3e      	ldr	r2, [pc, #248]	@ (8000c70 <HAL_UART_MspInit+0x39c>)
 8000b76:	f043 0308 	orr.w	r3, r3, #8
 8000b7a:	6193      	str	r3, [r2, #24]
 8000b7c:	4b3c      	ldr	r3, [pc, #240]	@ (8000c70 <HAL_UART_MspInit+0x39c>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	f003 0308 	and.w	r3, r3, #8
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b92:	2303      	movs	r3, #3
 8000b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b96:	f107 0320 	add.w	r3, r7, #32
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4835      	ldr	r0, [pc, #212]	@ (8000c74 <HAL_UART_MspInit+0x3a0>)
 8000b9e:	f000 fd6d 	bl	800167c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ba2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	f107 0320 	add.w	r3, r7, #32
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	482f      	ldr	r0, [pc, #188]	@ (8000c74 <HAL_UART_MspInit+0x3a0>)
 8000bb8:	f000 fd60 	bl	800167c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000bbc:	4b2e      	ldr	r3, [pc, #184]	@ (8000c78 <HAL_UART_MspInit+0x3a4>)
 8000bbe:	4a2f      	ldr	r2, [pc, #188]	@ (8000c7c <HAL_UART_MspInit+0x3a8>)
 8000bc0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c78 <HAL_UART_MspInit+0x3a4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8000c78 <HAL_UART_MspInit+0x3a4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bce:	4b2a      	ldr	r3, [pc, #168]	@ (8000c78 <HAL_UART_MspInit+0x3a4>)
 8000bd0:	2280      	movs	r2, #128	@ 0x80
 8000bd2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bd4:	4b28      	ldr	r3, [pc, #160]	@ (8000c78 <HAL_UART_MspInit+0x3a4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bda:	4b27      	ldr	r3, [pc, #156]	@ (8000c78 <HAL_UART_MspInit+0x3a4>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000be0:	4b25      	ldr	r3, [pc, #148]	@ (8000c78 <HAL_UART_MspInit+0x3a4>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000be6:	4b24      	ldr	r3, [pc, #144]	@ (8000c78 <HAL_UART_MspInit+0x3a4>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000bec:	4822      	ldr	r0, [pc, #136]	@ (8000c78 <HAL_UART_MspInit+0x3a4>)
 8000bee:	f000 faa3 	bl	8001138 <HAL_DMA_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <HAL_UART_MspInit+0x328>
      Error_Handler();
 8000bf8:	f7ff fe34 	bl	8000864 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8000c78 <HAL_UART_MspInit+0x3a4>)
 8000c00:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c02:	4a1d      	ldr	r2, [pc, #116]	@ (8000c78 <HAL_UART_MspInit+0x3a4>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8000c08:	4b1d      	ldr	r3, [pc, #116]	@ (8000c80 <HAL_UART_MspInit+0x3ac>)
 8000c0a:	4a1e      	ldr	r2, [pc, #120]	@ (8000c84 <HAL_UART_MspInit+0x3b0>)
 8000c0c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c80 <HAL_UART_MspInit+0x3ac>)
 8000c10:	2210      	movs	r2, #16
 8000c12:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c14:	4b1a      	ldr	r3, [pc, #104]	@ (8000c80 <HAL_UART_MspInit+0x3ac>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c1a:	4b19      	ldr	r3, [pc, #100]	@ (8000c80 <HAL_UART_MspInit+0x3ac>)
 8000c1c:	2280      	movs	r2, #128	@ 0x80
 8000c1e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c20:	4b17      	ldr	r3, [pc, #92]	@ (8000c80 <HAL_UART_MspInit+0x3ac>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c26:	4b16      	ldr	r3, [pc, #88]	@ (8000c80 <HAL_UART_MspInit+0x3ac>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000c2c:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <HAL_UART_MspInit+0x3ac>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c32:	4b13      	ldr	r3, [pc, #76]	@ (8000c80 <HAL_UART_MspInit+0x3ac>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000c38:	4811      	ldr	r0, [pc, #68]	@ (8000c80 <HAL_UART_MspInit+0x3ac>)
 8000c3a:	f000 fa7d 	bl	8001138 <HAL_DMA_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <HAL_UART_MspInit+0x374>
      Error_Handler();
 8000c44:	f7ff fe0e 	bl	8000864 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a0d      	ldr	r2, [pc, #52]	@ (8000c80 <HAL_UART_MspInit+0x3ac>)
 8000c4c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c4e:	4a0c      	ldr	r2, [pc, #48]	@ (8000c80 <HAL_UART_MspInit+0x3ac>)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2100      	movs	r1, #0
 8000c58:	2027      	movs	r0, #39	@ 0x27
 8000c5a:	f000 fa36 	bl	80010ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c5e:	2027      	movs	r0, #39	@ 0x27
 8000c60:	f000 fa4f 	bl	8001102 <HAL_NVIC_EnableIRQ>
}
 8000c64:	bf00      	nop
 8000c66:	3730      	adds	r7, #48	@ 0x30
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40004800 	.word	0x40004800
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40010c00 	.word	0x40010c00
 8000c78:	20000260 	.word	0x20000260
 8000c7c:	40020030 	.word	0x40020030
 8000c80:	200002a4 	.word	0x200002a4
 8000c84:	4002001c 	.word	0x4002001c

08000c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <NMI_Handler+0x4>

08000c90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <MemManage_Handler+0x4>

08000ca0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <UsageFault_Handler+0x4>

08000cb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr

08000cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f904 	bl	8000ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000ce4:	4802      	ldr	r0, [pc, #8]	@ (8000cf0 <DMA1_Channel2_IRQHandler+0x10>)
 8000ce6:	f000 fb95 	bl	8001414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200002a4 	.word	0x200002a4

08000cf4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000cf8:	4802      	ldr	r0, [pc, #8]	@ (8000d04 <DMA1_Channel3_IRQHandler+0x10>)
 8000cfa:	f000 fb8b 	bl	8001414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000260 	.word	0x20000260

08000d08 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000d0c:	4802      	ldr	r0, [pc, #8]	@ (8000d18 <DMA1_Channel4_IRQHandler+0x10>)
 8000d0e:	f000 fb81 	bl	8001414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000194 	.word	0x20000194

08000d1c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d20:	4802      	ldr	r0, [pc, #8]	@ (8000d2c <DMA1_Channel5_IRQHandler+0x10>)
 8000d22:	f000 fb77 	bl	8001414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000150 	.word	0x20000150

08000d30 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000d34:	4802      	ldr	r0, [pc, #8]	@ (8000d40 <DMA1_Channel6_IRQHandler+0x10>)
 8000d36:	f000 fb6d 	bl	8001414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200001d8 	.word	0x200001d8

08000d44 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000d48:	4802      	ldr	r0, [pc, #8]	@ (8000d54 <DMA1_Channel7_IRQHandler+0x10>)
 8000d4a:	f000 fb63 	bl	8001414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	2000021c 	.word	0x2000021c

08000d58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d5c:	4802      	ldr	r0, [pc, #8]	@ (8000d68 <USART1_IRQHandler+0x10>)
 8000d5e:	f001 fba3 	bl	80024a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000078 	.word	0x20000078

08000d6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d70:	4802      	ldr	r0, [pc, #8]	@ (8000d7c <USART2_IRQHandler+0x10>)
 8000d72:	f001 fb99 	bl	80024a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200000c0 	.word	0x200000c0

08000d80 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d84:	4802      	ldr	r0, [pc, #8]	@ (8000d90 <USART3_IRQHandler+0x10>)
 8000d86:	f001 fb8f 	bl	80024a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000108 	.word	0x20000108

08000d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d9c:	4a14      	ldr	r2, [pc, #80]	@ (8000df0 <_sbrk+0x5c>)
 8000d9e:	4b15      	ldr	r3, [pc, #84]	@ (8000df4 <_sbrk+0x60>)
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da8:	4b13      	ldr	r3, [pc, #76]	@ (8000df8 <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d102      	bne.n	8000db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db0:	4b11      	ldr	r3, [pc, #68]	@ (8000df8 <_sbrk+0x64>)
 8000db2:	4a12      	ldr	r2, [pc, #72]	@ (8000dfc <_sbrk+0x68>)
 8000db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db6:	4b10      	ldr	r3, [pc, #64]	@ (8000df8 <_sbrk+0x64>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d207      	bcs.n	8000dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc4:	f002 fa92 	bl	80032ec <__errno>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	220c      	movs	r2, #12
 8000dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd2:	e009      	b.n	8000de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd4:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dda:	4b07      	ldr	r3, [pc, #28]	@ (8000df8 <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	4a05      	ldr	r2, [pc, #20]	@ (8000df8 <_sbrk+0x64>)
 8000de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de6:	68fb      	ldr	r3, [r7, #12]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20005000 	.word	0x20005000
 8000df4:	00000400 	.word	0x00000400
 8000df8:	20001140 	.word	0x20001140
 8000dfc:	20001290 	.word	0x20001290

08000e00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e0c:	f7ff fff8 	bl	8000e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e10:	480b      	ldr	r0, [pc, #44]	@ (8000e40 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e12:	490c      	ldr	r1, [pc, #48]	@ (8000e44 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e14:	4a0c      	ldr	r2, [pc, #48]	@ (8000e48 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e18:	e002      	b.n	8000e20 <LoopCopyDataInit>

08000e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1e:	3304      	adds	r3, #4

08000e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e24:	d3f9      	bcc.n	8000e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e26:	4a09      	ldr	r2, [pc, #36]	@ (8000e4c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e28:	4c09      	ldr	r4, [pc, #36]	@ (8000e50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e2c:	e001      	b.n	8000e32 <LoopFillZerobss>

08000e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e30:	3204      	adds	r2, #4

08000e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e34:	d3fb      	bcc.n	8000e2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e36:	f002 fa5f 	bl	80032f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e3a:	f7ff fb6f 	bl	800051c <main>
  bx lr
 8000e3e:	4770      	bx	lr
  ldr r0, =_sdata
 8000e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e44:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e48:	08003d54 	.word	0x08003d54
  ldr r2, =_sbss
 8000e4c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e50:	20001290 	.word	0x20001290

08000e54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC1_2_IRQHandler>
	...

08000e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5c:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <HAL_Init+0x28>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a07      	ldr	r2, [pc, #28]	@ (8000e80 <HAL_Init+0x28>)
 8000e62:	f043 0310 	orr.w	r3, r3, #16
 8000e66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f000 f923 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6e:	200f      	movs	r0, #15
 8000e70:	f000 f808 	bl	8000e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e74:	f7ff fcfc 	bl	8000870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40022000 	.word	0x40022000

08000e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <HAL_InitTick+0x54>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <HAL_InitTick+0x58>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f93b 	bl	800111e <HAL_SYSTICK_Config>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00e      	b.n	8000ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b0f      	cmp	r3, #15
 8000eb6:	d80a      	bhi.n	8000ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec0:	f000 f903 	bl	80010ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec4:	4a06      	ldr	r2, [pc, #24]	@ (8000ee0 <HAL_InitTick+0x5c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e000      	b.n	8000ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	20000004 	.word	0x20000004

08000ee4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee8:	4b05      	ldr	r3, [pc, #20]	@ (8000f00 <HAL_IncTick+0x1c>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b05      	ldr	r3, [pc, #20]	@ (8000f04 <HAL_IncTick+0x20>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a03      	ldr	r2, [pc, #12]	@ (8000f04 <HAL_IncTick+0x20>)
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	20000008 	.word	0x20000008
 8000f04:	20001144 	.word	0x20001144

08000f08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f0c:	4b02      	ldr	r3, [pc, #8]	@ (8000f18 <HAL_GetTick+0x10>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	20001144 	.word	0x20001144

08000f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4e:	4a04      	ldr	r2, [pc, #16]	@ (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	60d3      	str	r3, [r2, #12]
}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f68:	4b04      	ldr	r3, [pc, #16]	@ (8000f7c <__NVIC_GetPriorityGrouping+0x18>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	f003 0307 	and.w	r3, r3, #7
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	db0b      	blt.n	8000faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f003 021f 	and.w	r2, r3, #31
 8000f98:	4906      	ldr	r1, [pc, #24]	@ (8000fb4 <__NVIC_EnableIRQ+0x34>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	095b      	lsrs	r3, r3, #5
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	e000e100 	.word	0xe000e100

08000fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	db0a      	blt.n	8000fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	490c      	ldr	r1, [pc, #48]	@ (8001004 <__NVIC_SetPriority+0x4c>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	0112      	lsls	r2, r2, #4
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	440b      	add	r3, r1
 8000fdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe0:	e00a      	b.n	8000ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4908      	ldr	r1, [pc, #32]	@ (8001008 <__NVIC_SetPriority+0x50>)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	3b04      	subs	r3, #4
 8000ff0:	0112      	lsls	r2, r2, #4
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	761a      	strb	r2, [r3, #24]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000e100 	.word	0xe000e100
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	@ 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f1c3 0307 	rsb	r3, r3, #7
 8001026:	2b04      	cmp	r3, #4
 8001028:	bf28      	it	cs
 800102a:	2304      	movcs	r3, #4
 800102c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3304      	adds	r3, #4
 8001032:	2b06      	cmp	r3, #6
 8001034:	d902      	bls.n	800103c <NVIC_EncodePriority+0x30>
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3b03      	subs	r3, #3
 800103a:	e000      	b.n	800103e <NVIC_EncodePriority+0x32>
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	f04f 32ff 	mov.w	r2, #4294967295
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43da      	mvns	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001054:	f04f 31ff 	mov.w	r1, #4294967295
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43d9      	mvns	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	4313      	orrs	r3, r2
         );
}
 8001066:	4618      	mov	r0, r3
 8001068:	3724      	adds	r7, #36	@ 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr

08001070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001080:	d301      	bcc.n	8001086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001082:	2301      	movs	r3, #1
 8001084:	e00f      	b.n	80010a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001086:	4a0a      	ldr	r2, [pc, #40]	@ (80010b0 <SysTick_Config+0x40>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108e:	210f      	movs	r1, #15
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f7ff ff90 	bl	8000fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001098:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <SysTick_Config+0x40>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109e:	4b04      	ldr	r3, [pc, #16]	@ (80010b0 <SysTick_Config+0x40>)
 80010a0:	2207      	movs	r2, #7
 80010a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	e000e010 	.word	0xe000e010

080010b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff2d 	bl	8000f1c <__NVIC_SetPriorityGrouping>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010dc:	f7ff ff42 	bl	8000f64 <__NVIC_GetPriorityGrouping>
 80010e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	6978      	ldr	r0, [r7, #20]
 80010e8:	f7ff ff90 	bl	800100c <NVIC_EncodePriority>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff5f 	bl	8000fb8 <__NVIC_SetPriority>
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800110c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff35 	bl	8000f80 <__NVIC_EnableIRQ>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ffa2 	bl	8001070 <SysTick_Config>
 800112c:	4603      	mov	r3, r0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e043      	b.n	80011d6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	4b22      	ldr	r3, [pc, #136]	@ (80011e0 <HAL_DMA_Init+0xa8>)
 8001156:	4413      	add	r3, r2
 8001158:	4a22      	ldr	r2, [pc, #136]	@ (80011e4 <HAL_DMA_Init+0xac>)
 800115a:	fba2 2303 	umull	r2, r3, r2, r3
 800115e:	091b      	lsrs	r3, r3, #4
 8001160:	009a      	lsls	r2, r3, #2
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a1f      	ldr	r2, [pc, #124]	@ (80011e8 <HAL_DMA_Init+0xb0>)
 800116a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2202      	movs	r2, #2
 8001170:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001182:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001186:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001190:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800119c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2201      	movs	r2, #1
 80011c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	bffdfff8 	.word	0xbffdfff8
 80011e4:	cccccccd 	.word	0xcccccccd
 80011e8:	40020000 	.word	0x40020000

080011ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d101      	bne.n	800120c <HAL_DMA_Start_IT+0x20>
 8001208:	2302      	movs	r3, #2
 800120a:	e04b      	b.n	80012a4 <HAL_DMA_Start_IT+0xb8>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2201      	movs	r2, #1
 8001210:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b01      	cmp	r3, #1
 800121e:	d13a      	bne.n	8001296 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2202      	movs	r2, #2
 8001224:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2200      	movs	r2, #0
 800122c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f022 0201 	bic.w	r2, r2, #1
 800123c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	68b9      	ldr	r1, [r7, #8]
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f000 f9eb 	bl	8001620 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800124e:	2b00      	cmp	r3, #0
 8001250:	d008      	beq.n	8001264 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f042 020e 	orr.w	r2, r2, #14
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	e00f      	b.n	8001284 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f022 0204 	bic.w	r2, r2, #4
 8001272:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f042 020a 	orr.w	r2, r2, #10
 8001282:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f042 0201 	orr.w	r2, r2, #1
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	e005      	b.n	80012a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800129e:	2302      	movs	r3, #2
 80012a0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80012a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012b4:	2300      	movs	r3, #0
 80012b6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d008      	beq.n	80012d6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2204      	movs	r2, #4
 80012c8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e020      	b.n	8001318 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 020e 	bic.w	r2, r2, #14
 80012e4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 0201 	bic.w	r2, r2, #1
 80012f4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012fe:	2101      	movs	r1, #1
 8001300:	fa01 f202 	lsl.w	r2, r1, r2
 8001304:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2201      	movs	r2, #1
 800130a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001316:	7bfb      	ldrb	r3, [r7, #15]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
	...

08001324 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800132c:	2300      	movs	r3, #0
 800132e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d005      	beq.n	8001348 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2204      	movs	r2, #4
 8001340:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	73fb      	strb	r3, [r7, #15]
 8001346:	e051      	b.n	80013ec <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 020e 	bic.w	r2, r2, #14
 8001356:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0201 	bic.w	r2, r2, #1
 8001366:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a22      	ldr	r2, [pc, #136]	@ (80013f8 <HAL_DMA_Abort_IT+0xd4>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d029      	beq.n	80013c6 <HAL_DMA_Abort_IT+0xa2>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a21      	ldr	r2, [pc, #132]	@ (80013fc <HAL_DMA_Abort_IT+0xd8>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d022      	beq.n	80013c2 <HAL_DMA_Abort_IT+0x9e>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a1f      	ldr	r2, [pc, #124]	@ (8001400 <HAL_DMA_Abort_IT+0xdc>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d01a      	beq.n	80013bc <HAL_DMA_Abort_IT+0x98>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a1e      	ldr	r2, [pc, #120]	@ (8001404 <HAL_DMA_Abort_IT+0xe0>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d012      	beq.n	80013b6 <HAL_DMA_Abort_IT+0x92>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a1c      	ldr	r2, [pc, #112]	@ (8001408 <HAL_DMA_Abort_IT+0xe4>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d00a      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x8c>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a1b      	ldr	r2, [pc, #108]	@ (800140c <HAL_DMA_Abort_IT+0xe8>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d102      	bne.n	80013aa <HAL_DMA_Abort_IT+0x86>
 80013a4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80013a8:	e00e      	b.n	80013c8 <HAL_DMA_Abort_IT+0xa4>
 80013aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80013ae:	e00b      	b.n	80013c8 <HAL_DMA_Abort_IT+0xa4>
 80013b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013b4:	e008      	b.n	80013c8 <HAL_DMA_Abort_IT+0xa4>
 80013b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ba:	e005      	b.n	80013c8 <HAL_DMA_Abort_IT+0xa4>
 80013bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013c0:	e002      	b.n	80013c8 <HAL_DMA_Abort_IT+0xa4>
 80013c2:	2310      	movs	r3, #16
 80013c4:	e000      	b.n	80013c8 <HAL_DMA_Abort_IT+0xa4>
 80013c6:	2301      	movs	r3, #1
 80013c8:	4a11      	ldr	r2, [pc, #68]	@ (8001410 <HAL_DMA_Abort_IT+0xec>)
 80013ca:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	4798      	blx	r3
    } 
  }
  return status;
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40020008 	.word	0x40020008
 80013fc:	4002001c 	.word	0x4002001c
 8001400:	40020030 	.word	0x40020030
 8001404:	40020044 	.word	0x40020044
 8001408:	40020058 	.word	0x40020058
 800140c:	4002006c 	.word	0x4002006c
 8001410:	40020000 	.word	0x40020000

08001414 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001430:	2204      	movs	r2, #4
 8001432:	409a      	lsls	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4013      	ands	r3, r2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d04f      	beq.n	80014dc <HAL_DMA_IRQHandler+0xc8>
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	2b00      	cmp	r3, #0
 8001444:	d04a      	beq.n	80014dc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0320 	and.w	r3, r3, #32
 8001450:	2b00      	cmp	r3, #0
 8001452:	d107      	bne.n	8001464 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 0204 	bic.w	r2, r2, #4
 8001462:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a66      	ldr	r2, [pc, #408]	@ (8001604 <HAL_DMA_IRQHandler+0x1f0>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d029      	beq.n	80014c2 <HAL_DMA_IRQHandler+0xae>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a65      	ldr	r2, [pc, #404]	@ (8001608 <HAL_DMA_IRQHandler+0x1f4>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d022      	beq.n	80014be <HAL_DMA_IRQHandler+0xaa>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a63      	ldr	r2, [pc, #396]	@ (800160c <HAL_DMA_IRQHandler+0x1f8>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d01a      	beq.n	80014b8 <HAL_DMA_IRQHandler+0xa4>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a62      	ldr	r2, [pc, #392]	@ (8001610 <HAL_DMA_IRQHandler+0x1fc>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d012      	beq.n	80014b2 <HAL_DMA_IRQHandler+0x9e>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a60      	ldr	r2, [pc, #384]	@ (8001614 <HAL_DMA_IRQHandler+0x200>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d00a      	beq.n	80014ac <HAL_DMA_IRQHandler+0x98>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a5f      	ldr	r2, [pc, #380]	@ (8001618 <HAL_DMA_IRQHandler+0x204>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d102      	bne.n	80014a6 <HAL_DMA_IRQHandler+0x92>
 80014a0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014a4:	e00e      	b.n	80014c4 <HAL_DMA_IRQHandler+0xb0>
 80014a6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80014aa:	e00b      	b.n	80014c4 <HAL_DMA_IRQHandler+0xb0>
 80014ac:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80014b0:	e008      	b.n	80014c4 <HAL_DMA_IRQHandler+0xb0>
 80014b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014b6:	e005      	b.n	80014c4 <HAL_DMA_IRQHandler+0xb0>
 80014b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014bc:	e002      	b.n	80014c4 <HAL_DMA_IRQHandler+0xb0>
 80014be:	2340      	movs	r3, #64	@ 0x40
 80014c0:	e000      	b.n	80014c4 <HAL_DMA_IRQHandler+0xb0>
 80014c2:	2304      	movs	r3, #4
 80014c4:	4a55      	ldr	r2, [pc, #340]	@ (800161c <HAL_DMA_IRQHandler+0x208>)
 80014c6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 8094 	beq.w	80015fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80014da:	e08e      	b.n	80015fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e0:	2202      	movs	r2, #2
 80014e2:	409a      	lsls	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4013      	ands	r3, r2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d056      	beq.n	800159a <HAL_DMA_IRQHandler+0x186>
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d051      	beq.n	800159a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0320 	and.w	r3, r3, #32
 8001500:	2b00      	cmp	r3, #0
 8001502:	d10b      	bne.n	800151c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 020a 	bic.w	r2, r2, #10
 8001512:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a38      	ldr	r2, [pc, #224]	@ (8001604 <HAL_DMA_IRQHandler+0x1f0>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d029      	beq.n	800157a <HAL_DMA_IRQHandler+0x166>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a37      	ldr	r2, [pc, #220]	@ (8001608 <HAL_DMA_IRQHandler+0x1f4>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d022      	beq.n	8001576 <HAL_DMA_IRQHandler+0x162>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a35      	ldr	r2, [pc, #212]	@ (800160c <HAL_DMA_IRQHandler+0x1f8>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d01a      	beq.n	8001570 <HAL_DMA_IRQHandler+0x15c>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a34      	ldr	r2, [pc, #208]	@ (8001610 <HAL_DMA_IRQHandler+0x1fc>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d012      	beq.n	800156a <HAL_DMA_IRQHandler+0x156>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a32      	ldr	r2, [pc, #200]	@ (8001614 <HAL_DMA_IRQHandler+0x200>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d00a      	beq.n	8001564 <HAL_DMA_IRQHandler+0x150>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a31      	ldr	r2, [pc, #196]	@ (8001618 <HAL_DMA_IRQHandler+0x204>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d102      	bne.n	800155e <HAL_DMA_IRQHandler+0x14a>
 8001558:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800155c:	e00e      	b.n	800157c <HAL_DMA_IRQHandler+0x168>
 800155e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001562:	e00b      	b.n	800157c <HAL_DMA_IRQHandler+0x168>
 8001564:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001568:	e008      	b.n	800157c <HAL_DMA_IRQHandler+0x168>
 800156a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800156e:	e005      	b.n	800157c <HAL_DMA_IRQHandler+0x168>
 8001570:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001574:	e002      	b.n	800157c <HAL_DMA_IRQHandler+0x168>
 8001576:	2320      	movs	r3, #32
 8001578:	e000      	b.n	800157c <HAL_DMA_IRQHandler+0x168>
 800157a:	2302      	movs	r3, #2
 800157c:	4a27      	ldr	r2, [pc, #156]	@ (800161c <HAL_DMA_IRQHandler+0x208>)
 800157e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800158c:	2b00      	cmp	r3, #0
 800158e:	d034      	beq.n	80015fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001598:	e02f      	b.n	80015fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	2208      	movs	r2, #8
 80015a0:	409a      	lsls	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4013      	ands	r3, r2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d028      	beq.n	80015fc <HAL_DMA_IRQHandler+0x1e8>
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	f003 0308 	and.w	r3, r3, #8
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d023      	beq.n	80015fc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 020e 	bic.w	r2, r2, #14
 80015c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015cc:	2101      	movs	r1, #1
 80015ce:	fa01 f202 	lsl.w	r2, r1, r2
 80015d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d004      	beq.n	80015fc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	4798      	blx	r3
    }
  }
  return;
 80015fa:	bf00      	nop
 80015fc:	bf00      	nop
}
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40020008 	.word	0x40020008
 8001608:	4002001c 	.word	0x4002001c
 800160c:	40020030 	.word	0x40020030
 8001610:	40020044 	.word	0x40020044
 8001614:	40020058 	.word	0x40020058
 8001618:	4002006c 	.word	0x4002006c
 800161c:	40020000 	.word	0x40020000

08001620 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001636:	2101      	movs	r1, #1
 8001638:	fa01 f202 	lsl.w	r2, r1, r2
 800163c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b10      	cmp	r3, #16
 800164c:	d108      	bne.n	8001660 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800165e:	e007      	b.n	8001670 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	60da      	str	r2, [r3, #12]
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
	...

0800167c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800167c:	b480      	push	{r7}
 800167e:	b08b      	sub	sp, #44	@ 0x2c
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001686:	2300      	movs	r3, #0
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168e:	e169      	b.n	8001964 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001690:	2201      	movs	r2, #1
 8001692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	69fa      	ldr	r2, [r7, #28]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	f040 8158 	bne.w	800195e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	4a9a      	ldr	r2, [pc, #616]	@ (800191c <HAL_GPIO_Init+0x2a0>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d05e      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016b8:	4a98      	ldr	r2, [pc, #608]	@ (800191c <HAL_GPIO_Init+0x2a0>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d875      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016be:	4a98      	ldr	r2, [pc, #608]	@ (8001920 <HAL_GPIO_Init+0x2a4>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d058      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016c4:	4a96      	ldr	r2, [pc, #600]	@ (8001920 <HAL_GPIO_Init+0x2a4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d86f      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016ca:	4a96      	ldr	r2, [pc, #600]	@ (8001924 <HAL_GPIO_Init+0x2a8>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d052      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016d0:	4a94      	ldr	r2, [pc, #592]	@ (8001924 <HAL_GPIO_Init+0x2a8>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d869      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016d6:	4a94      	ldr	r2, [pc, #592]	@ (8001928 <HAL_GPIO_Init+0x2ac>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d04c      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016dc:	4a92      	ldr	r2, [pc, #584]	@ (8001928 <HAL_GPIO_Init+0x2ac>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d863      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016e2:	4a92      	ldr	r2, [pc, #584]	@ (800192c <HAL_GPIO_Init+0x2b0>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d046      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016e8:	4a90      	ldr	r2, [pc, #576]	@ (800192c <HAL_GPIO_Init+0x2b0>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d85d      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016ee:	2b12      	cmp	r3, #18
 80016f0:	d82a      	bhi.n	8001748 <HAL_GPIO_Init+0xcc>
 80016f2:	2b12      	cmp	r3, #18
 80016f4:	d859      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016f6:	a201      	add	r2, pc, #4	@ (adr r2, 80016fc <HAL_GPIO_Init+0x80>)
 80016f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016fc:	08001777 	.word	0x08001777
 8001700:	08001751 	.word	0x08001751
 8001704:	08001763 	.word	0x08001763
 8001708:	080017a5 	.word	0x080017a5
 800170c:	080017ab 	.word	0x080017ab
 8001710:	080017ab 	.word	0x080017ab
 8001714:	080017ab 	.word	0x080017ab
 8001718:	080017ab 	.word	0x080017ab
 800171c:	080017ab 	.word	0x080017ab
 8001720:	080017ab 	.word	0x080017ab
 8001724:	080017ab 	.word	0x080017ab
 8001728:	080017ab 	.word	0x080017ab
 800172c:	080017ab 	.word	0x080017ab
 8001730:	080017ab 	.word	0x080017ab
 8001734:	080017ab 	.word	0x080017ab
 8001738:	080017ab 	.word	0x080017ab
 800173c:	080017ab 	.word	0x080017ab
 8001740:	08001759 	.word	0x08001759
 8001744:	0800176d 	.word	0x0800176d
 8001748:	4a79      	ldr	r2, [pc, #484]	@ (8001930 <HAL_GPIO_Init+0x2b4>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d013      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800174e:	e02c      	b.n	80017aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	623b      	str	r3, [r7, #32]
          break;
 8001756:	e029      	b.n	80017ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	3304      	adds	r3, #4
 800175e:	623b      	str	r3, [r7, #32]
          break;
 8001760:	e024      	b.n	80017ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	3308      	adds	r3, #8
 8001768:	623b      	str	r3, [r7, #32]
          break;
 800176a:	e01f      	b.n	80017ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	330c      	adds	r3, #12
 8001772:	623b      	str	r3, [r7, #32]
          break;
 8001774:	e01a      	b.n	80017ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d102      	bne.n	8001784 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800177e:	2304      	movs	r3, #4
 8001780:	623b      	str	r3, [r7, #32]
          break;
 8001782:	e013      	b.n	80017ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d105      	bne.n	8001798 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800178c:	2308      	movs	r3, #8
 800178e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69fa      	ldr	r2, [r7, #28]
 8001794:	611a      	str	r2, [r3, #16]
          break;
 8001796:	e009      	b.n	80017ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001798:	2308      	movs	r3, #8
 800179a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69fa      	ldr	r2, [r7, #28]
 80017a0:	615a      	str	r2, [r3, #20]
          break;
 80017a2:	e003      	b.n	80017ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017a4:	2300      	movs	r3, #0
 80017a6:	623b      	str	r3, [r7, #32]
          break;
 80017a8:	e000      	b.n	80017ac <HAL_GPIO_Init+0x130>
          break;
 80017aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	2bff      	cmp	r3, #255	@ 0xff
 80017b0:	d801      	bhi.n	80017b6 <HAL_GPIO_Init+0x13a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	e001      	b.n	80017ba <HAL_GPIO_Init+0x13e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3304      	adds	r3, #4
 80017ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	2bff      	cmp	r3, #255	@ 0xff
 80017c0:	d802      	bhi.n	80017c8 <HAL_GPIO_Init+0x14c>
 80017c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	e002      	b.n	80017ce <HAL_GPIO_Init+0x152>
 80017c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ca:	3b08      	subs	r3, #8
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	210f      	movs	r1, #15
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	fa01 f303 	lsl.w	r3, r1, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	401a      	ands	r2, r3
 80017e0:	6a39      	ldr	r1, [r7, #32]
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	fa01 f303 	lsl.w	r3, r1, r3
 80017e8:	431a      	orrs	r2, r3
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 80b1 	beq.w	800195e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001934 <HAL_GPIO_Init+0x2b8>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	4a4c      	ldr	r2, [pc, #304]	@ (8001934 <HAL_GPIO_Init+0x2b8>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6193      	str	r3, [r2, #24]
 8001808:	4b4a      	ldr	r3, [pc, #296]	@ (8001934 <HAL_GPIO_Init+0x2b8>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001814:	4a48      	ldr	r2, [pc, #288]	@ (8001938 <HAL_GPIO_Init+0x2bc>)
 8001816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001818:	089b      	lsrs	r3, r3, #2
 800181a:	3302      	adds	r3, #2
 800181c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001820:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	220f      	movs	r2, #15
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	4013      	ands	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a40      	ldr	r2, [pc, #256]	@ (800193c <HAL_GPIO_Init+0x2c0>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d013      	beq.n	8001868 <HAL_GPIO_Init+0x1ec>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a3f      	ldr	r2, [pc, #252]	@ (8001940 <HAL_GPIO_Init+0x2c4>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d00d      	beq.n	8001864 <HAL_GPIO_Init+0x1e8>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a3e      	ldr	r2, [pc, #248]	@ (8001944 <HAL_GPIO_Init+0x2c8>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d007      	beq.n	8001860 <HAL_GPIO_Init+0x1e4>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a3d      	ldr	r2, [pc, #244]	@ (8001948 <HAL_GPIO_Init+0x2cc>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d101      	bne.n	800185c <HAL_GPIO_Init+0x1e0>
 8001858:	2303      	movs	r3, #3
 800185a:	e006      	b.n	800186a <HAL_GPIO_Init+0x1ee>
 800185c:	2304      	movs	r3, #4
 800185e:	e004      	b.n	800186a <HAL_GPIO_Init+0x1ee>
 8001860:	2302      	movs	r3, #2
 8001862:	e002      	b.n	800186a <HAL_GPIO_Init+0x1ee>
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <HAL_GPIO_Init+0x1ee>
 8001868:	2300      	movs	r3, #0
 800186a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800186c:	f002 0203 	and.w	r2, r2, #3
 8001870:	0092      	lsls	r2, r2, #2
 8001872:	4093      	lsls	r3, r2
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	4313      	orrs	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800187a:	492f      	ldr	r1, [pc, #188]	@ (8001938 <HAL_GPIO_Init+0x2bc>)
 800187c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187e:	089b      	lsrs	r3, r3, #2
 8001880:	3302      	adds	r3, #2
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d006      	beq.n	80018a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001894:	4b2d      	ldr	r3, [pc, #180]	@ (800194c <HAL_GPIO_Init+0x2d0>)
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	492c      	ldr	r1, [pc, #176]	@ (800194c <HAL_GPIO_Init+0x2d0>)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	608b      	str	r3, [r1, #8]
 80018a0:	e006      	b.n	80018b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018a2:	4b2a      	ldr	r3, [pc, #168]	@ (800194c <HAL_GPIO_Init+0x2d0>)
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	4928      	ldr	r1, [pc, #160]	@ (800194c <HAL_GPIO_Init+0x2d0>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d006      	beq.n	80018ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018bc:	4b23      	ldr	r3, [pc, #140]	@ (800194c <HAL_GPIO_Init+0x2d0>)
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	4922      	ldr	r1, [pc, #136]	@ (800194c <HAL_GPIO_Init+0x2d0>)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	60cb      	str	r3, [r1, #12]
 80018c8:	e006      	b.n	80018d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018ca:	4b20      	ldr	r3, [pc, #128]	@ (800194c <HAL_GPIO_Init+0x2d0>)
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	491e      	ldr	r1, [pc, #120]	@ (800194c <HAL_GPIO_Init+0x2d0>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d006      	beq.n	80018f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018e4:	4b19      	ldr	r3, [pc, #100]	@ (800194c <HAL_GPIO_Init+0x2d0>)
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	4918      	ldr	r1, [pc, #96]	@ (800194c <HAL_GPIO_Init+0x2d0>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	604b      	str	r3, [r1, #4]
 80018f0:	e006      	b.n	8001900 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018f2:	4b16      	ldr	r3, [pc, #88]	@ (800194c <HAL_GPIO_Init+0x2d0>)
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	4914      	ldr	r1, [pc, #80]	@ (800194c <HAL_GPIO_Init+0x2d0>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d021      	beq.n	8001950 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800190c:	4b0f      	ldr	r3, [pc, #60]	@ (800194c <HAL_GPIO_Init+0x2d0>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	490e      	ldr	r1, [pc, #56]	@ (800194c <HAL_GPIO_Init+0x2d0>)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	600b      	str	r3, [r1, #0]
 8001918:	e021      	b.n	800195e <HAL_GPIO_Init+0x2e2>
 800191a:	bf00      	nop
 800191c:	10320000 	.word	0x10320000
 8001920:	10310000 	.word	0x10310000
 8001924:	10220000 	.word	0x10220000
 8001928:	10210000 	.word	0x10210000
 800192c:	10120000 	.word	0x10120000
 8001930:	10110000 	.word	0x10110000
 8001934:	40021000 	.word	0x40021000
 8001938:	40010000 	.word	0x40010000
 800193c:	40010800 	.word	0x40010800
 8001940:	40010c00 	.word	0x40010c00
 8001944:	40011000 	.word	0x40011000
 8001948:	40011400 	.word	0x40011400
 800194c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001950:	4b0b      	ldr	r3, [pc, #44]	@ (8001980 <HAL_GPIO_Init+0x304>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	43db      	mvns	r3, r3
 8001958:	4909      	ldr	r1, [pc, #36]	@ (8001980 <HAL_GPIO_Init+0x304>)
 800195a:	4013      	ands	r3, r2
 800195c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800195e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001960:	3301      	adds	r3, #1
 8001962:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196a:	fa22 f303 	lsr.w	r3, r2, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	f47f ae8e 	bne.w	8001690 <HAL_GPIO_Init+0x14>
  }
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	372c      	adds	r7, #44	@ 0x2c
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	40010400 	.word	0x40010400

08001984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	807b      	strh	r3, [r7, #2]
 8001990:	4613      	mov	r3, r2
 8001992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001994:	787b      	ldrb	r3, [r7, #1]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800199a:	887a      	ldrh	r2, [r7, #2]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019a0:	e003      	b.n	80019aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019a2:	887b      	ldrh	r3, [r7, #2]
 80019a4:	041a      	lsls	r2, r3, #16
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	611a      	str	r2, [r3, #16]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e272      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f000 8087 	beq.w	8001ae2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019d4:	4b92      	ldr	r3, [pc, #584]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 030c 	and.w	r3, r3, #12
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d00c      	beq.n	80019fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019e0:	4b8f      	ldr	r3, [pc, #572]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 030c 	and.w	r3, r3, #12
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d112      	bne.n	8001a12 <HAL_RCC_OscConfig+0x5e>
 80019ec:	4b8c      	ldr	r3, [pc, #560]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019f8:	d10b      	bne.n	8001a12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fa:	4b89      	ldr	r3, [pc, #548]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d06c      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x12c>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d168      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e24c      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a1a:	d106      	bne.n	8001a2a <HAL_RCC_OscConfig+0x76>
 8001a1c:	4b80      	ldr	r3, [pc, #512]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a7f      	ldr	r2, [pc, #508]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	e02e      	b.n	8001a88 <HAL_RCC_OscConfig+0xd4>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10c      	bne.n	8001a4c <HAL_RCC_OscConfig+0x98>
 8001a32:	4b7b      	ldr	r3, [pc, #492]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a7a      	ldr	r2, [pc, #488]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	4b78      	ldr	r3, [pc, #480]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a77      	ldr	r2, [pc, #476]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	e01d      	b.n	8001a88 <HAL_RCC_OscConfig+0xd4>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a54:	d10c      	bne.n	8001a70 <HAL_RCC_OscConfig+0xbc>
 8001a56:	4b72      	ldr	r3, [pc, #456]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a71      	ldr	r2, [pc, #452]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	4b6f      	ldr	r3, [pc, #444]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a6e      	ldr	r2, [pc, #440]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	e00b      	b.n	8001a88 <HAL_RCC_OscConfig+0xd4>
 8001a70:	4b6b      	ldr	r3, [pc, #428]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a6a      	ldr	r2, [pc, #424]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	4b68      	ldr	r3, [pc, #416]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a67      	ldr	r2, [pc, #412]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d013      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a90:	f7ff fa3a 	bl	8000f08 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a98:	f7ff fa36 	bl	8000f08 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b64      	cmp	r3, #100	@ 0x64
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e200      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aaa:	4b5d      	ldr	r3, [pc, #372]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f0      	beq.n	8001a98 <HAL_RCC_OscConfig+0xe4>
 8001ab6:	e014      	b.n	8001ae2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab8:	f7ff fa26 	bl	8000f08 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac0:	f7ff fa22 	bl	8000f08 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b64      	cmp	r3, #100	@ 0x64
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e1ec      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad2:	4b53      	ldr	r3, [pc, #332]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f0      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x10c>
 8001ade:	e000      	b.n	8001ae2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d063      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aee:	4b4c      	ldr	r3, [pc, #304]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 030c 	and.w	r3, r3, #12
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00b      	beq.n	8001b12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001afa:	4b49      	ldr	r3, [pc, #292]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 030c 	and.w	r3, r3, #12
 8001b02:	2b08      	cmp	r3, #8
 8001b04:	d11c      	bne.n	8001b40 <HAL_RCC_OscConfig+0x18c>
 8001b06:	4b46      	ldr	r3, [pc, #280]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d116      	bne.n	8001b40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b12:	4b43      	ldr	r3, [pc, #268]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d005      	beq.n	8001b2a <HAL_RCC_OscConfig+0x176>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d001      	beq.n	8001b2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e1c0      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	4939      	ldr	r1, [pc, #228]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3e:	e03a      	b.n	8001bb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d020      	beq.n	8001b8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b48:	4b36      	ldr	r3, [pc, #216]	@ (8001c24 <HAL_RCC_OscConfig+0x270>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4e:	f7ff f9db 	bl	8000f08 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b56:	f7ff f9d7 	bl	8000f08 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e1a1      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b68:	4b2d      	ldr	r3, [pc, #180]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b74:	4b2a      	ldr	r3, [pc, #168]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	4927      	ldr	r1, [pc, #156]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	600b      	str	r3, [r1, #0]
 8001b88:	e015      	b.n	8001bb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b8a:	4b26      	ldr	r3, [pc, #152]	@ (8001c24 <HAL_RCC_OscConfig+0x270>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7ff f9ba 	bl	8000f08 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b98:	f7ff f9b6 	bl	8000f08 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e180      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001baa:	4b1d      	ldr	r3, [pc, #116]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d03a      	beq.n	8001c38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d019      	beq.n	8001bfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bca:	4b17      	ldr	r3, [pc, #92]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd0:	f7ff f99a 	bl	8000f08 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd8:	f7ff f996 	bl	8000f08 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e160      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bea:	4b0d      	ldr	r3, [pc, #52]	@ (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f0      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	f000 face 	bl	8002198 <RCC_Delay>
 8001bfc:	e01c      	b.n	8001c38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c04:	f7ff f980 	bl	8000f08 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c0a:	e00f      	b.n	8001c2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c0c:	f7ff f97c 	bl	8000f08 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d908      	bls.n	8001c2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e146      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000
 8001c24:	42420000 	.word	0x42420000
 8001c28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c2c:	4b92      	ldr	r3, [pc, #584]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1e9      	bne.n	8001c0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 80a6 	beq.w	8001d92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c46:	2300      	movs	r3, #0
 8001c48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c4a:	4b8b      	ldr	r3, [pc, #556]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10d      	bne.n	8001c72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c56:	4b88      	ldr	r3, [pc, #544]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	4a87      	ldr	r2, [pc, #540]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c60:	61d3      	str	r3, [r2, #28]
 8001c62:	4b85      	ldr	r3, [pc, #532]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c72:	4b82      	ldr	r3, [pc, #520]	@ (8001e7c <HAL_RCC_OscConfig+0x4c8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d118      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c7e:	4b7f      	ldr	r3, [pc, #508]	@ (8001e7c <HAL_RCC_OscConfig+0x4c8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a7e      	ldr	r2, [pc, #504]	@ (8001e7c <HAL_RCC_OscConfig+0x4c8>)
 8001c84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c8a:	f7ff f93d 	bl	8000f08 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c92:	f7ff f939 	bl	8000f08 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b64      	cmp	r3, #100	@ 0x64
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e103      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca4:	4b75      	ldr	r3, [pc, #468]	@ (8001e7c <HAL_RCC_OscConfig+0x4c8>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d106      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x312>
 8001cb8:	4b6f      	ldr	r3, [pc, #444]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	4a6e      	ldr	r2, [pc, #440]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6213      	str	r3, [r2, #32]
 8001cc4:	e02d      	b.n	8001d22 <HAL_RCC_OscConfig+0x36e>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x334>
 8001cce:	4b6a      	ldr	r3, [pc, #424]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	4a69      	ldr	r2, [pc, #420]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	6213      	str	r3, [r2, #32]
 8001cda:	4b67      	ldr	r3, [pc, #412]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	4a66      	ldr	r2, [pc, #408]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001ce0:	f023 0304 	bic.w	r3, r3, #4
 8001ce4:	6213      	str	r3, [r2, #32]
 8001ce6:	e01c      	b.n	8001d22 <HAL_RCC_OscConfig+0x36e>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	2b05      	cmp	r3, #5
 8001cee:	d10c      	bne.n	8001d0a <HAL_RCC_OscConfig+0x356>
 8001cf0:	4b61      	ldr	r3, [pc, #388]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	4a60      	ldr	r2, [pc, #384]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001cf6:	f043 0304 	orr.w	r3, r3, #4
 8001cfa:	6213      	str	r3, [r2, #32]
 8001cfc:	4b5e      	ldr	r3, [pc, #376]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	4a5d      	ldr	r2, [pc, #372]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	6213      	str	r3, [r2, #32]
 8001d08:	e00b      	b.n	8001d22 <HAL_RCC_OscConfig+0x36e>
 8001d0a:	4b5b      	ldr	r3, [pc, #364]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	4a5a      	ldr	r2, [pc, #360]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	f023 0301 	bic.w	r3, r3, #1
 8001d14:	6213      	str	r3, [r2, #32]
 8001d16:	4b58      	ldr	r3, [pc, #352]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	4a57      	ldr	r2, [pc, #348]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	f023 0304 	bic.w	r3, r3, #4
 8001d20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d015      	beq.n	8001d56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2a:	f7ff f8ed 	bl	8000f08 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d30:	e00a      	b.n	8001d48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d32:	f7ff f8e9 	bl	8000f08 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e0b1      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d48:	4b4b      	ldr	r3, [pc, #300]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0ee      	beq.n	8001d32 <HAL_RCC_OscConfig+0x37e>
 8001d54:	e014      	b.n	8001d80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d56:	f7ff f8d7 	bl	8000f08 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d5c:	e00a      	b.n	8001d74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5e:	f7ff f8d3 	bl	8000f08 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e09b      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d74:	4b40      	ldr	r3, [pc, #256]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1ee      	bne.n	8001d5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d80:	7dfb      	ldrb	r3, [r7, #23]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d105      	bne.n	8001d92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d86:	4b3c      	ldr	r3, [pc, #240]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	4a3b      	ldr	r2, [pc, #236]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001d8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 8087 	beq.w	8001eaa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d9c:	4b36      	ldr	r3, [pc, #216]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 030c 	and.w	r3, r3, #12
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d061      	beq.n	8001e6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d146      	bne.n	8001e3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db0:	4b33      	ldr	r3, [pc, #204]	@ (8001e80 <HAL_RCC_OscConfig+0x4cc>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db6:	f7ff f8a7 	bl	8000f08 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dbe:	f7ff f8a3 	bl	8000f08 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e06d      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd0:	4b29      	ldr	r3, [pc, #164]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f0      	bne.n	8001dbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001de4:	d108      	bne.n	8001df8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001de6:	4b24      	ldr	r3, [pc, #144]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	4921      	ldr	r1, [pc, #132]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a19      	ldr	r1, [r3, #32]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e08:	430b      	orrs	r3, r1
 8001e0a:	491b      	ldr	r1, [pc, #108]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e10:	4b1b      	ldr	r3, [pc, #108]	@ (8001e80 <HAL_RCC_OscConfig+0x4cc>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e16:	f7ff f877 	bl	8000f08 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1e:	f7ff f873 	bl	8000f08 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e03d      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e30:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x46a>
 8001e3c:	e035      	b.n	8001eaa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3e:	4b10      	ldr	r3, [pc, #64]	@ (8001e80 <HAL_RCC_OscConfig+0x4cc>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7ff f860 	bl	8000f08 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4c:	f7ff f85c 	bl	8000f08 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e026      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e5e:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <HAL_RCC_OscConfig+0x4c4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x498>
 8001e6a:	e01e      	b.n	8001eaa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d107      	bne.n	8001e84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e019      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40007000 	.word	0x40007000
 8001e80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e84:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb4 <HAL_RCC_OscConfig+0x500>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d106      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d001      	beq.n	8001eaa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40021000 	.word	0x40021000

08001eb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0d0      	b.n	800206e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ecc:	4b6a      	ldr	r3, [pc, #424]	@ (8002078 <HAL_RCC_ClockConfig+0x1c0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d910      	bls.n	8001efc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eda:	4b67      	ldr	r3, [pc, #412]	@ (8002078 <HAL_RCC_ClockConfig+0x1c0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f023 0207 	bic.w	r2, r3, #7
 8001ee2:	4965      	ldr	r1, [pc, #404]	@ (8002078 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eea:	4b63      	ldr	r3, [pc, #396]	@ (8002078 <HAL_RCC_ClockConfig+0x1c0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d001      	beq.n	8001efc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0b8      	b.n	800206e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d020      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f14:	4b59      	ldr	r3, [pc, #356]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	4a58      	ldr	r2, [pc, #352]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001f1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f2c:	4b53      	ldr	r3, [pc, #332]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	4a52      	ldr	r2, [pc, #328]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001f36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f38:	4b50      	ldr	r3, [pc, #320]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	494d      	ldr	r1, [pc, #308]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d040      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d107      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5e:	4b47      	ldr	r3, [pc, #284]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d115      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e07f      	b.n	800206e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d107      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f76:	4b41      	ldr	r3, [pc, #260]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d109      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e073      	b.n	800206e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f86:	4b3d      	ldr	r3, [pc, #244]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e06b      	b.n	800206e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f96:	4b39      	ldr	r3, [pc, #228]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f023 0203 	bic.w	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	4936      	ldr	r1, [pc, #216]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fa8:	f7fe ffae 	bl	8000f08 <HAL_GetTick>
 8001fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb0:	f7fe ffaa 	bl	8000f08 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e053      	b.n	800206e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc6:	4b2d      	ldr	r3, [pc, #180]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 020c 	and.w	r2, r3, #12
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d1eb      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fd8:	4b27      	ldr	r3, [pc, #156]	@ (8002078 <HAL_RCC_ClockConfig+0x1c0>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d210      	bcs.n	8002008 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe6:	4b24      	ldr	r3, [pc, #144]	@ (8002078 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f023 0207 	bic.w	r2, r3, #7
 8001fee:	4922      	ldr	r1, [pc, #136]	@ (8002078 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff6:	4b20      	ldr	r3, [pc, #128]	@ (8002078 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d001      	beq.n	8002008 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e032      	b.n	800206e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d008      	beq.n	8002026 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002014:	4b19      	ldr	r3, [pc, #100]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	4916      	ldr	r1, [pc, #88]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8002022:	4313      	orrs	r3, r2
 8002024:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	2b00      	cmp	r3, #0
 8002030:	d009      	beq.n	8002046 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002032:	4b12      	ldr	r3, [pc, #72]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	490e      	ldr	r1, [pc, #56]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	4313      	orrs	r3, r2
 8002044:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002046:	f000 f821 	bl	800208c <HAL_RCC_GetSysClockFreq>
 800204a:	4602      	mov	r2, r0
 800204c:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	091b      	lsrs	r3, r3, #4
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	490a      	ldr	r1, [pc, #40]	@ (8002080 <HAL_RCC_ClockConfig+0x1c8>)
 8002058:	5ccb      	ldrb	r3, [r1, r3]
 800205a:	fa22 f303 	lsr.w	r3, r2, r3
 800205e:	4a09      	ldr	r2, [pc, #36]	@ (8002084 <HAL_RCC_ClockConfig+0x1cc>)
 8002060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002062:	4b09      	ldr	r3, [pc, #36]	@ (8002088 <HAL_RCC_ClockConfig+0x1d0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe ff0c 	bl	8000e84 <HAL_InitTick>

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40022000 	.word	0x40022000
 800207c:	40021000 	.word	0x40021000
 8002080:	08003cec 	.word	0x08003cec
 8002084:	20000000 	.word	0x20000000
 8002088:	20000004 	.word	0x20000004

0800208c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800208c:	b480      	push	{r7}
 800208e:	b087      	sub	sp, #28
 8002090:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	2300      	movs	r3, #0
 80020a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x94>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d002      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0x30>
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d003      	beq.n	80020c2 <HAL_RCC_GetSysClockFreq+0x36>
 80020ba:	e027      	b.n	800210c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020bc:	4b19      	ldr	r3, [pc, #100]	@ (8002124 <HAL_RCC_GetSysClockFreq+0x98>)
 80020be:	613b      	str	r3, [r7, #16]
      break;
 80020c0:	e027      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	0c9b      	lsrs	r3, r3, #18
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	4a17      	ldr	r2, [pc, #92]	@ (8002128 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020cc:	5cd3      	ldrb	r3, [r2, r3]
 80020ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d010      	beq.n	80020fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020da:	4b11      	ldr	r3, [pc, #68]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x94>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	0c5b      	lsrs	r3, r3, #17
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	4a11      	ldr	r2, [pc, #68]	@ (800212c <HAL_RCC_GetSysClockFreq+0xa0>)
 80020e6:	5cd3      	ldrb	r3, [r2, r3]
 80020e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002124 <HAL_RCC_GetSysClockFreq+0x98>)
 80020ee:	fb03 f202 	mul.w	r2, r3, r2
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	e004      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002130 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002100:	fb02 f303 	mul.w	r3, r2, r3
 8002104:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	613b      	str	r3, [r7, #16]
      break;
 800210a:	e002      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800210c:	4b05      	ldr	r3, [pc, #20]	@ (8002124 <HAL_RCC_GetSysClockFreq+0x98>)
 800210e:	613b      	str	r3, [r7, #16]
      break;
 8002110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002112:	693b      	ldr	r3, [r7, #16]
}
 8002114:	4618      	mov	r0, r3
 8002116:	371c      	adds	r7, #28
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000
 8002124:	007a1200 	.word	0x007a1200
 8002128:	08003d04 	.word	0x08003d04
 800212c:	08003d14 	.word	0x08003d14
 8002130:	003d0900 	.word	0x003d0900

08002134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002138:	4b02      	ldr	r3, [pc, #8]	@ (8002144 <HAL_RCC_GetHCLKFreq+0x10>)
 800213a:	681b      	ldr	r3, [r3, #0]
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr
 8002144:	20000000 	.word	0x20000000

08002148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800214c:	f7ff fff2 	bl	8002134 <HAL_RCC_GetHCLKFreq>
 8002150:	4602      	mov	r2, r0
 8002152:	4b05      	ldr	r3, [pc, #20]	@ (8002168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	0a1b      	lsrs	r3, r3, #8
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	4903      	ldr	r1, [pc, #12]	@ (800216c <HAL_RCC_GetPCLK1Freq+0x24>)
 800215e:	5ccb      	ldrb	r3, [r1, r3]
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002164:	4618      	mov	r0, r3
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40021000 	.word	0x40021000
 800216c:	08003cfc 	.word	0x08003cfc

08002170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002174:	f7ff ffde 	bl	8002134 <HAL_RCC_GetHCLKFreq>
 8002178:	4602      	mov	r2, r0
 800217a:	4b05      	ldr	r3, [pc, #20]	@ (8002190 <HAL_RCC_GetPCLK2Freq+0x20>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	0adb      	lsrs	r3, r3, #11
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	4903      	ldr	r1, [pc, #12]	@ (8002194 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002186:	5ccb      	ldrb	r3, [r1, r3]
 8002188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800218c:	4618      	mov	r0, r3
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40021000 	.word	0x40021000
 8002194:	08003cfc 	.word	0x08003cfc

08002198 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021a0:	4b0a      	ldr	r3, [pc, #40]	@ (80021cc <RCC_Delay+0x34>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0a      	ldr	r2, [pc, #40]	@ (80021d0 <RCC_Delay+0x38>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	0a5b      	lsrs	r3, r3, #9
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	fb02 f303 	mul.w	r3, r2, r3
 80021b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021b4:	bf00      	nop
  }
  while (Delay --);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1e5a      	subs	r2, r3, #1
 80021ba:	60fa      	str	r2, [r7, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1f9      	bne.n	80021b4 <RCC_Delay+0x1c>
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr
 80021cc:	20000000 	.word	0x20000000
 80021d0:	10624dd3 	.word	0x10624dd3

080021d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e042      	b.n	800226c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d106      	bne.n	8002200 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7fe fb6a 	bl	80008d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2224      	movs	r2, #36	@ 0x24
 8002204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002216:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 ffaf 	bl	800317c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	691a      	ldr	r2, [r3, #16]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800222c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	695a      	ldr	r2, [r3, #20]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800223c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800224c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2220      	movs	r2, #32
 8002258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2220      	movs	r2, #32
 8002260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08a      	sub	sp, #40	@ 0x28
 8002278:	af02      	add	r7, sp, #8
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	4613      	mov	r3, r2
 8002282:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b20      	cmp	r3, #32
 8002292:	d175      	bne.n	8002380 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <HAL_UART_Transmit+0x2c>
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e06e      	b.n	8002382 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2221      	movs	r2, #33	@ 0x21
 80022ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022b2:	f7fe fe29 	bl	8000f08 <HAL_GetTick>
 80022b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	88fa      	ldrh	r2, [r7, #6]
 80022bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	88fa      	ldrh	r2, [r7, #6]
 80022c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022cc:	d108      	bne.n	80022e0 <HAL_UART_Transmit+0x6c>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d104      	bne.n	80022e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	61bb      	str	r3, [r7, #24]
 80022de:	e003      	b.n	80022e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80022e8:	e02e      	b.n	8002348 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	2200      	movs	r2, #0
 80022f2:	2180      	movs	r1, #128	@ 0x80
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 fc8b 	bl	8002c10 <UART_WaitOnFlagUntilTimeout>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e03a      	b.n	8002382 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10b      	bne.n	800232a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002320:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	3302      	adds	r3, #2
 8002326:	61bb      	str	r3, [r7, #24]
 8002328:	e007      	b.n	800233a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	781a      	ldrb	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	3301      	adds	r3, #1
 8002338:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800233e:	b29b      	uxth	r3, r3
 8002340:	3b01      	subs	r3, #1
 8002342:	b29a      	uxth	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800234c:	b29b      	uxth	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1cb      	bne.n	80022ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	2200      	movs	r2, #0
 800235a:	2140      	movs	r1, #64	@ 0x40
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f000 fc57 	bl	8002c10 <UART_WaitOnFlagUntilTimeout>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2220      	movs	r2, #32
 800236c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e006      	b.n	8002382 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2220      	movs	r2, #32
 8002378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800237c:	2300      	movs	r3, #0
 800237e:	e000      	b.n	8002382 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002380:	2302      	movs	r3, #2
  }
}
 8002382:	4618      	mov	r0, r3
 8002384:	3720      	adds	r7, #32
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800238a:	b480      	push	{r7}
 800238c:	b085      	sub	sp, #20
 800238e:	af00      	add	r7, sp, #0
 8002390:	60f8      	str	r0, [r7, #12]
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	4613      	mov	r3, r2
 8002396:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b20      	cmp	r3, #32
 80023a2:	d121      	bne.n	80023e8 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <HAL_UART_Transmit_IT+0x26>
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e01a      	b.n	80023ea <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	88fa      	ldrh	r2, [r7, #6]
 80023be:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	88fa      	ldrh	r2, [r7, #6]
 80023c4:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2221      	movs	r2, #33	@ 0x21
 80023d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80023e2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	e000      	b.n	80023ea <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80023e8:	2302      	movs	r3, #2
  }
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08c      	sub	sp, #48	@ 0x30
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	4613      	mov	r3, r2
 8002400:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b20      	cmp	r3, #32
 800240c:	d146      	bne.n	800249c <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002414:	88fb      	ldrh	r3, [r7, #6]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e03f      	b.n	800249e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2201      	movs	r2, #1
 8002422:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	461a      	mov	r2, r3
 800242e:	68b9      	ldr	r1, [r7, #8]
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 fc47 	bl	8002cc4 <UART_Start_Receive_DMA>
 8002436:	4603      	mov	r3, r0
 8002438:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002440:	2b01      	cmp	r3, #1
 8002442:	d125      	bne.n	8002490 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002444:	2300      	movs	r3, #0
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	330c      	adds	r3, #12
 8002460:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	e853 3f00 	ldrex	r3, [r3]
 8002468:	617b      	str	r3, [r7, #20]
   return(result);
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f043 0310 	orr.w	r3, r3, #16
 8002470:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	330c      	adds	r3, #12
 8002478:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800247a:	627a      	str	r2, [r7, #36]	@ 0x24
 800247c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800247e:	6a39      	ldr	r1, [r7, #32]
 8002480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002482:	e841 2300 	strex	r3, r2, [r1]
 8002486:	61fb      	str	r3, [r7, #28]
   return(result);
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1e5      	bne.n	800245a <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 800248e:	e002      	b.n	8002496 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8002496:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800249a:	e000      	b.n	800249e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800249c:	2302      	movs	r3, #2
  }
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3730      	adds	r7, #48	@ 0x30
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b0ba      	sub	sp, #232	@ 0xe8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80024e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10f      	bne.n	800250e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024f2:	f003 0320 	and.w	r3, r3, #32
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d009      	beq.n	800250e <HAL_UART_IRQHandler+0x66>
 80024fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 fd7a 	bl	8003000 <UART_Receive_IT>
      return;
 800250c:	e25b      	b.n	80029c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800250e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 80de 	beq.w	80026d4 <HAL_UART_IRQHandler+0x22c>
 8002518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	d106      	bne.n	8002532 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002528:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80d1 	beq.w	80026d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00b      	beq.n	8002556 <HAL_UART_IRQHandler+0xae>
 800253e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002546:	2b00      	cmp	r3, #0
 8002548:	d005      	beq.n	8002556 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254e:	f043 0201 	orr.w	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00b      	beq.n	800257a <HAL_UART_IRQHandler+0xd2>
 8002562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d005      	beq.n	800257a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002572:	f043 0202 	orr.w	r2, r3, #2
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800257a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00b      	beq.n	800259e <HAL_UART_IRQHandler+0xf6>
 8002586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d005      	beq.n	800259e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002596:	f043 0204 	orr.w	r2, r3, #4
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800259e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d011      	beq.n	80025ce <HAL_UART_IRQHandler+0x126>
 80025aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025ae:	f003 0320 	and.w	r3, r3, #32
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d105      	bne.n	80025c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d005      	beq.n	80025ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c6:	f043 0208 	orr.w	r2, r3, #8
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 81f2 	beq.w	80029bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025dc:	f003 0320 	and.w	r3, r3, #32
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <HAL_UART_IRQHandler+0x14e>
 80025e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 fd05 	bl	8003000 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002600:	2b00      	cmp	r3, #0
 8002602:	bf14      	ite	ne
 8002604:	2301      	movne	r3, #1
 8002606:	2300      	moveq	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d103      	bne.n	8002622 <HAL_UART_IRQHandler+0x17a>
 800261a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800261e:	2b00      	cmp	r3, #0
 8002620:	d04f      	beq.n	80026c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 fc0f 	bl	8002e46 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002632:	2b00      	cmp	r3, #0
 8002634:	d041      	beq.n	80026ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	3314      	adds	r3, #20
 800263c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002640:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002644:	e853 3f00 	ldrex	r3, [r3]
 8002648:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800264c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002650:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002654:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	3314      	adds	r3, #20
 800265e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002662:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002666:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800266a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800266e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002672:	e841 2300 	strex	r3, r2, [r1]
 8002676:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800267a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1d9      	bne.n	8002636 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002686:	2b00      	cmp	r3, #0
 8002688:	d013      	beq.n	80026b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800268e:	4a7e      	ldr	r2, [pc, #504]	@ (8002888 <HAL_UART_IRQHandler+0x3e0>)
 8002690:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe fe44 	bl	8001324 <HAL_DMA_Abort_IT>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d016      	beq.n	80026d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026ac:	4610      	mov	r0, r2
 80026ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026b0:	e00e      	b.n	80026d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f9a5 	bl	8002a02 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026b8:	e00a      	b.n	80026d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f9a1 	bl	8002a02 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026c0:	e006      	b.n	80026d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f99d 	bl	8002a02 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80026ce:	e175      	b.n	80029bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d0:	bf00      	nop
    return;
 80026d2:	e173      	b.n	80029bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d8:	2b01      	cmp	r3, #1
 80026da:	f040 814f 	bne.w	800297c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80026de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 8148 	beq.w	800297c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80026ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026f0:	f003 0310 	and.w	r3, r3, #16
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 8141 	beq.w	800297c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026fa:	2300      	movs	r3, #0
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 80b6 	beq.w	800288c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800272c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 8145 	beq.w	80029c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800273a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800273e:	429a      	cmp	r2, r3
 8002740:	f080 813e 	bcs.w	80029c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800274a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	2b20      	cmp	r3, #32
 8002754:	f000 8088 	beq.w	8002868 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	330c      	adds	r3, #12
 800275e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002762:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002766:	e853 3f00 	ldrex	r3, [r3]
 800276a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800276e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002772:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002776:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	330c      	adds	r3, #12
 8002780:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002784:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002788:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800278c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002790:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002794:	e841 2300 	strex	r3, r2, [r1]
 8002798:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800279c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1d9      	bne.n	8002758 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	3314      	adds	r3, #20
 80027aa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027ae:	e853 3f00 	ldrex	r3, [r3]
 80027b2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80027b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027b6:	f023 0301 	bic.w	r3, r3, #1
 80027ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	3314      	adds	r3, #20
 80027c4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80027c8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80027cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ce:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80027d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80027d4:	e841 2300 	strex	r3, r2, [r1]
 80027d8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80027da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1e1      	bne.n	80027a4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	3314      	adds	r3, #20
 80027e6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027ea:	e853 3f00 	ldrex	r3, [r3]
 80027ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80027f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	3314      	adds	r3, #20
 8002800:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002804:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002806:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002808:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800280a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800280c:	e841 2300 	strex	r3, r2, [r1]
 8002810:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002812:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1e3      	bne.n	80027e0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	330c      	adds	r3, #12
 800282c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002830:	e853 3f00 	ldrex	r3, [r3]
 8002834:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002836:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002838:	f023 0310 	bic.w	r3, r3, #16
 800283c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	330c      	adds	r3, #12
 8002846:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800284a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800284c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002850:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002852:	e841 2300 	strex	r3, r2, [r1]
 8002856:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002858:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1e3      	bne.n	8002826 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fd22 	bl	80012ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002876:	b29b      	uxth	r3, r3
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	b29b      	uxth	r3, r3
 800287c:	4619      	mov	r1, r3
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7fd fdb6 	bl	80003f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002884:	e09c      	b.n	80029c0 <HAL_UART_IRQHandler+0x518>
 8002886:	bf00      	nop
 8002888:	08002f0b 	.word	0x08002f0b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002894:	b29b      	uxth	r3, r3
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 808e 	beq.w	80029c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80028a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 8089 	beq.w	80029c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	330c      	adds	r3, #12
 80028b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028bc:	e853 3f00 	ldrex	r3, [r3]
 80028c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80028c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	330c      	adds	r3, #12
 80028d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80028d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80028d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80028dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028de:	e841 2300 	strex	r3, r2, [r1]
 80028e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80028e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1e3      	bne.n	80028b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	3314      	adds	r3, #20
 80028f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f4:	e853 3f00 	ldrex	r3, [r3]
 80028f8:	623b      	str	r3, [r7, #32]
   return(result);
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	f023 0301 	bic.w	r3, r3, #1
 8002900:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	3314      	adds	r3, #20
 800290a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800290e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002910:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002912:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002914:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002916:	e841 2300 	strex	r3, r2, [r1]
 800291a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800291c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1e3      	bne.n	80028ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	330c      	adds	r3, #12
 8002936:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	e853 3f00 	ldrex	r3, [r3]
 800293e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f023 0310 	bic.w	r3, r3, #16
 8002946:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	330c      	adds	r3, #12
 8002950:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002954:	61fa      	str	r2, [r7, #28]
 8002956:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002958:	69b9      	ldr	r1, [r7, #24]
 800295a:	69fa      	ldr	r2, [r7, #28]
 800295c:	e841 2300 	strex	r3, r2, [r1]
 8002960:	617b      	str	r3, [r7, #20]
   return(result);
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1e3      	bne.n	8002930 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800296e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002972:	4619      	mov	r1, r3
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7fd fd3b 	bl	80003f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800297a:	e023      	b.n	80029c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800297c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002984:	2b00      	cmp	r3, #0
 8002986:	d009      	beq.n	800299c <HAL_UART_IRQHandler+0x4f4>
 8002988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800298c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 facc 	bl	8002f32 <UART_Transmit_IT>
    return;
 800299a:	e014      	b.n	80029c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800299c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00e      	beq.n	80029c6 <HAL_UART_IRQHandler+0x51e>
 80029a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 fb0b 	bl	8002fd0 <UART_EndTransmit_IT>
    return;
 80029ba:	e004      	b.n	80029c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80029bc:	bf00      	nop
 80029be:	e002      	b.n	80029c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80029c0:	bf00      	nop
 80029c2:	e000      	b.n	80029c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80029c4:	bf00      	nop
  }
}
 80029c6:	37e8      	adds	r7, #232	@ 0xe8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr

080029de <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr

08002a02 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b09c      	sub	sp, #112	@ 0x70
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a20:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0320 	and.w	r3, r3, #32
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d172      	bne.n	8002b16 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002a30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a32:	2200      	movs	r2, #0
 8002a34:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	330c      	adds	r3, #12
 8002a3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a40:	e853 3f00 	ldrex	r3, [r3]
 8002a44:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002a46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	330c      	adds	r3, #12
 8002a54:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002a56:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a58:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a5e:	e841 2300 	strex	r3, r2, [r1]
 8002a62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002a64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1e5      	bne.n	8002a36 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	3314      	adds	r3, #20
 8002a70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a74:	e853 3f00 	ldrex	r3, [r3]
 8002a78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a7c:	f023 0301 	bic.w	r3, r3, #1
 8002a80:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	3314      	adds	r3, #20
 8002a88:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002a8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8002a8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002a90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a92:	e841 2300 	strex	r3, r2, [r1]
 8002a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002a98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1e5      	bne.n	8002a6a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	3314      	adds	r3, #20
 8002aa4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa8:	e853 3f00 	ldrex	r3, [r3]
 8002aac:	623b      	str	r3, [r7, #32]
   return(result);
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ab4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ab6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	3314      	adds	r3, #20
 8002abc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002abe:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ac4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ac6:	e841 2300 	strex	r3, r2, [r1]
 8002aca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1e5      	bne.n	8002a9e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ad2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ada:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d119      	bne.n	8002b16 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ae2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	330c      	adds	r3, #12
 8002ae8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	e853 3f00 	ldrex	r3, [r3]
 8002af0:	60fb      	str	r3, [r7, #12]
   return(result);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f023 0310 	bic.w	r3, r3, #16
 8002af8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002afa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	330c      	adds	r3, #12
 8002b00:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002b02:	61fa      	str	r2, [r7, #28]
 8002b04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b06:	69b9      	ldr	r1, [r7, #24]
 8002b08:	69fa      	ldr	r2, [r7, #28]
 8002b0a:	e841 2300 	strex	r3, r2, [r1]
 8002b0e:	617b      	str	r3, [r7, #20]
   return(result);
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1e5      	bne.n	8002ae2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b18:	2200      	movs	r2, #0
 8002b1a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d106      	bne.n	8002b32 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b26:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002b28:	4619      	mov	r1, r3
 8002b2a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002b2c:	f7fd fc60 	bl	80003f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002b30:	e002      	b.n	8002b38 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002b32:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002b34:	f7ff ff53 	bl	80029de <HAL_UART_RxCpltCallback>
}
 8002b38:	bf00      	nop
 8002b3a:	3770      	adds	r7, #112	@ 0x70
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d108      	bne.n	8002b6e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002b60:	085b      	lsrs	r3, r3, #1
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	4619      	mov	r1, r3
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f7fd fc42 	bl	80003f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002b6c:	e002      	b.n	8002b74 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f7ff ff3e 	bl	80029f0 <HAL_UART_RxHalfCpltCallback>
}
 8002b74:	bf00      	nop
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	bf14      	ite	ne
 8002b9c:	2301      	movne	r3, #1
 8002b9e:	2300      	moveq	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b21      	cmp	r3, #33	@ 0x21
 8002bae:	d108      	bne.n	8002bc2 <UART_DMAError+0x46>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d005      	beq.n	8002bc2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8002bbc:	68b8      	ldr	r0, [r7, #8]
 8002bbe:	f000 f91b 	bl	8002df8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bf14      	ite	ne
 8002bd0:	2301      	movne	r3, #1
 8002bd2:	2300      	moveq	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b22      	cmp	r3, #34	@ 0x22
 8002be2:	d108      	bne.n	8002bf6 <UART_DMAError+0x7a>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d005      	beq.n	8002bf6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2200      	movs	r2, #0
 8002bee:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002bf0:	68b8      	ldr	r0, [r7, #8]
 8002bf2:	f000 f928 	bl	8002e46 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfa:	f043 0210 	orr.w	r2, r3, #16
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c02:	68b8      	ldr	r0, [r7, #8]
 8002c04:	f7ff fefd 	bl	8002a02 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c08:	bf00      	nop
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c20:	e03b      	b.n	8002c9a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c28:	d037      	beq.n	8002c9a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c2a:	f7fe f96d 	bl	8000f08 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	6a3a      	ldr	r2, [r7, #32]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d302      	bcc.n	8002c40 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e03a      	b.n	8002cba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d023      	beq.n	8002c9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2b80      	cmp	r3, #128	@ 0x80
 8002c56:	d020      	beq.n	8002c9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b40      	cmp	r3, #64	@ 0x40
 8002c5c:	d01d      	beq.n	8002c9a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d116      	bne.n	8002c9a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f8df 	bl	8002e46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2208      	movs	r2, #8
 8002c8c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e00f      	b.n	8002cba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	bf0c      	ite	eq
 8002caa:	2301      	moveq	r3, #1
 8002cac:	2300      	movne	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d0b4      	beq.n	8002c22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b098      	sub	sp, #96	@ 0x60
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	88fa      	ldrh	r2, [r7, #6]
 8002cdc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2222      	movs	r2, #34	@ 0x22
 8002ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf0:	4a3e      	ldr	r2, [pc, #248]	@ (8002dec <UART_Start_Receive_DMA+0x128>)
 8002cf2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf8:	4a3d      	ldr	r2, [pc, #244]	@ (8002df0 <UART_Start_Receive_DMA+0x12c>)
 8002cfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d00:	4a3c      	ldr	r2, [pc, #240]	@ (8002df4 <UART_Start_Receive_DMA+0x130>)
 8002d02:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d08:	2200      	movs	r2, #0
 8002d0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002d0c:	f107 0308 	add.w	r3, r7, #8
 8002d10:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	3304      	adds	r3, #4
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	88fb      	ldrh	r3, [r7, #6]
 8002d24:	f7fe fa62 	bl	80011ec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002d28:	2300      	movs	r3, #0
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	613b      	str	r3, [r7, #16]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	613b      	str	r3, [r7, #16]
 8002d3c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d019      	beq.n	8002d7a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	330c      	adds	r3, #12
 8002d4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d50:	e853 3f00 	ldrex	r3, [r3]
 8002d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	330c      	adds	r3, #12
 8002d64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d66:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002d68:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002d6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d6e:	e841 2300 	strex	r3, r2, [r1]
 8002d72:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8002d74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1e5      	bne.n	8002d46 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	3314      	adds	r3, #20
 8002d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d84:	e853 3f00 	ldrex	r3, [r3]
 8002d88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	3314      	adds	r3, #20
 8002d98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002d9a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002d9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002da0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002da2:	e841 2300 	strex	r3, r2, [r1]
 8002da6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1e5      	bne.n	8002d7a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	3314      	adds	r3, #20
 8002db4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	e853 3f00 	ldrex	r3, [r3]
 8002dbc:	617b      	str	r3, [r7, #20]
   return(result);
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dc4:	653b      	str	r3, [r7, #80]	@ 0x50
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	3314      	adds	r3, #20
 8002dcc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002dce:	627a      	str	r2, [r7, #36]	@ 0x24
 8002dd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd2:	6a39      	ldr	r1, [r7, #32]
 8002dd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dd6:	e841 2300 	strex	r3, r2, [r1]
 8002dda:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1e5      	bne.n	8002dae <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3760      	adds	r7, #96	@ 0x60
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	08002a15 	.word	0x08002a15
 8002df0:	08002b41 	.word	0x08002b41
 8002df4:	08002b7d 	.word	0x08002b7d

08002df8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b089      	sub	sp, #36	@ 0x24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	330c      	adds	r3, #12
 8002e06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	e853 3f00 	ldrex	r3, [r3]
 8002e0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002e16:	61fb      	str	r3, [r7, #28]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	330c      	adds	r3, #12
 8002e1e:	69fa      	ldr	r2, [r7, #28]
 8002e20:	61ba      	str	r2, [r7, #24]
 8002e22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e24:	6979      	ldr	r1, [r7, #20]
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	e841 2300 	strex	r3, r2, [r1]
 8002e2c:	613b      	str	r3, [r7, #16]
   return(result);
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1e5      	bne.n	8002e00 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8002e3c:	bf00      	nop
 8002e3e:	3724      	adds	r7, #36	@ 0x24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr

08002e46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b095      	sub	sp, #84	@ 0x54
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	330c      	adds	r3, #12
 8002e54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e58:	e853 3f00 	ldrex	r3, [r3]
 8002e5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	330c      	adds	r3, #12
 8002e6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e6e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e76:	e841 2300 	strex	r3, r2, [r1]
 8002e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1e5      	bne.n	8002e4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	3314      	adds	r3, #20
 8002e88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	e853 3f00 	ldrex	r3, [r3]
 8002e90:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	f023 0301 	bic.w	r3, r3, #1
 8002e98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	3314      	adds	r3, #20
 8002ea0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ea2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ea8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002eaa:	e841 2300 	strex	r3, r2, [r1]
 8002eae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1e5      	bne.n	8002e82 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d119      	bne.n	8002ef2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	330c      	adds	r3, #12
 8002ec4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	e853 3f00 	ldrex	r3, [r3]
 8002ecc:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f023 0310 	bic.w	r3, r3, #16
 8002ed4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	330c      	adds	r3, #12
 8002edc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ede:	61ba      	str	r2, [r7, #24]
 8002ee0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee2:	6979      	ldr	r1, [r7, #20]
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	e841 2300 	strex	r3, r2, [r1]
 8002eea:	613b      	str	r3, [r7, #16]
   return(result);
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1e5      	bne.n	8002ebe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002f00:	bf00      	nop
 8002f02:	3754      	adds	r7, #84	@ 0x54
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr

08002f0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b084      	sub	sp, #16
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f7ff fd6c 	bl	8002a02 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f2a:	bf00      	nop
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b085      	sub	sp, #20
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b21      	cmp	r3, #33	@ 0x21
 8002f44:	d13e      	bne.n	8002fc4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f4e:	d114      	bne.n	8002f7a <UART_Transmit_IT+0x48>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d110      	bne.n	8002f7a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	461a      	mov	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	1c9a      	adds	r2, r3, #2
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	621a      	str	r2, [r3, #32]
 8002f78:	e008      	b.n	8002f8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	1c59      	adds	r1, r3, #1
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6211      	str	r1, [r2, #32]
 8002f84:	781a      	ldrb	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	4619      	mov	r1, r3
 8002f9a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10f      	bne.n	8002fc0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fbe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	e000      	b.n	8002fc6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002fc4:	2302      	movs	r3, #2
  }
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fe6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff fceb 	bl	80029cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b08c      	sub	sp, #48	@ 0x30
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b22      	cmp	r3, #34	@ 0x22
 8003012:	f040 80ae 	bne.w	8003172 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800301e:	d117      	bne.n	8003050 <UART_Receive_IT+0x50>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d113      	bne.n	8003050 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003028:	2300      	movs	r3, #0
 800302a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003030:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	b29b      	uxth	r3, r3
 800303a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800303e:	b29a      	uxth	r2, r3
 8003040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003042:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003048:	1c9a      	adds	r2, r3, #2
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	629a      	str	r2, [r3, #40]	@ 0x28
 800304e:	e026      	b.n	800309e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003054:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003056:	2300      	movs	r3, #0
 8003058:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003062:	d007      	beq.n	8003074 <UART_Receive_IT+0x74>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10a      	bne.n	8003082 <UART_Receive_IT+0x82>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d106      	bne.n	8003082 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	b2da      	uxtb	r2, r3
 800307c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800307e:	701a      	strb	r2, [r3, #0]
 8003080:	e008      	b.n	8003094 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	b2db      	uxtb	r3, r3
 800308a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800308e:	b2da      	uxtb	r2, r3
 8003090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003092:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	3b01      	subs	r3, #1
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	4619      	mov	r1, r3
 80030ac:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d15d      	bne.n	800316e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0220 	bic.w	r2, r2, #32
 80030c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695a      	ldr	r2, [r3, #20]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0201 	bic.w	r2, r2, #1
 80030e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d135      	bne.n	8003164 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	330c      	adds	r3, #12
 8003104:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	e853 3f00 	ldrex	r3, [r3]
 800310c:	613b      	str	r3, [r7, #16]
   return(result);
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f023 0310 	bic.w	r3, r3, #16
 8003114:	627b      	str	r3, [r7, #36]	@ 0x24
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	330c      	adds	r3, #12
 800311c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800311e:	623a      	str	r2, [r7, #32]
 8003120:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003122:	69f9      	ldr	r1, [r7, #28]
 8003124:	6a3a      	ldr	r2, [r7, #32]
 8003126:	e841 2300 	strex	r3, r2, [r1]
 800312a:	61bb      	str	r3, [r7, #24]
   return(result);
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1e5      	bne.n	80030fe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	2b10      	cmp	r3, #16
 800313e:	d10a      	bne.n	8003156 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003140:	2300      	movs	r3, #0
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800315a:	4619      	mov	r1, r3
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7fd f947 	bl	80003f0 <HAL_UARTEx_RxEventCallback>
 8003162:	e002      	b.n	800316a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff fc3a 	bl	80029de <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	e002      	b.n	8003174 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	e000      	b.n	8003174 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003172:	2302      	movs	r3, #2
  }
}
 8003174:	4618      	mov	r0, r3
 8003176:	3730      	adds	r7, #48	@ 0x30
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80031b6:	f023 030c 	bic.w	r3, r3, #12
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6812      	ldr	r2, [r2, #0]
 80031be:	68b9      	ldr	r1, [r7, #8]
 80031c0:	430b      	orrs	r3, r1
 80031c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a2c      	ldr	r2, [pc, #176]	@ (8003290 <UART_SetConfig+0x114>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d103      	bne.n	80031ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031e4:	f7fe ffc4 	bl	8002170 <HAL_RCC_GetPCLK2Freq>
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	e002      	b.n	80031f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031ec:	f7fe ffac 	bl	8002148 <HAL_RCC_GetPCLK1Freq>
 80031f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	009a      	lsls	r2, r3, #2
 80031fc:	441a      	add	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	fbb2 f3f3 	udiv	r3, r2, r3
 8003208:	4a22      	ldr	r2, [pc, #136]	@ (8003294 <UART_SetConfig+0x118>)
 800320a:	fba2 2303 	umull	r2, r3, r2, r3
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	0119      	lsls	r1, r3, #4
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	009a      	lsls	r2, r3, #2
 800321c:	441a      	add	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	fbb2 f2f3 	udiv	r2, r2, r3
 8003228:	4b1a      	ldr	r3, [pc, #104]	@ (8003294 <UART_SetConfig+0x118>)
 800322a:	fba3 0302 	umull	r0, r3, r3, r2
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	2064      	movs	r0, #100	@ 0x64
 8003232:	fb00 f303 	mul.w	r3, r0, r3
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	3332      	adds	r3, #50	@ 0x32
 800323c:	4a15      	ldr	r2, [pc, #84]	@ (8003294 <UART_SetConfig+0x118>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003248:	4419      	add	r1, r3
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	009a      	lsls	r2, r3, #2
 8003254:	441a      	add	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003260:	4b0c      	ldr	r3, [pc, #48]	@ (8003294 <UART_SetConfig+0x118>)
 8003262:	fba3 0302 	umull	r0, r3, r3, r2
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	2064      	movs	r0, #100	@ 0x64
 800326a:	fb00 f303 	mul.w	r3, r0, r3
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	3332      	adds	r3, #50	@ 0x32
 8003274:	4a07      	ldr	r2, [pc, #28]	@ (8003294 <UART_SetConfig+0x118>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	f003 020f 	and.w	r2, r3, #15
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	440a      	add	r2, r1
 8003286:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003288:	bf00      	nop
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40013800 	.word	0x40013800
 8003294:	51eb851f 	.word	0x51eb851f

08003298 <siprintf>:
 8003298:	b40e      	push	{r1, r2, r3}
 800329a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800329e:	b510      	push	{r4, lr}
 80032a0:	2400      	movs	r4, #0
 80032a2:	b09d      	sub	sp, #116	@ 0x74
 80032a4:	ab1f      	add	r3, sp, #124	@ 0x7c
 80032a6:	9002      	str	r0, [sp, #8]
 80032a8:	9006      	str	r0, [sp, #24]
 80032aa:	9107      	str	r1, [sp, #28]
 80032ac:	9104      	str	r1, [sp, #16]
 80032ae:	4809      	ldr	r0, [pc, #36]	@ (80032d4 <siprintf+0x3c>)
 80032b0:	4909      	ldr	r1, [pc, #36]	@ (80032d8 <siprintf+0x40>)
 80032b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80032b6:	9105      	str	r1, [sp, #20]
 80032b8:	6800      	ldr	r0, [r0, #0]
 80032ba:	a902      	add	r1, sp, #8
 80032bc:	9301      	str	r3, [sp, #4]
 80032be:	941b      	str	r4, [sp, #108]	@ 0x6c
 80032c0:	f000 f9a0 	bl	8003604 <_svfiprintf_r>
 80032c4:	9b02      	ldr	r3, [sp, #8]
 80032c6:	701c      	strb	r4, [r3, #0]
 80032c8:	b01d      	add	sp, #116	@ 0x74
 80032ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032ce:	b003      	add	sp, #12
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	2000000c 	.word	0x2000000c
 80032d8:	ffff0208 	.word	0xffff0208

080032dc <memset>:
 80032dc:	4603      	mov	r3, r0
 80032de:	4402      	add	r2, r0
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d100      	bne.n	80032e6 <memset+0xa>
 80032e4:	4770      	bx	lr
 80032e6:	f803 1b01 	strb.w	r1, [r3], #1
 80032ea:	e7f9      	b.n	80032e0 <memset+0x4>

080032ec <__errno>:
 80032ec:	4b01      	ldr	r3, [pc, #4]	@ (80032f4 <__errno+0x8>)
 80032ee:	6818      	ldr	r0, [r3, #0]
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	2000000c 	.word	0x2000000c

080032f8 <__libc_init_array>:
 80032f8:	b570      	push	{r4, r5, r6, lr}
 80032fa:	2600      	movs	r6, #0
 80032fc:	4d0c      	ldr	r5, [pc, #48]	@ (8003330 <__libc_init_array+0x38>)
 80032fe:	4c0d      	ldr	r4, [pc, #52]	@ (8003334 <__libc_init_array+0x3c>)
 8003300:	1b64      	subs	r4, r4, r5
 8003302:	10a4      	asrs	r4, r4, #2
 8003304:	42a6      	cmp	r6, r4
 8003306:	d109      	bne.n	800331c <__libc_init_array+0x24>
 8003308:	f000 fc76 	bl	8003bf8 <_init>
 800330c:	2600      	movs	r6, #0
 800330e:	4d0a      	ldr	r5, [pc, #40]	@ (8003338 <__libc_init_array+0x40>)
 8003310:	4c0a      	ldr	r4, [pc, #40]	@ (800333c <__libc_init_array+0x44>)
 8003312:	1b64      	subs	r4, r4, r5
 8003314:	10a4      	asrs	r4, r4, #2
 8003316:	42a6      	cmp	r6, r4
 8003318:	d105      	bne.n	8003326 <__libc_init_array+0x2e>
 800331a:	bd70      	pop	{r4, r5, r6, pc}
 800331c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003320:	4798      	blx	r3
 8003322:	3601      	adds	r6, #1
 8003324:	e7ee      	b.n	8003304 <__libc_init_array+0xc>
 8003326:	f855 3b04 	ldr.w	r3, [r5], #4
 800332a:	4798      	blx	r3
 800332c:	3601      	adds	r6, #1
 800332e:	e7f2      	b.n	8003316 <__libc_init_array+0x1e>
 8003330:	08003d4c 	.word	0x08003d4c
 8003334:	08003d4c 	.word	0x08003d4c
 8003338:	08003d4c 	.word	0x08003d4c
 800333c:	08003d50 	.word	0x08003d50

08003340 <__retarget_lock_acquire_recursive>:
 8003340:	4770      	bx	lr

08003342 <__retarget_lock_release_recursive>:
 8003342:	4770      	bx	lr

08003344 <memcpy>:
 8003344:	440a      	add	r2, r1
 8003346:	4291      	cmp	r1, r2
 8003348:	f100 33ff 	add.w	r3, r0, #4294967295
 800334c:	d100      	bne.n	8003350 <memcpy+0xc>
 800334e:	4770      	bx	lr
 8003350:	b510      	push	{r4, lr}
 8003352:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003356:	4291      	cmp	r1, r2
 8003358:	f803 4f01 	strb.w	r4, [r3, #1]!
 800335c:	d1f9      	bne.n	8003352 <memcpy+0xe>
 800335e:	bd10      	pop	{r4, pc}

08003360 <_free_r>:
 8003360:	b538      	push	{r3, r4, r5, lr}
 8003362:	4605      	mov	r5, r0
 8003364:	2900      	cmp	r1, #0
 8003366:	d040      	beq.n	80033ea <_free_r+0x8a>
 8003368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800336c:	1f0c      	subs	r4, r1, #4
 800336e:	2b00      	cmp	r3, #0
 8003370:	bfb8      	it	lt
 8003372:	18e4      	addlt	r4, r4, r3
 8003374:	f000 f8de 	bl	8003534 <__malloc_lock>
 8003378:	4a1c      	ldr	r2, [pc, #112]	@ (80033ec <_free_r+0x8c>)
 800337a:	6813      	ldr	r3, [r2, #0]
 800337c:	b933      	cbnz	r3, 800338c <_free_r+0x2c>
 800337e:	6063      	str	r3, [r4, #4]
 8003380:	6014      	str	r4, [r2, #0]
 8003382:	4628      	mov	r0, r5
 8003384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003388:	f000 b8da 	b.w	8003540 <__malloc_unlock>
 800338c:	42a3      	cmp	r3, r4
 800338e:	d908      	bls.n	80033a2 <_free_r+0x42>
 8003390:	6820      	ldr	r0, [r4, #0]
 8003392:	1821      	adds	r1, r4, r0
 8003394:	428b      	cmp	r3, r1
 8003396:	bf01      	itttt	eq
 8003398:	6819      	ldreq	r1, [r3, #0]
 800339a:	685b      	ldreq	r3, [r3, #4]
 800339c:	1809      	addeq	r1, r1, r0
 800339e:	6021      	streq	r1, [r4, #0]
 80033a0:	e7ed      	b.n	800337e <_free_r+0x1e>
 80033a2:	461a      	mov	r2, r3
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	b10b      	cbz	r3, 80033ac <_free_r+0x4c>
 80033a8:	42a3      	cmp	r3, r4
 80033aa:	d9fa      	bls.n	80033a2 <_free_r+0x42>
 80033ac:	6811      	ldr	r1, [r2, #0]
 80033ae:	1850      	adds	r0, r2, r1
 80033b0:	42a0      	cmp	r0, r4
 80033b2:	d10b      	bne.n	80033cc <_free_r+0x6c>
 80033b4:	6820      	ldr	r0, [r4, #0]
 80033b6:	4401      	add	r1, r0
 80033b8:	1850      	adds	r0, r2, r1
 80033ba:	4283      	cmp	r3, r0
 80033bc:	6011      	str	r1, [r2, #0]
 80033be:	d1e0      	bne.n	8003382 <_free_r+0x22>
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	4408      	add	r0, r1
 80033c6:	6010      	str	r0, [r2, #0]
 80033c8:	6053      	str	r3, [r2, #4]
 80033ca:	e7da      	b.n	8003382 <_free_r+0x22>
 80033cc:	d902      	bls.n	80033d4 <_free_r+0x74>
 80033ce:	230c      	movs	r3, #12
 80033d0:	602b      	str	r3, [r5, #0]
 80033d2:	e7d6      	b.n	8003382 <_free_r+0x22>
 80033d4:	6820      	ldr	r0, [r4, #0]
 80033d6:	1821      	adds	r1, r4, r0
 80033d8:	428b      	cmp	r3, r1
 80033da:	bf01      	itttt	eq
 80033dc:	6819      	ldreq	r1, [r3, #0]
 80033de:	685b      	ldreq	r3, [r3, #4]
 80033e0:	1809      	addeq	r1, r1, r0
 80033e2:	6021      	streq	r1, [r4, #0]
 80033e4:	6063      	str	r3, [r4, #4]
 80033e6:	6054      	str	r4, [r2, #4]
 80033e8:	e7cb      	b.n	8003382 <_free_r+0x22>
 80033ea:	bd38      	pop	{r3, r4, r5, pc}
 80033ec:	2000128c 	.word	0x2000128c

080033f0 <sbrk_aligned>:
 80033f0:	b570      	push	{r4, r5, r6, lr}
 80033f2:	4e0f      	ldr	r6, [pc, #60]	@ (8003430 <sbrk_aligned+0x40>)
 80033f4:	460c      	mov	r4, r1
 80033f6:	6831      	ldr	r1, [r6, #0]
 80033f8:	4605      	mov	r5, r0
 80033fa:	b911      	cbnz	r1, 8003402 <sbrk_aligned+0x12>
 80033fc:	f000 fba8 	bl	8003b50 <_sbrk_r>
 8003400:	6030      	str	r0, [r6, #0]
 8003402:	4621      	mov	r1, r4
 8003404:	4628      	mov	r0, r5
 8003406:	f000 fba3 	bl	8003b50 <_sbrk_r>
 800340a:	1c43      	adds	r3, r0, #1
 800340c:	d103      	bne.n	8003416 <sbrk_aligned+0x26>
 800340e:	f04f 34ff 	mov.w	r4, #4294967295
 8003412:	4620      	mov	r0, r4
 8003414:	bd70      	pop	{r4, r5, r6, pc}
 8003416:	1cc4      	adds	r4, r0, #3
 8003418:	f024 0403 	bic.w	r4, r4, #3
 800341c:	42a0      	cmp	r0, r4
 800341e:	d0f8      	beq.n	8003412 <sbrk_aligned+0x22>
 8003420:	1a21      	subs	r1, r4, r0
 8003422:	4628      	mov	r0, r5
 8003424:	f000 fb94 	bl	8003b50 <_sbrk_r>
 8003428:	3001      	adds	r0, #1
 800342a:	d1f2      	bne.n	8003412 <sbrk_aligned+0x22>
 800342c:	e7ef      	b.n	800340e <sbrk_aligned+0x1e>
 800342e:	bf00      	nop
 8003430:	20001288 	.word	0x20001288

08003434 <_malloc_r>:
 8003434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003438:	1ccd      	adds	r5, r1, #3
 800343a:	f025 0503 	bic.w	r5, r5, #3
 800343e:	3508      	adds	r5, #8
 8003440:	2d0c      	cmp	r5, #12
 8003442:	bf38      	it	cc
 8003444:	250c      	movcc	r5, #12
 8003446:	2d00      	cmp	r5, #0
 8003448:	4606      	mov	r6, r0
 800344a:	db01      	blt.n	8003450 <_malloc_r+0x1c>
 800344c:	42a9      	cmp	r1, r5
 800344e:	d904      	bls.n	800345a <_malloc_r+0x26>
 8003450:	230c      	movs	r3, #12
 8003452:	6033      	str	r3, [r6, #0]
 8003454:	2000      	movs	r0, #0
 8003456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800345a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003530 <_malloc_r+0xfc>
 800345e:	f000 f869 	bl	8003534 <__malloc_lock>
 8003462:	f8d8 3000 	ldr.w	r3, [r8]
 8003466:	461c      	mov	r4, r3
 8003468:	bb44      	cbnz	r4, 80034bc <_malloc_r+0x88>
 800346a:	4629      	mov	r1, r5
 800346c:	4630      	mov	r0, r6
 800346e:	f7ff ffbf 	bl	80033f0 <sbrk_aligned>
 8003472:	1c43      	adds	r3, r0, #1
 8003474:	4604      	mov	r4, r0
 8003476:	d158      	bne.n	800352a <_malloc_r+0xf6>
 8003478:	f8d8 4000 	ldr.w	r4, [r8]
 800347c:	4627      	mov	r7, r4
 800347e:	2f00      	cmp	r7, #0
 8003480:	d143      	bne.n	800350a <_malloc_r+0xd6>
 8003482:	2c00      	cmp	r4, #0
 8003484:	d04b      	beq.n	800351e <_malloc_r+0xea>
 8003486:	6823      	ldr	r3, [r4, #0]
 8003488:	4639      	mov	r1, r7
 800348a:	4630      	mov	r0, r6
 800348c:	eb04 0903 	add.w	r9, r4, r3
 8003490:	f000 fb5e 	bl	8003b50 <_sbrk_r>
 8003494:	4581      	cmp	r9, r0
 8003496:	d142      	bne.n	800351e <_malloc_r+0xea>
 8003498:	6821      	ldr	r1, [r4, #0]
 800349a:	4630      	mov	r0, r6
 800349c:	1a6d      	subs	r5, r5, r1
 800349e:	4629      	mov	r1, r5
 80034a0:	f7ff ffa6 	bl	80033f0 <sbrk_aligned>
 80034a4:	3001      	adds	r0, #1
 80034a6:	d03a      	beq.n	800351e <_malloc_r+0xea>
 80034a8:	6823      	ldr	r3, [r4, #0]
 80034aa:	442b      	add	r3, r5
 80034ac:	6023      	str	r3, [r4, #0]
 80034ae:	f8d8 3000 	ldr.w	r3, [r8]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	bb62      	cbnz	r2, 8003510 <_malloc_r+0xdc>
 80034b6:	f8c8 7000 	str.w	r7, [r8]
 80034ba:	e00f      	b.n	80034dc <_malloc_r+0xa8>
 80034bc:	6822      	ldr	r2, [r4, #0]
 80034be:	1b52      	subs	r2, r2, r5
 80034c0:	d420      	bmi.n	8003504 <_malloc_r+0xd0>
 80034c2:	2a0b      	cmp	r2, #11
 80034c4:	d917      	bls.n	80034f6 <_malloc_r+0xc2>
 80034c6:	1961      	adds	r1, r4, r5
 80034c8:	42a3      	cmp	r3, r4
 80034ca:	6025      	str	r5, [r4, #0]
 80034cc:	bf18      	it	ne
 80034ce:	6059      	strne	r1, [r3, #4]
 80034d0:	6863      	ldr	r3, [r4, #4]
 80034d2:	bf08      	it	eq
 80034d4:	f8c8 1000 	streq.w	r1, [r8]
 80034d8:	5162      	str	r2, [r4, r5]
 80034da:	604b      	str	r3, [r1, #4]
 80034dc:	4630      	mov	r0, r6
 80034de:	f000 f82f 	bl	8003540 <__malloc_unlock>
 80034e2:	f104 000b 	add.w	r0, r4, #11
 80034e6:	1d23      	adds	r3, r4, #4
 80034e8:	f020 0007 	bic.w	r0, r0, #7
 80034ec:	1ac2      	subs	r2, r0, r3
 80034ee:	bf1c      	itt	ne
 80034f0:	1a1b      	subne	r3, r3, r0
 80034f2:	50a3      	strne	r3, [r4, r2]
 80034f4:	e7af      	b.n	8003456 <_malloc_r+0x22>
 80034f6:	6862      	ldr	r2, [r4, #4]
 80034f8:	42a3      	cmp	r3, r4
 80034fa:	bf0c      	ite	eq
 80034fc:	f8c8 2000 	streq.w	r2, [r8]
 8003500:	605a      	strne	r2, [r3, #4]
 8003502:	e7eb      	b.n	80034dc <_malloc_r+0xa8>
 8003504:	4623      	mov	r3, r4
 8003506:	6864      	ldr	r4, [r4, #4]
 8003508:	e7ae      	b.n	8003468 <_malloc_r+0x34>
 800350a:	463c      	mov	r4, r7
 800350c:	687f      	ldr	r7, [r7, #4]
 800350e:	e7b6      	b.n	800347e <_malloc_r+0x4a>
 8003510:	461a      	mov	r2, r3
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	42a3      	cmp	r3, r4
 8003516:	d1fb      	bne.n	8003510 <_malloc_r+0xdc>
 8003518:	2300      	movs	r3, #0
 800351a:	6053      	str	r3, [r2, #4]
 800351c:	e7de      	b.n	80034dc <_malloc_r+0xa8>
 800351e:	230c      	movs	r3, #12
 8003520:	4630      	mov	r0, r6
 8003522:	6033      	str	r3, [r6, #0]
 8003524:	f000 f80c 	bl	8003540 <__malloc_unlock>
 8003528:	e794      	b.n	8003454 <_malloc_r+0x20>
 800352a:	6005      	str	r5, [r0, #0]
 800352c:	e7d6      	b.n	80034dc <_malloc_r+0xa8>
 800352e:	bf00      	nop
 8003530:	2000128c 	.word	0x2000128c

08003534 <__malloc_lock>:
 8003534:	4801      	ldr	r0, [pc, #4]	@ (800353c <__malloc_lock+0x8>)
 8003536:	f7ff bf03 	b.w	8003340 <__retarget_lock_acquire_recursive>
 800353a:	bf00      	nop
 800353c:	20001284 	.word	0x20001284

08003540 <__malloc_unlock>:
 8003540:	4801      	ldr	r0, [pc, #4]	@ (8003548 <__malloc_unlock+0x8>)
 8003542:	f7ff befe 	b.w	8003342 <__retarget_lock_release_recursive>
 8003546:	bf00      	nop
 8003548:	20001284 	.word	0x20001284

0800354c <__ssputs_r>:
 800354c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003550:	461f      	mov	r7, r3
 8003552:	688e      	ldr	r6, [r1, #8]
 8003554:	4682      	mov	sl, r0
 8003556:	42be      	cmp	r6, r7
 8003558:	460c      	mov	r4, r1
 800355a:	4690      	mov	r8, r2
 800355c:	680b      	ldr	r3, [r1, #0]
 800355e:	d82d      	bhi.n	80035bc <__ssputs_r+0x70>
 8003560:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003564:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003568:	d026      	beq.n	80035b8 <__ssputs_r+0x6c>
 800356a:	6965      	ldr	r5, [r4, #20]
 800356c:	6909      	ldr	r1, [r1, #16]
 800356e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003572:	eba3 0901 	sub.w	r9, r3, r1
 8003576:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800357a:	1c7b      	adds	r3, r7, #1
 800357c:	444b      	add	r3, r9
 800357e:	106d      	asrs	r5, r5, #1
 8003580:	429d      	cmp	r5, r3
 8003582:	bf38      	it	cc
 8003584:	461d      	movcc	r5, r3
 8003586:	0553      	lsls	r3, r2, #21
 8003588:	d527      	bpl.n	80035da <__ssputs_r+0x8e>
 800358a:	4629      	mov	r1, r5
 800358c:	f7ff ff52 	bl	8003434 <_malloc_r>
 8003590:	4606      	mov	r6, r0
 8003592:	b360      	cbz	r0, 80035ee <__ssputs_r+0xa2>
 8003594:	464a      	mov	r2, r9
 8003596:	6921      	ldr	r1, [r4, #16]
 8003598:	f7ff fed4 	bl	8003344 <memcpy>
 800359c:	89a3      	ldrh	r3, [r4, #12]
 800359e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80035a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035a6:	81a3      	strh	r3, [r4, #12]
 80035a8:	6126      	str	r6, [r4, #16]
 80035aa:	444e      	add	r6, r9
 80035ac:	6026      	str	r6, [r4, #0]
 80035ae:	463e      	mov	r6, r7
 80035b0:	6165      	str	r5, [r4, #20]
 80035b2:	eba5 0509 	sub.w	r5, r5, r9
 80035b6:	60a5      	str	r5, [r4, #8]
 80035b8:	42be      	cmp	r6, r7
 80035ba:	d900      	bls.n	80035be <__ssputs_r+0x72>
 80035bc:	463e      	mov	r6, r7
 80035be:	4632      	mov	r2, r6
 80035c0:	4641      	mov	r1, r8
 80035c2:	6820      	ldr	r0, [r4, #0]
 80035c4:	f000 faaa 	bl	8003b1c <memmove>
 80035c8:	2000      	movs	r0, #0
 80035ca:	68a3      	ldr	r3, [r4, #8]
 80035cc:	1b9b      	subs	r3, r3, r6
 80035ce:	60a3      	str	r3, [r4, #8]
 80035d0:	6823      	ldr	r3, [r4, #0]
 80035d2:	4433      	add	r3, r6
 80035d4:	6023      	str	r3, [r4, #0]
 80035d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035da:	462a      	mov	r2, r5
 80035dc:	f000 fad6 	bl	8003b8c <_realloc_r>
 80035e0:	4606      	mov	r6, r0
 80035e2:	2800      	cmp	r0, #0
 80035e4:	d1e0      	bne.n	80035a8 <__ssputs_r+0x5c>
 80035e6:	4650      	mov	r0, sl
 80035e8:	6921      	ldr	r1, [r4, #16]
 80035ea:	f7ff feb9 	bl	8003360 <_free_r>
 80035ee:	230c      	movs	r3, #12
 80035f0:	f8ca 3000 	str.w	r3, [sl]
 80035f4:	89a3      	ldrh	r3, [r4, #12]
 80035f6:	f04f 30ff 	mov.w	r0, #4294967295
 80035fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035fe:	81a3      	strh	r3, [r4, #12]
 8003600:	e7e9      	b.n	80035d6 <__ssputs_r+0x8a>
	...

08003604 <_svfiprintf_r>:
 8003604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003608:	4698      	mov	r8, r3
 800360a:	898b      	ldrh	r3, [r1, #12]
 800360c:	4607      	mov	r7, r0
 800360e:	061b      	lsls	r3, r3, #24
 8003610:	460d      	mov	r5, r1
 8003612:	4614      	mov	r4, r2
 8003614:	b09d      	sub	sp, #116	@ 0x74
 8003616:	d510      	bpl.n	800363a <_svfiprintf_r+0x36>
 8003618:	690b      	ldr	r3, [r1, #16]
 800361a:	b973      	cbnz	r3, 800363a <_svfiprintf_r+0x36>
 800361c:	2140      	movs	r1, #64	@ 0x40
 800361e:	f7ff ff09 	bl	8003434 <_malloc_r>
 8003622:	6028      	str	r0, [r5, #0]
 8003624:	6128      	str	r0, [r5, #16]
 8003626:	b930      	cbnz	r0, 8003636 <_svfiprintf_r+0x32>
 8003628:	230c      	movs	r3, #12
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	f04f 30ff 	mov.w	r0, #4294967295
 8003630:	b01d      	add	sp, #116	@ 0x74
 8003632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003636:	2340      	movs	r3, #64	@ 0x40
 8003638:	616b      	str	r3, [r5, #20]
 800363a:	2300      	movs	r3, #0
 800363c:	9309      	str	r3, [sp, #36]	@ 0x24
 800363e:	2320      	movs	r3, #32
 8003640:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003644:	2330      	movs	r3, #48	@ 0x30
 8003646:	f04f 0901 	mov.w	r9, #1
 800364a:	f8cd 800c 	str.w	r8, [sp, #12]
 800364e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80037e8 <_svfiprintf_r+0x1e4>
 8003652:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003656:	4623      	mov	r3, r4
 8003658:	469a      	mov	sl, r3
 800365a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800365e:	b10a      	cbz	r2, 8003664 <_svfiprintf_r+0x60>
 8003660:	2a25      	cmp	r2, #37	@ 0x25
 8003662:	d1f9      	bne.n	8003658 <_svfiprintf_r+0x54>
 8003664:	ebba 0b04 	subs.w	fp, sl, r4
 8003668:	d00b      	beq.n	8003682 <_svfiprintf_r+0x7e>
 800366a:	465b      	mov	r3, fp
 800366c:	4622      	mov	r2, r4
 800366e:	4629      	mov	r1, r5
 8003670:	4638      	mov	r0, r7
 8003672:	f7ff ff6b 	bl	800354c <__ssputs_r>
 8003676:	3001      	adds	r0, #1
 8003678:	f000 80a7 	beq.w	80037ca <_svfiprintf_r+0x1c6>
 800367c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800367e:	445a      	add	r2, fp
 8003680:	9209      	str	r2, [sp, #36]	@ 0x24
 8003682:	f89a 3000 	ldrb.w	r3, [sl]
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 809f 	beq.w	80037ca <_svfiprintf_r+0x1c6>
 800368c:	2300      	movs	r3, #0
 800368e:	f04f 32ff 	mov.w	r2, #4294967295
 8003692:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003696:	f10a 0a01 	add.w	sl, sl, #1
 800369a:	9304      	str	r3, [sp, #16]
 800369c:	9307      	str	r3, [sp, #28]
 800369e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80036a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80036a4:	4654      	mov	r4, sl
 80036a6:	2205      	movs	r2, #5
 80036a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036ac:	484e      	ldr	r0, [pc, #312]	@ (80037e8 <_svfiprintf_r+0x1e4>)
 80036ae:	f000 fa5f 	bl	8003b70 <memchr>
 80036b2:	9a04      	ldr	r2, [sp, #16]
 80036b4:	b9d8      	cbnz	r0, 80036ee <_svfiprintf_r+0xea>
 80036b6:	06d0      	lsls	r0, r2, #27
 80036b8:	bf44      	itt	mi
 80036ba:	2320      	movmi	r3, #32
 80036bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036c0:	0711      	lsls	r1, r2, #28
 80036c2:	bf44      	itt	mi
 80036c4:	232b      	movmi	r3, #43	@ 0x2b
 80036c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036ca:	f89a 3000 	ldrb.w	r3, [sl]
 80036ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80036d0:	d015      	beq.n	80036fe <_svfiprintf_r+0xfa>
 80036d2:	4654      	mov	r4, sl
 80036d4:	2000      	movs	r0, #0
 80036d6:	f04f 0c0a 	mov.w	ip, #10
 80036da:	9a07      	ldr	r2, [sp, #28]
 80036dc:	4621      	mov	r1, r4
 80036de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036e2:	3b30      	subs	r3, #48	@ 0x30
 80036e4:	2b09      	cmp	r3, #9
 80036e6:	d94b      	bls.n	8003780 <_svfiprintf_r+0x17c>
 80036e8:	b1b0      	cbz	r0, 8003718 <_svfiprintf_r+0x114>
 80036ea:	9207      	str	r2, [sp, #28]
 80036ec:	e014      	b.n	8003718 <_svfiprintf_r+0x114>
 80036ee:	eba0 0308 	sub.w	r3, r0, r8
 80036f2:	fa09 f303 	lsl.w	r3, r9, r3
 80036f6:	4313      	orrs	r3, r2
 80036f8:	46a2      	mov	sl, r4
 80036fa:	9304      	str	r3, [sp, #16]
 80036fc:	e7d2      	b.n	80036a4 <_svfiprintf_r+0xa0>
 80036fe:	9b03      	ldr	r3, [sp, #12]
 8003700:	1d19      	adds	r1, r3, #4
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	9103      	str	r1, [sp, #12]
 8003706:	2b00      	cmp	r3, #0
 8003708:	bfbb      	ittet	lt
 800370a:	425b      	neglt	r3, r3
 800370c:	f042 0202 	orrlt.w	r2, r2, #2
 8003710:	9307      	strge	r3, [sp, #28]
 8003712:	9307      	strlt	r3, [sp, #28]
 8003714:	bfb8      	it	lt
 8003716:	9204      	strlt	r2, [sp, #16]
 8003718:	7823      	ldrb	r3, [r4, #0]
 800371a:	2b2e      	cmp	r3, #46	@ 0x2e
 800371c:	d10a      	bne.n	8003734 <_svfiprintf_r+0x130>
 800371e:	7863      	ldrb	r3, [r4, #1]
 8003720:	2b2a      	cmp	r3, #42	@ 0x2a
 8003722:	d132      	bne.n	800378a <_svfiprintf_r+0x186>
 8003724:	9b03      	ldr	r3, [sp, #12]
 8003726:	3402      	adds	r4, #2
 8003728:	1d1a      	adds	r2, r3, #4
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	9203      	str	r2, [sp, #12]
 800372e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003732:	9305      	str	r3, [sp, #20]
 8003734:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80037ec <_svfiprintf_r+0x1e8>
 8003738:	2203      	movs	r2, #3
 800373a:	4650      	mov	r0, sl
 800373c:	7821      	ldrb	r1, [r4, #0]
 800373e:	f000 fa17 	bl	8003b70 <memchr>
 8003742:	b138      	cbz	r0, 8003754 <_svfiprintf_r+0x150>
 8003744:	2240      	movs	r2, #64	@ 0x40
 8003746:	9b04      	ldr	r3, [sp, #16]
 8003748:	eba0 000a 	sub.w	r0, r0, sl
 800374c:	4082      	lsls	r2, r0
 800374e:	4313      	orrs	r3, r2
 8003750:	3401      	adds	r4, #1
 8003752:	9304      	str	r3, [sp, #16]
 8003754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003758:	2206      	movs	r2, #6
 800375a:	4825      	ldr	r0, [pc, #148]	@ (80037f0 <_svfiprintf_r+0x1ec>)
 800375c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003760:	f000 fa06 	bl	8003b70 <memchr>
 8003764:	2800      	cmp	r0, #0
 8003766:	d036      	beq.n	80037d6 <_svfiprintf_r+0x1d2>
 8003768:	4b22      	ldr	r3, [pc, #136]	@ (80037f4 <_svfiprintf_r+0x1f0>)
 800376a:	bb1b      	cbnz	r3, 80037b4 <_svfiprintf_r+0x1b0>
 800376c:	9b03      	ldr	r3, [sp, #12]
 800376e:	3307      	adds	r3, #7
 8003770:	f023 0307 	bic.w	r3, r3, #7
 8003774:	3308      	adds	r3, #8
 8003776:	9303      	str	r3, [sp, #12]
 8003778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800377a:	4433      	add	r3, r6
 800377c:	9309      	str	r3, [sp, #36]	@ 0x24
 800377e:	e76a      	b.n	8003656 <_svfiprintf_r+0x52>
 8003780:	460c      	mov	r4, r1
 8003782:	2001      	movs	r0, #1
 8003784:	fb0c 3202 	mla	r2, ip, r2, r3
 8003788:	e7a8      	b.n	80036dc <_svfiprintf_r+0xd8>
 800378a:	2300      	movs	r3, #0
 800378c:	f04f 0c0a 	mov.w	ip, #10
 8003790:	4619      	mov	r1, r3
 8003792:	3401      	adds	r4, #1
 8003794:	9305      	str	r3, [sp, #20]
 8003796:	4620      	mov	r0, r4
 8003798:	f810 2b01 	ldrb.w	r2, [r0], #1
 800379c:	3a30      	subs	r2, #48	@ 0x30
 800379e:	2a09      	cmp	r2, #9
 80037a0:	d903      	bls.n	80037aa <_svfiprintf_r+0x1a6>
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0c6      	beq.n	8003734 <_svfiprintf_r+0x130>
 80037a6:	9105      	str	r1, [sp, #20]
 80037a8:	e7c4      	b.n	8003734 <_svfiprintf_r+0x130>
 80037aa:	4604      	mov	r4, r0
 80037ac:	2301      	movs	r3, #1
 80037ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80037b2:	e7f0      	b.n	8003796 <_svfiprintf_r+0x192>
 80037b4:	ab03      	add	r3, sp, #12
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	462a      	mov	r2, r5
 80037ba:	4638      	mov	r0, r7
 80037bc:	4b0e      	ldr	r3, [pc, #56]	@ (80037f8 <_svfiprintf_r+0x1f4>)
 80037be:	a904      	add	r1, sp, #16
 80037c0:	f3af 8000 	nop.w
 80037c4:	1c42      	adds	r2, r0, #1
 80037c6:	4606      	mov	r6, r0
 80037c8:	d1d6      	bne.n	8003778 <_svfiprintf_r+0x174>
 80037ca:	89ab      	ldrh	r3, [r5, #12]
 80037cc:	065b      	lsls	r3, r3, #25
 80037ce:	f53f af2d 	bmi.w	800362c <_svfiprintf_r+0x28>
 80037d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80037d4:	e72c      	b.n	8003630 <_svfiprintf_r+0x2c>
 80037d6:	ab03      	add	r3, sp, #12
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	462a      	mov	r2, r5
 80037dc:	4638      	mov	r0, r7
 80037de:	4b06      	ldr	r3, [pc, #24]	@ (80037f8 <_svfiprintf_r+0x1f4>)
 80037e0:	a904      	add	r1, sp, #16
 80037e2:	f000 f87d 	bl	80038e0 <_printf_i>
 80037e6:	e7ed      	b.n	80037c4 <_svfiprintf_r+0x1c0>
 80037e8:	08003d16 	.word	0x08003d16
 80037ec:	08003d1c 	.word	0x08003d1c
 80037f0:	08003d20 	.word	0x08003d20
 80037f4:	00000000 	.word	0x00000000
 80037f8:	0800354d 	.word	0x0800354d

080037fc <_printf_common>:
 80037fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003800:	4616      	mov	r6, r2
 8003802:	4698      	mov	r8, r3
 8003804:	688a      	ldr	r2, [r1, #8]
 8003806:	690b      	ldr	r3, [r1, #16]
 8003808:	4607      	mov	r7, r0
 800380a:	4293      	cmp	r3, r2
 800380c:	bfb8      	it	lt
 800380e:	4613      	movlt	r3, r2
 8003810:	6033      	str	r3, [r6, #0]
 8003812:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003816:	460c      	mov	r4, r1
 8003818:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800381c:	b10a      	cbz	r2, 8003822 <_printf_common+0x26>
 800381e:	3301      	adds	r3, #1
 8003820:	6033      	str	r3, [r6, #0]
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	0699      	lsls	r1, r3, #26
 8003826:	bf42      	ittt	mi
 8003828:	6833      	ldrmi	r3, [r6, #0]
 800382a:	3302      	addmi	r3, #2
 800382c:	6033      	strmi	r3, [r6, #0]
 800382e:	6825      	ldr	r5, [r4, #0]
 8003830:	f015 0506 	ands.w	r5, r5, #6
 8003834:	d106      	bne.n	8003844 <_printf_common+0x48>
 8003836:	f104 0a19 	add.w	sl, r4, #25
 800383a:	68e3      	ldr	r3, [r4, #12]
 800383c:	6832      	ldr	r2, [r6, #0]
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	42ab      	cmp	r3, r5
 8003842:	dc2b      	bgt.n	800389c <_printf_common+0xa0>
 8003844:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003848:	6822      	ldr	r2, [r4, #0]
 800384a:	3b00      	subs	r3, #0
 800384c:	bf18      	it	ne
 800384e:	2301      	movne	r3, #1
 8003850:	0692      	lsls	r2, r2, #26
 8003852:	d430      	bmi.n	80038b6 <_printf_common+0xba>
 8003854:	4641      	mov	r1, r8
 8003856:	4638      	mov	r0, r7
 8003858:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800385c:	47c8      	blx	r9
 800385e:	3001      	adds	r0, #1
 8003860:	d023      	beq.n	80038aa <_printf_common+0xae>
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	6922      	ldr	r2, [r4, #16]
 8003866:	f003 0306 	and.w	r3, r3, #6
 800386a:	2b04      	cmp	r3, #4
 800386c:	bf14      	ite	ne
 800386e:	2500      	movne	r5, #0
 8003870:	6833      	ldreq	r3, [r6, #0]
 8003872:	f04f 0600 	mov.w	r6, #0
 8003876:	bf08      	it	eq
 8003878:	68e5      	ldreq	r5, [r4, #12]
 800387a:	f104 041a 	add.w	r4, r4, #26
 800387e:	bf08      	it	eq
 8003880:	1aed      	subeq	r5, r5, r3
 8003882:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003886:	bf08      	it	eq
 8003888:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800388c:	4293      	cmp	r3, r2
 800388e:	bfc4      	itt	gt
 8003890:	1a9b      	subgt	r3, r3, r2
 8003892:	18ed      	addgt	r5, r5, r3
 8003894:	42b5      	cmp	r5, r6
 8003896:	d11a      	bne.n	80038ce <_printf_common+0xd2>
 8003898:	2000      	movs	r0, #0
 800389a:	e008      	b.n	80038ae <_printf_common+0xb2>
 800389c:	2301      	movs	r3, #1
 800389e:	4652      	mov	r2, sl
 80038a0:	4641      	mov	r1, r8
 80038a2:	4638      	mov	r0, r7
 80038a4:	47c8      	blx	r9
 80038a6:	3001      	adds	r0, #1
 80038a8:	d103      	bne.n	80038b2 <_printf_common+0xb6>
 80038aa:	f04f 30ff 	mov.w	r0, #4294967295
 80038ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038b2:	3501      	adds	r5, #1
 80038b4:	e7c1      	b.n	800383a <_printf_common+0x3e>
 80038b6:	2030      	movs	r0, #48	@ 0x30
 80038b8:	18e1      	adds	r1, r4, r3
 80038ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80038c4:	4422      	add	r2, r4
 80038c6:	3302      	adds	r3, #2
 80038c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80038cc:	e7c2      	b.n	8003854 <_printf_common+0x58>
 80038ce:	2301      	movs	r3, #1
 80038d0:	4622      	mov	r2, r4
 80038d2:	4641      	mov	r1, r8
 80038d4:	4638      	mov	r0, r7
 80038d6:	47c8      	blx	r9
 80038d8:	3001      	adds	r0, #1
 80038da:	d0e6      	beq.n	80038aa <_printf_common+0xae>
 80038dc:	3601      	adds	r6, #1
 80038de:	e7d9      	b.n	8003894 <_printf_common+0x98>

080038e0 <_printf_i>:
 80038e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038e4:	7e0f      	ldrb	r7, [r1, #24]
 80038e6:	4691      	mov	r9, r2
 80038e8:	2f78      	cmp	r7, #120	@ 0x78
 80038ea:	4680      	mov	r8, r0
 80038ec:	460c      	mov	r4, r1
 80038ee:	469a      	mov	sl, r3
 80038f0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80038f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80038f6:	d807      	bhi.n	8003908 <_printf_i+0x28>
 80038f8:	2f62      	cmp	r7, #98	@ 0x62
 80038fa:	d80a      	bhi.n	8003912 <_printf_i+0x32>
 80038fc:	2f00      	cmp	r7, #0
 80038fe:	f000 80d1 	beq.w	8003aa4 <_printf_i+0x1c4>
 8003902:	2f58      	cmp	r7, #88	@ 0x58
 8003904:	f000 80b8 	beq.w	8003a78 <_printf_i+0x198>
 8003908:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800390c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003910:	e03a      	b.n	8003988 <_printf_i+0xa8>
 8003912:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003916:	2b15      	cmp	r3, #21
 8003918:	d8f6      	bhi.n	8003908 <_printf_i+0x28>
 800391a:	a101      	add	r1, pc, #4	@ (adr r1, 8003920 <_printf_i+0x40>)
 800391c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003920:	08003979 	.word	0x08003979
 8003924:	0800398d 	.word	0x0800398d
 8003928:	08003909 	.word	0x08003909
 800392c:	08003909 	.word	0x08003909
 8003930:	08003909 	.word	0x08003909
 8003934:	08003909 	.word	0x08003909
 8003938:	0800398d 	.word	0x0800398d
 800393c:	08003909 	.word	0x08003909
 8003940:	08003909 	.word	0x08003909
 8003944:	08003909 	.word	0x08003909
 8003948:	08003909 	.word	0x08003909
 800394c:	08003a8b 	.word	0x08003a8b
 8003950:	080039b7 	.word	0x080039b7
 8003954:	08003a45 	.word	0x08003a45
 8003958:	08003909 	.word	0x08003909
 800395c:	08003909 	.word	0x08003909
 8003960:	08003aad 	.word	0x08003aad
 8003964:	08003909 	.word	0x08003909
 8003968:	080039b7 	.word	0x080039b7
 800396c:	08003909 	.word	0x08003909
 8003970:	08003909 	.word	0x08003909
 8003974:	08003a4d 	.word	0x08003a4d
 8003978:	6833      	ldr	r3, [r6, #0]
 800397a:	1d1a      	adds	r2, r3, #4
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6032      	str	r2, [r6, #0]
 8003980:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003984:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003988:	2301      	movs	r3, #1
 800398a:	e09c      	b.n	8003ac6 <_printf_i+0x1e6>
 800398c:	6833      	ldr	r3, [r6, #0]
 800398e:	6820      	ldr	r0, [r4, #0]
 8003990:	1d19      	adds	r1, r3, #4
 8003992:	6031      	str	r1, [r6, #0]
 8003994:	0606      	lsls	r6, r0, #24
 8003996:	d501      	bpl.n	800399c <_printf_i+0xbc>
 8003998:	681d      	ldr	r5, [r3, #0]
 800399a:	e003      	b.n	80039a4 <_printf_i+0xc4>
 800399c:	0645      	lsls	r5, r0, #25
 800399e:	d5fb      	bpl.n	8003998 <_printf_i+0xb8>
 80039a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80039a4:	2d00      	cmp	r5, #0
 80039a6:	da03      	bge.n	80039b0 <_printf_i+0xd0>
 80039a8:	232d      	movs	r3, #45	@ 0x2d
 80039aa:	426d      	negs	r5, r5
 80039ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039b0:	230a      	movs	r3, #10
 80039b2:	4858      	ldr	r0, [pc, #352]	@ (8003b14 <_printf_i+0x234>)
 80039b4:	e011      	b.n	80039da <_printf_i+0xfa>
 80039b6:	6821      	ldr	r1, [r4, #0]
 80039b8:	6833      	ldr	r3, [r6, #0]
 80039ba:	0608      	lsls	r0, r1, #24
 80039bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80039c0:	d402      	bmi.n	80039c8 <_printf_i+0xe8>
 80039c2:	0649      	lsls	r1, r1, #25
 80039c4:	bf48      	it	mi
 80039c6:	b2ad      	uxthmi	r5, r5
 80039c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80039ca:	6033      	str	r3, [r6, #0]
 80039cc:	bf14      	ite	ne
 80039ce:	230a      	movne	r3, #10
 80039d0:	2308      	moveq	r3, #8
 80039d2:	4850      	ldr	r0, [pc, #320]	@ (8003b14 <_printf_i+0x234>)
 80039d4:	2100      	movs	r1, #0
 80039d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80039da:	6866      	ldr	r6, [r4, #4]
 80039dc:	2e00      	cmp	r6, #0
 80039de:	60a6      	str	r6, [r4, #8]
 80039e0:	db05      	blt.n	80039ee <_printf_i+0x10e>
 80039e2:	6821      	ldr	r1, [r4, #0]
 80039e4:	432e      	orrs	r6, r5
 80039e6:	f021 0104 	bic.w	r1, r1, #4
 80039ea:	6021      	str	r1, [r4, #0]
 80039ec:	d04b      	beq.n	8003a86 <_printf_i+0x1a6>
 80039ee:	4616      	mov	r6, r2
 80039f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80039f4:	fb03 5711 	mls	r7, r3, r1, r5
 80039f8:	5dc7      	ldrb	r7, [r0, r7]
 80039fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039fe:	462f      	mov	r7, r5
 8003a00:	42bb      	cmp	r3, r7
 8003a02:	460d      	mov	r5, r1
 8003a04:	d9f4      	bls.n	80039f0 <_printf_i+0x110>
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d10b      	bne.n	8003a22 <_printf_i+0x142>
 8003a0a:	6823      	ldr	r3, [r4, #0]
 8003a0c:	07df      	lsls	r7, r3, #31
 8003a0e:	d508      	bpl.n	8003a22 <_printf_i+0x142>
 8003a10:	6923      	ldr	r3, [r4, #16]
 8003a12:	6861      	ldr	r1, [r4, #4]
 8003a14:	4299      	cmp	r1, r3
 8003a16:	bfde      	ittt	le
 8003a18:	2330      	movle	r3, #48	@ 0x30
 8003a1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a1e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a22:	1b92      	subs	r2, r2, r6
 8003a24:	6122      	str	r2, [r4, #16]
 8003a26:	464b      	mov	r3, r9
 8003a28:	4621      	mov	r1, r4
 8003a2a:	4640      	mov	r0, r8
 8003a2c:	f8cd a000 	str.w	sl, [sp]
 8003a30:	aa03      	add	r2, sp, #12
 8003a32:	f7ff fee3 	bl	80037fc <_printf_common>
 8003a36:	3001      	adds	r0, #1
 8003a38:	d14a      	bne.n	8003ad0 <_printf_i+0x1f0>
 8003a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a3e:	b004      	add	sp, #16
 8003a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a44:	6823      	ldr	r3, [r4, #0]
 8003a46:	f043 0320 	orr.w	r3, r3, #32
 8003a4a:	6023      	str	r3, [r4, #0]
 8003a4c:	2778      	movs	r7, #120	@ 0x78
 8003a4e:	4832      	ldr	r0, [pc, #200]	@ (8003b18 <_printf_i+0x238>)
 8003a50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a54:	6823      	ldr	r3, [r4, #0]
 8003a56:	6831      	ldr	r1, [r6, #0]
 8003a58:	061f      	lsls	r7, r3, #24
 8003a5a:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a5e:	d402      	bmi.n	8003a66 <_printf_i+0x186>
 8003a60:	065f      	lsls	r7, r3, #25
 8003a62:	bf48      	it	mi
 8003a64:	b2ad      	uxthmi	r5, r5
 8003a66:	6031      	str	r1, [r6, #0]
 8003a68:	07d9      	lsls	r1, r3, #31
 8003a6a:	bf44      	itt	mi
 8003a6c:	f043 0320 	orrmi.w	r3, r3, #32
 8003a70:	6023      	strmi	r3, [r4, #0]
 8003a72:	b11d      	cbz	r5, 8003a7c <_printf_i+0x19c>
 8003a74:	2310      	movs	r3, #16
 8003a76:	e7ad      	b.n	80039d4 <_printf_i+0xf4>
 8003a78:	4826      	ldr	r0, [pc, #152]	@ (8003b14 <_printf_i+0x234>)
 8003a7a:	e7e9      	b.n	8003a50 <_printf_i+0x170>
 8003a7c:	6823      	ldr	r3, [r4, #0]
 8003a7e:	f023 0320 	bic.w	r3, r3, #32
 8003a82:	6023      	str	r3, [r4, #0]
 8003a84:	e7f6      	b.n	8003a74 <_printf_i+0x194>
 8003a86:	4616      	mov	r6, r2
 8003a88:	e7bd      	b.n	8003a06 <_printf_i+0x126>
 8003a8a:	6833      	ldr	r3, [r6, #0]
 8003a8c:	6825      	ldr	r5, [r4, #0]
 8003a8e:	1d18      	adds	r0, r3, #4
 8003a90:	6961      	ldr	r1, [r4, #20]
 8003a92:	6030      	str	r0, [r6, #0]
 8003a94:	062e      	lsls	r6, r5, #24
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	d501      	bpl.n	8003a9e <_printf_i+0x1be>
 8003a9a:	6019      	str	r1, [r3, #0]
 8003a9c:	e002      	b.n	8003aa4 <_printf_i+0x1c4>
 8003a9e:	0668      	lsls	r0, r5, #25
 8003aa0:	d5fb      	bpl.n	8003a9a <_printf_i+0x1ba>
 8003aa2:	8019      	strh	r1, [r3, #0]
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	4616      	mov	r6, r2
 8003aa8:	6123      	str	r3, [r4, #16]
 8003aaa:	e7bc      	b.n	8003a26 <_printf_i+0x146>
 8003aac:	6833      	ldr	r3, [r6, #0]
 8003aae:	2100      	movs	r1, #0
 8003ab0:	1d1a      	adds	r2, r3, #4
 8003ab2:	6032      	str	r2, [r6, #0]
 8003ab4:	681e      	ldr	r6, [r3, #0]
 8003ab6:	6862      	ldr	r2, [r4, #4]
 8003ab8:	4630      	mov	r0, r6
 8003aba:	f000 f859 	bl	8003b70 <memchr>
 8003abe:	b108      	cbz	r0, 8003ac4 <_printf_i+0x1e4>
 8003ac0:	1b80      	subs	r0, r0, r6
 8003ac2:	6060      	str	r0, [r4, #4]
 8003ac4:	6863      	ldr	r3, [r4, #4]
 8003ac6:	6123      	str	r3, [r4, #16]
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ace:	e7aa      	b.n	8003a26 <_printf_i+0x146>
 8003ad0:	4632      	mov	r2, r6
 8003ad2:	4649      	mov	r1, r9
 8003ad4:	4640      	mov	r0, r8
 8003ad6:	6923      	ldr	r3, [r4, #16]
 8003ad8:	47d0      	blx	sl
 8003ada:	3001      	adds	r0, #1
 8003adc:	d0ad      	beq.n	8003a3a <_printf_i+0x15a>
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	079b      	lsls	r3, r3, #30
 8003ae2:	d413      	bmi.n	8003b0c <_printf_i+0x22c>
 8003ae4:	68e0      	ldr	r0, [r4, #12]
 8003ae6:	9b03      	ldr	r3, [sp, #12]
 8003ae8:	4298      	cmp	r0, r3
 8003aea:	bfb8      	it	lt
 8003aec:	4618      	movlt	r0, r3
 8003aee:	e7a6      	b.n	8003a3e <_printf_i+0x15e>
 8003af0:	2301      	movs	r3, #1
 8003af2:	4632      	mov	r2, r6
 8003af4:	4649      	mov	r1, r9
 8003af6:	4640      	mov	r0, r8
 8003af8:	47d0      	blx	sl
 8003afa:	3001      	adds	r0, #1
 8003afc:	d09d      	beq.n	8003a3a <_printf_i+0x15a>
 8003afe:	3501      	adds	r5, #1
 8003b00:	68e3      	ldr	r3, [r4, #12]
 8003b02:	9903      	ldr	r1, [sp, #12]
 8003b04:	1a5b      	subs	r3, r3, r1
 8003b06:	42ab      	cmp	r3, r5
 8003b08:	dcf2      	bgt.n	8003af0 <_printf_i+0x210>
 8003b0a:	e7eb      	b.n	8003ae4 <_printf_i+0x204>
 8003b0c:	2500      	movs	r5, #0
 8003b0e:	f104 0619 	add.w	r6, r4, #25
 8003b12:	e7f5      	b.n	8003b00 <_printf_i+0x220>
 8003b14:	08003d27 	.word	0x08003d27
 8003b18:	08003d38 	.word	0x08003d38

08003b1c <memmove>:
 8003b1c:	4288      	cmp	r0, r1
 8003b1e:	b510      	push	{r4, lr}
 8003b20:	eb01 0402 	add.w	r4, r1, r2
 8003b24:	d902      	bls.n	8003b2c <memmove+0x10>
 8003b26:	4284      	cmp	r4, r0
 8003b28:	4623      	mov	r3, r4
 8003b2a:	d807      	bhi.n	8003b3c <memmove+0x20>
 8003b2c:	1e43      	subs	r3, r0, #1
 8003b2e:	42a1      	cmp	r1, r4
 8003b30:	d008      	beq.n	8003b44 <memmove+0x28>
 8003b32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b3a:	e7f8      	b.n	8003b2e <memmove+0x12>
 8003b3c:	4601      	mov	r1, r0
 8003b3e:	4402      	add	r2, r0
 8003b40:	428a      	cmp	r2, r1
 8003b42:	d100      	bne.n	8003b46 <memmove+0x2a>
 8003b44:	bd10      	pop	{r4, pc}
 8003b46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b4e:	e7f7      	b.n	8003b40 <memmove+0x24>

08003b50 <_sbrk_r>:
 8003b50:	b538      	push	{r3, r4, r5, lr}
 8003b52:	2300      	movs	r3, #0
 8003b54:	4d05      	ldr	r5, [pc, #20]	@ (8003b6c <_sbrk_r+0x1c>)
 8003b56:	4604      	mov	r4, r0
 8003b58:	4608      	mov	r0, r1
 8003b5a:	602b      	str	r3, [r5, #0]
 8003b5c:	f7fd f91a 	bl	8000d94 <_sbrk>
 8003b60:	1c43      	adds	r3, r0, #1
 8003b62:	d102      	bne.n	8003b6a <_sbrk_r+0x1a>
 8003b64:	682b      	ldr	r3, [r5, #0]
 8003b66:	b103      	cbz	r3, 8003b6a <_sbrk_r+0x1a>
 8003b68:	6023      	str	r3, [r4, #0]
 8003b6a:	bd38      	pop	{r3, r4, r5, pc}
 8003b6c:	20001280 	.word	0x20001280

08003b70 <memchr>:
 8003b70:	4603      	mov	r3, r0
 8003b72:	b510      	push	{r4, lr}
 8003b74:	b2c9      	uxtb	r1, r1
 8003b76:	4402      	add	r2, r0
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	d101      	bne.n	8003b82 <memchr+0x12>
 8003b7e:	2000      	movs	r0, #0
 8003b80:	e003      	b.n	8003b8a <memchr+0x1a>
 8003b82:	7804      	ldrb	r4, [r0, #0]
 8003b84:	3301      	adds	r3, #1
 8003b86:	428c      	cmp	r4, r1
 8003b88:	d1f6      	bne.n	8003b78 <memchr+0x8>
 8003b8a:	bd10      	pop	{r4, pc}

08003b8c <_realloc_r>:
 8003b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b90:	4607      	mov	r7, r0
 8003b92:	4614      	mov	r4, r2
 8003b94:	460d      	mov	r5, r1
 8003b96:	b921      	cbnz	r1, 8003ba2 <_realloc_r+0x16>
 8003b98:	4611      	mov	r1, r2
 8003b9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b9e:	f7ff bc49 	b.w	8003434 <_malloc_r>
 8003ba2:	b92a      	cbnz	r2, 8003bb0 <_realloc_r+0x24>
 8003ba4:	f7ff fbdc 	bl	8003360 <_free_r>
 8003ba8:	4625      	mov	r5, r4
 8003baa:	4628      	mov	r0, r5
 8003bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bb0:	f000 f81a 	bl	8003be8 <_malloc_usable_size_r>
 8003bb4:	4284      	cmp	r4, r0
 8003bb6:	4606      	mov	r6, r0
 8003bb8:	d802      	bhi.n	8003bc0 <_realloc_r+0x34>
 8003bba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003bbe:	d8f4      	bhi.n	8003baa <_realloc_r+0x1e>
 8003bc0:	4621      	mov	r1, r4
 8003bc2:	4638      	mov	r0, r7
 8003bc4:	f7ff fc36 	bl	8003434 <_malloc_r>
 8003bc8:	4680      	mov	r8, r0
 8003bca:	b908      	cbnz	r0, 8003bd0 <_realloc_r+0x44>
 8003bcc:	4645      	mov	r5, r8
 8003bce:	e7ec      	b.n	8003baa <_realloc_r+0x1e>
 8003bd0:	42b4      	cmp	r4, r6
 8003bd2:	4622      	mov	r2, r4
 8003bd4:	4629      	mov	r1, r5
 8003bd6:	bf28      	it	cs
 8003bd8:	4632      	movcs	r2, r6
 8003bda:	f7ff fbb3 	bl	8003344 <memcpy>
 8003bde:	4629      	mov	r1, r5
 8003be0:	4638      	mov	r0, r7
 8003be2:	f7ff fbbd 	bl	8003360 <_free_r>
 8003be6:	e7f1      	b.n	8003bcc <_realloc_r+0x40>

08003be8 <_malloc_usable_size_r>:
 8003be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bec:	1f18      	subs	r0, r3, #4
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	bfbc      	itt	lt
 8003bf2:	580b      	ldrlt	r3, [r1, r0]
 8003bf4:	18c0      	addlt	r0, r0, r3
 8003bf6:	4770      	bx	lr

08003bf8 <_init>:
 8003bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfa:	bf00      	nop
 8003bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bfe:	bc08      	pop	{r3}
 8003c00:	469e      	mov	lr, r3
 8003c02:	4770      	bx	lr

08003c04 <_fini>:
 8003c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c06:	bf00      	nop
 8003c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c0a:	bc08      	pop	{r3}
 8003c0c:	469e      	mov	lr, r3
 8003c0e:	4770      	bx	lr
