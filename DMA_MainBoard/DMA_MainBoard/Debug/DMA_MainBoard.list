
DMA_MainBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023a8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080024b4  080024b4  000034b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024e0  080024e0  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080024e0  080024e0  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080024e0  080024e0  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024e0  080024e0  000034e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080024e4  080024e4  000034e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080024e8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  2000000c  080024f4  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  080024f4  00004190  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ff0  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015f2  00000000  00000000  0000b025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  0000c618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000510  00000000  00000000  0000ccb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f5f  00000000  00000000  0000d1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007e88  00000000  00000000  00023127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e5ba  00000000  00000000  0002afaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a9569  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001994  00000000  00000000  000a95ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000aaf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800249c 	.word	0x0800249c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800249c 	.word	0x0800249c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb2c 	bl	80007ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f820 	bl	8000198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8fe 	bl	8000358 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f8d6 	bl	800030c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f856 	bl	8000210 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000164:	f000 f87e 	bl	8000264 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000168:	f000 f8a6 	bl	80002b8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, msg, sizeof(msg));
 800016c:	2201      	movs	r2, #1
 800016e:	4907      	ldr	r1, [pc, #28]	@ (800018c <main+0x40>)
 8000170:	4807      	ldr	r0, [pc, #28]	@ (8000190 <main+0x44>)
 8000172:	f001 fdaf 	bl	8001cd4 <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000176:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800017a:	4806      	ldr	r0, [pc, #24]	@ (8000194 <main+0x48>)
 800017c:	f001 f834 	bl	80011e8 <HAL_GPIO_TogglePin>
//	  char debug[] = "no message recieved\n";
//	  HAL_UART_Transmit(&huart1, (uint8_t*)debug, sizeof(debug) - 1, 100);
	  HAL_Delay(500);
 8000180:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000184:	f000 fb74 	bl	8000870 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000188:	bf00      	nop
 800018a:	e7f4      	b.n	8000176 <main+0x2a>
 800018c:	20000188 	.word	0x20000188
 8000190:	20000070 	.word	0x20000070
 8000194:	40011000 	.word	0x40011000

08000198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b090      	sub	sp, #64	@ 0x40
 800019c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019e:	f107 0318 	add.w	r3, r7, #24
 80001a2:	2228      	movs	r2, #40	@ 0x28
 80001a4:	2100      	movs	r1, #0
 80001a6:	4618      	mov	r0, r3
 80001a8:	f002 f94c 	bl	8002444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	2200      	movs	r2, #0
 80001b0:	601a      	str	r2, [r3, #0]
 80001b2:	605a      	str	r2, [r3, #4]
 80001b4:	609a      	str	r2, [r3, #8]
 80001b6:	60da      	str	r2, [r3, #12]
 80001b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ba:	2302      	movs	r3, #2
 80001bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001be:	2301      	movs	r3, #1
 80001c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001c2:	2310      	movs	r3, #16
 80001c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001c6:	2300      	movs	r3, #0
 80001c8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ca:	f107 0318 	add.w	r3, r7, #24
 80001ce:	4618      	mov	r0, r3
 80001d0:	f001 f824 	bl	800121c <HAL_RCC_OscConfig>
 80001d4:	4603      	mov	r3, r0
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d001      	beq.n	80001de <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001da:	f000 f92f 	bl	800043c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001de:	230f      	movs	r3, #15
 80001e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001e2:	2300      	movs	r3, #0
 80001e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ee:	2300      	movs	r3, #0
 80001f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001f2:	1d3b      	adds	r3, r7, #4
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f001 fa92 	bl	8001720 <HAL_RCC_ClockConfig>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d001      	beq.n	8000206 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000202:	f000 f91b 	bl	800043c <Error_Handler>
  }
}
 8000206:	bf00      	nop
 8000208:	3740      	adds	r7, #64	@ 0x40
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
	...

08000210 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000214:	4b11      	ldr	r3, [pc, #68]	@ (800025c <MX_USART1_UART_Init+0x4c>)
 8000216:	4a12      	ldr	r2, [pc, #72]	@ (8000260 <MX_USART1_UART_Init+0x50>)
 8000218:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800021a:	4b10      	ldr	r3, [pc, #64]	@ (800025c <MX_USART1_UART_Init+0x4c>)
 800021c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000220:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000222:	4b0e      	ldr	r3, [pc, #56]	@ (800025c <MX_USART1_UART_Init+0x4c>)
 8000224:	2200      	movs	r2, #0
 8000226:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000228:	4b0c      	ldr	r3, [pc, #48]	@ (800025c <MX_USART1_UART_Init+0x4c>)
 800022a:	2200      	movs	r2, #0
 800022c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800022e:	4b0b      	ldr	r3, [pc, #44]	@ (800025c <MX_USART1_UART_Init+0x4c>)
 8000230:	2200      	movs	r2, #0
 8000232:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000234:	4b09      	ldr	r3, [pc, #36]	@ (800025c <MX_USART1_UART_Init+0x4c>)
 8000236:	220c      	movs	r2, #12
 8000238:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800023a:	4b08      	ldr	r3, [pc, #32]	@ (800025c <MX_USART1_UART_Init+0x4c>)
 800023c:	2200      	movs	r2, #0
 800023e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000240:	4b06      	ldr	r3, [pc, #24]	@ (800025c <MX_USART1_UART_Init+0x4c>)
 8000242:	2200      	movs	r2, #0
 8000244:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000246:	4805      	ldr	r0, [pc, #20]	@ (800025c <MX_USART1_UART_Init+0x4c>)
 8000248:	f001 fbf8 	bl	8001a3c <HAL_UART_Init>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000252:	f000 f8f3 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	20000028 	.word	0x20000028
 8000260:	40013800 	.word	0x40013800

08000264 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000268:	4b11      	ldr	r3, [pc, #68]	@ (80002b0 <MX_USART2_UART_Init+0x4c>)
 800026a:	4a12      	ldr	r2, [pc, #72]	@ (80002b4 <MX_USART2_UART_Init+0x50>)
 800026c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800026e:	4b10      	ldr	r3, [pc, #64]	@ (80002b0 <MX_USART2_UART_Init+0x4c>)
 8000270:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000274:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000276:	4b0e      	ldr	r3, [pc, #56]	@ (80002b0 <MX_USART2_UART_Init+0x4c>)
 8000278:	2200      	movs	r2, #0
 800027a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800027c:	4b0c      	ldr	r3, [pc, #48]	@ (80002b0 <MX_USART2_UART_Init+0x4c>)
 800027e:	2200      	movs	r2, #0
 8000280:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000282:	4b0b      	ldr	r3, [pc, #44]	@ (80002b0 <MX_USART2_UART_Init+0x4c>)
 8000284:	2200      	movs	r2, #0
 8000286:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000288:	4b09      	ldr	r3, [pc, #36]	@ (80002b0 <MX_USART2_UART_Init+0x4c>)
 800028a:	220c      	movs	r2, #12
 800028c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800028e:	4b08      	ldr	r3, [pc, #32]	@ (80002b0 <MX_USART2_UART_Init+0x4c>)
 8000290:	2200      	movs	r2, #0
 8000292:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000294:	4b06      	ldr	r3, [pc, #24]	@ (80002b0 <MX_USART2_UART_Init+0x4c>)
 8000296:	2200      	movs	r2, #0
 8000298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800029a:	4805      	ldr	r0, [pc, #20]	@ (80002b0 <MX_USART2_UART_Init+0x4c>)
 800029c:	f001 fbce 	bl	8001a3c <HAL_UART_Init>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002a6:	f000 f8c9 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	20000070 	.word	0x20000070
 80002b4:	40004400 	.word	0x40004400

080002b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80002bc:	4b11      	ldr	r3, [pc, #68]	@ (8000304 <MX_USART3_UART_Init+0x4c>)
 80002be:	4a12      	ldr	r2, [pc, #72]	@ (8000308 <MX_USART3_UART_Init+0x50>)
 80002c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80002c2:	4b10      	ldr	r3, [pc, #64]	@ (8000304 <MX_USART3_UART_Init+0x4c>)
 80002c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80002ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000304 <MX_USART3_UART_Init+0x4c>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80002d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000304 <MX_USART3_UART_Init+0x4c>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80002d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000304 <MX_USART3_UART_Init+0x4c>)
 80002d8:	2200      	movs	r2, #0
 80002da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80002dc:	4b09      	ldr	r3, [pc, #36]	@ (8000304 <MX_USART3_UART_Init+0x4c>)
 80002de:	220c      	movs	r2, #12
 80002e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002e2:	4b08      	ldr	r3, [pc, #32]	@ (8000304 <MX_USART3_UART_Init+0x4c>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80002e8:	4b06      	ldr	r3, [pc, #24]	@ (8000304 <MX_USART3_UART_Init+0x4c>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80002ee:	4805      	ldr	r0, [pc, #20]	@ (8000304 <MX_USART3_UART_Init+0x4c>)
 80002f0:	f001 fba4 	bl	8001a3c <HAL_UART_Init>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80002fa:	f000 f89f 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	200000b8 	.word	0x200000b8
 8000308:	40004800 	.word	0x40004800

0800030c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000312:	4b10      	ldr	r3, [pc, #64]	@ (8000354 <MX_DMA_Init+0x48>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	4a0f      	ldr	r2, [pc, #60]	@ (8000354 <MX_DMA_Init+0x48>)
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	6153      	str	r3, [r2, #20]
 800031e:	4b0d      	ldr	r3, [pc, #52]	@ (8000354 <MX_DMA_Init+0x48>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800032a:	2200      	movs	r2, #0
 800032c:	2100      	movs	r1, #0
 800032e:	200c      	movs	r0, #12
 8000330:	f000 fb99 	bl	8000a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000334:	200c      	movs	r0, #12
 8000336:	f000 fbb2 	bl	8000a9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800033a:	2200      	movs	r2, #0
 800033c:	2100      	movs	r1, #0
 800033e:	2010      	movs	r0, #16
 8000340:	f000 fb91 	bl	8000a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000344:	2010      	movs	r0, #16
 8000346:	f000 fbaa 	bl	8000a9e <HAL_NVIC_EnableIRQ>

}
 800034a:	bf00      	nop
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40021000 	.word	0x40021000

08000358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b088      	sub	sp, #32
 800035c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035e:	f107 0310 	add.w	r3, r7, #16
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800036c:	4b24      	ldr	r3, [pc, #144]	@ (8000400 <MX_GPIO_Init+0xa8>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a23      	ldr	r2, [pc, #140]	@ (8000400 <MX_GPIO_Init+0xa8>)
 8000372:	f043 0310 	orr.w	r3, r3, #16
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b21      	ldr	r3, [pc, #132]	@ (8000400 <MX_GPIO_Init+0xa8>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0310 	and.w	r3, r3, #16
 8000380:	60fb      	str	r3, [r7, #12]
 8000382:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000384:	4b1e      	ldr	r3, [pc, #120]	@ (8000400 <MX_GPIO_Init+0xa8>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a1d      	ldr	r2, [pc, #116]	@ (8000400 <MX_GPIO_Init+0xa8>)
 800038a:	f043 0320 	orr.w	r3, r3, #32
 800038e:	6193      	str	r3, [r2, #24]
 8000390:	4b1b      	ldr	r3, [pc, #108]	@ (8000400 <MX_GPIO_Init+0xa8>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	f003 0320 	and.w	r3, r3, #32
 8000398:	60bb      	str	r3, [r7, #8]
 800039a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039c:	4b18      	ldr	r3, [pc, #96]	@ (8000400 <MX_GPIO_Init+0xa8>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a17      	ldr	r2, [pc, #92]	@ (8000400 <MX_GPIO_Init+0xa8>)
 80003a2:	f043 0304 	orr.w	r3, r3, #4
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b15      	ldr	r3, [pc, #84]	@ (8000400 <MX_GPIO_Init+0xa8>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0304 	and.w	r3, r3, #4
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b4:	4b12      	ldr	r3, [pc, #72]	@ (8000400 <MX_GPIO_Init+0xa8>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a11      	ldr	r2, [pc, #68]	@ (8000400 <MX_GPIO_Init+0xa8>)
 80003ba:	f043 0308 	orr.w	r3, r3, #8
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <MX_GPIO_Init+0xa8>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0308 	and.w	r3, r3, #8
 80003c8:	603b      	str	r3, [r7, #0]
 80003ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003d2:	480c      	ldr	r0, [pc, #48]	@ (8000404 <MX_GPIO_Init+0xac>)
 80003d4:	f000 fef0 	bl	80011b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003de:	2301      	movs	r3, #1
 80003e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e2:	2300      	movs	r3, #0
 80003e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e6:	2302      	movs	r3, #2
 80003e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003ea:	f107 0310 	add.w	r3, r7, #16
 80003ee:	4619      	mov	r1, r3
 80003f0:	4804      	ldr	r0, [pc, #16]	@ (8000404 <MX_GPIO_Init+0xac>)
 80003f2:	f000 fd5d 	bl	8000eb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003f6:	bf00      	nop
 80003f8:	3720      	adds	r7, #32
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000
 8000404:	40011000 	.word	0x40011000

08000408 <HAL_UART_RxCpltCallback>:

//HAL_UARTex_RxEventCallback is not supported in stm32f1


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]

//	char debug[] = "dma callback\n";
//	HAL_UART_Transmit(&huart1, (uint8_t*)debug, sizeof(debug) - 1, 100);
	HAL_UART_Transmit(&huart1, msg, sizeof(msg), 100);
 8000410:	2364      	movs	r3, #100	@ 0x64
 8000412:	2201      	movs	r2, #1
 8000414:	4906      	ldr	r1, [pc, #24]	@ (8000430 <HAL_UART_RxCpltCallback+0x28>)
 8000416:	4807      	ldr	r0, [pc, #28]	@ (8000434 <HAL_UART_RxCpltCallback+0x2c>)
 8000418:	f001 fb60 	bl	8001adc <HAL_UART_Transmit>
//	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);

	HAL_UART_Transmit_DMA(&huart3, msg, sizeof(msg));
 800041c:	2201      	movs	r2, #1
 800041e:	4904      	ldr	r1, [pc, #16]	@ (8000430 <HAL_UART_RxCpltCallback+0x28>)
 8000420:	4805      	ldr	r0, [pc, #20]	@ (8000438 <HAL_UART_RxCpltCallback+0x30>)
 8000422:	f001 fbe7 	bl	8001bf4 <HAL_UART_Transmit_DMA>
}
 8000426:	bf00      	nop
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	20000188 	.word	0x20000188
 8000434:	20000028 	.word	0x20000028
 8000438:	200000b8 	.word	0x200000b8

0800043c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000440:	b672      	cpsid	i
}
 8000442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000444:	bf00      	nop
 8000446:	e7fd      	b.n	8000444 <Error_Handler+0x8>

08000448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800044e:	4b15      	ldr	r3, [pc, #84]	@ (80004a4 <HAL_MspInit+0x5c>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	4a14      	ldr	r2, [pc, #80]	@ (80004a4 <HAL_MspInit+0x5c>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	6193      	str	r3, [r2, #24]
 800045a:	4b12      	ldr	r3, [pc, #72]	@ (80004a4 <HAL_MspInit+0x5c>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	60bb      	str	r3, [r7, #8]
 8000464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000466:	4b0f      	ldr	r3, [pc, #60]	@ (80004a4 <HAL_MspInit+0x5c>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	4a0e      	ldr	r2, [pc, #56]	@ (80004a4 <HAL_MspInit+0x5c>)
 800046c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000470:	61d3      	str	r3, [r2, #28]
 8000472:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <HAL_MspInit+0x5c>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800047e:	4b0a      	ldr	r3, [pc, #40]	@ (80004a8 <HAL_MspInit+0x60>)
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	4a04      	ldr	r2, [pc, #16]	@ (80004a8 <HAL_MspInit+0x60>)
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800049a:	bf00      	nop
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40010000 	.word	0x40010000

080004ac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b08c      	sub	sp, #48	@ 0x30
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b4:	f107 0320 	add.w	r3, r7, #32
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a79      	ldr	r2, [pc, #484]	@ (80006ac <HAL_UART_MspInit+0x200>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d132      	bne.n	8000532 <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004cc:	4b78      	ldr	r3, [pc, #480]	@ (80006b0 <HAL_UART_MspInit+0x204>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a77      	ldr	r2, [pc, #476]	@ (80006b0 <HAL_UART_MspInit+0x204>)
 80004d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b75      	ldr	r3, [pc, #468]	@ (80006b0 <HAL_UART_MspInit+0x204>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004e0:	61fb      	str	r3, [r7, #28]
 80004e2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e4:	4b72      	ldr	r3, [pc, #456]	@ (80006b0 <HAL_UART_MspInit+0x204>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a71      	ldr	r2, [pc, #452]	@ (80006b0 <HAL_UART_MspInit+0x204>)
 80004ea:	f043 0304 	orr.w	r3, r3, #4
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b6f      	ldr	r3, [pc, #444]	@ (80006b0 <HAL_UART_MspInit+0x204>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0304 	and.w	r3, r3, #4
 80004f8:	61bb      	str	r3, [r7, #24]
 80004fa:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000502:	2302      	movs	r3, #2
 8000504:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000506:	2303      	movs	r3, #3
 8000508:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050a:	f107 0320 	add.w	r3, r7, #32
 800050e:	4619      	mov	r1, r3
 8000510:	4868      	ldr	r0, [pc, #416]	@ (80006b4 <HAL_UART_MspInit+0x208>)
 8000512:	f000 fccd 	bl	8000eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000516:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800051a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051c:	2300      	movs	r3, #0
 800051e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000524:	f107 0320 	add.w	r3, r7, #32
 8000528:	4619      	mov	r1, r3
 800052a:	4862      	ldr	r0, [pc, #392]	@ (80006b4 <HAL_UART_MspInit+0x208>)
 800052c:	f000 fcc0 	bl	8000eb0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000530:	e0b8      	b.n	80006a4 <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART2)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a60      	ldr	r2, [pc, #384]	@ (80006b8 <HAL_UART_MspInit+0x20c>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d156      	bne.n	80005ea <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800053c:	4b5c      	ldr	r3, [pc, #368]	@ (80006b0 <HAL_UART_MspInit+0x204>)
 800053e:	69db      	ldr	r3, [r3, #28]
 8000540:	4a5b      	ldr	r2, [pc, #364]	@ (80006b0 <HAL_UART_MspInit+0x204>)
 8000542:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000546:	61d3      	str	r3, [r2, #28]
 8000548:	4b59      	ldr	r3, [pc, #356]	@ (80006b0 <HAL_UART_MspInit+0x204>)
 800054a:	69db      	ldr	r3, [r3, #28]
 800054c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000550:	617b      	str	r3, [r7, #20]
 8000552:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000554:	4b56      	ldr	r3, [pc, #344]	@ (80006b0 <HAL_UART_MspInit+0x204>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a55      	ldr	r2, [pc, #340]	@ (80006b0 <HAL_UART_MspInit+0x204>)
 800055a:	f043 0304 	orr.w	r3, r3, #4
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b53      	ldr	r3, [pc, #332]	@ (80006b0 <HAL_UART_MspInit+0x204>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f003 0304 	and.w	r3, r3, #4
 8000568:	613b      	str	r3, [r7, #16]
 800056a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800056c:	2304      	movs	r3, #4
 800056e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000570:	2302      	movs	r3, #2
 8000572:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000574:	2303      	movs	r3, #3
 8000576:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000578:	f107 0320 	add.w	r3, r7, #32
 800057c:	4619      	mov	r1, r3
 800057e:	484d      	ldr	r0, [pc, #308]	@ (80006b4 <HAL_UART_MspInit+0x208>)
 8000580:	f000 fc96 	bl	8000eb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000584:	2308      	movs	r3, #8
 8000586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000588:	2300      	movs	r3, #0
 800058a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058c:	2300      	movs	r3, #0
 800058e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000590:	f107 0320 	add.w	r3, r7, #32
 8000594:	4619      	mov	r1, r3
 8000596:	4847      	ldr	r0, [pc, #284]	@ (80006b4 <HAL_UART_MspInit+0x208>)
 8000598:	f000 fc8a 	bl	8000eb0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800059c:	4b47      	ldr	r3, [pc, #284]	@ (80006bc <HAL_UART_MspInit+0x210>)
 800059e:	4a48      	ldr	r2, [pc, #288]	@ (80006c0 <HAL_UART_MspInit+0x214>)
 80005a0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005a2:	4b46      	ldr	r3, [pc, #280]	@ (80006bc <HAL_UART_MspInit+0x210>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005a8:	4b44      	ldr	r3, [pc, #272]	@ (80006bc <HAL_UART_MspInit+0x210>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005ae:	4b43      	ldr	r3, [pc, #268]	@ (80006bc <HAL_UART_MspInit+0x210>)
 80005b0:	2280      	movs	r2, #128	@ 0x80
 80005b2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005b4:	4b41      	ldr	r3, [pc, #260]	@ (80006bc <HAL_UART_MspInit+0x210>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005ba:	4b40      	ldr	r3, [pc, #256]	@ (80006bc <HAL_UART_MspInit+0x210>)
 80005bc:	2200      	movs	r2, #0
 80005be:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80005c0:	4b3e      	ldr	r3, [pc, #248]	@ (80006bc <HAL_UART_MspInit+0x210>)
 80005c2:	2220      	movs	r2, #32
 80005c4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80005c6:	4b3d      	ldr	r3, [pc, #244]	@ (80006bc <HAL_UART_MspInit+0x210>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80005cc:	483b      	ldr	r0, [pc, #236]	@ (80006bc <HAL_UART_MspInit+0x210>)
 80005ce:	f000 fa81 	bl	8000ad4 <HAL_DMA_Init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <HAL_UART_MspInit+0x130>
      Error_Handler();
 80005d8:	f7ff ff30 	bl	800043c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4a37      	ldr	r2, [pc, #220]	@ (80006bc <HAL_UART_MspInit+0x210>)
 80005e0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80005e2:	4a36      	ldr	r2, [pc, #216]	@ (80006bc <HAL_UART_MspInit+0x210>)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80005e8:	e05c      	b.n	80006a4 <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART3)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a35      	ldr	r2, [pc, #212]	@ (80006c4 <HAL_UART_MspInit+0x218>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d157      	bne.n	80006a4 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART3_CLK_ENABLE();
 80005f4:	4b2e      	ldr	r3, [pc, #184]	@ (80006b0 <HAL_UART_MspInit+0x204>)
 80005f6:	69db      	ldr	r3, [r3, #28]
 80005f8:	4a2d      	ldr	r2, [pc, #180]	@ (80006b0 <HAL_UART_MspInit+0x204>)
 80005fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005fe:	61d3      	str	r3, [r2, #28]
 8000600:	4b2b      	ldr	r3, [pc, #172]	@ (80006b0 <HAL_UART_MspInit+0x204>)
 8000602:	69db      	ldr	r3, [r3, #28]
 8000604:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800060c:	4b28      	ldr	r3, [pc, #160]	@ (80006b0 <HAL_UART_MspInit+0x204>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a27      	ldr	r2, [pc, #156]	@ (80006b0 <HAL_UART_MspInit+0x204>)
 8000612:	f043 0308 	orr.w	r3, r3, #8
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b25      	ldr	r3, [pc, #148]	@ (80006b0 <HAL_UART_MspInit+0x204>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f003 0308 	and.w	r3, r3, #8
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000624:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062a:	2302      	movs	r3, #2
 800062c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800062e:	2303      	movs	r3, #3
 8000630:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	4619      	mov	r1, r3
 8000638:	4823      	ldr	r0, [pc, #140]	@ (80006c8 <HAL_UART_MspInit+0x21c>)
 800063a:	f000 fc39 	bl	8000eb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800063e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000644:	2300      	movs	r3, #0
 8000646:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064c:	f107 0320 	add.w	r3, r7, #32
 8000650:	4619      	mov	r1, r3
 8000652:	481d      	ldr	r0, [pc, #116]	@ (80006c8 <HAL_UART_MspInit+0x21c>)
 8000654:	f000 fc2c 	bl	8000eb0 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8000658:	4b1c      	ldr	r3, [pc, #112]	@ (80006cc <HAL_UART_MspInit+0x220>)
 800065a:	4a1d      	ldr	r2, [pc, #116]	@ (80006d0 <HAL_UART_MspInit+0x224>)
 800065c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800065e:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <HAL_UART_MspInit+0x220>)
 8000660:	2210      	movs	r2, #16
 8000662:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000664:	4b19      	ldr	r3, [pc, #100]	@ (80006cc <HAL_UART_MspInit+0x220>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800066a:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <HAL_UART_MspInit+0x220>)
 800066c:	2280      	movs	r2, #128	@ 0x80
 800066e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000670:	4b16      	ldr	r3, [pc, #88]	@ (80006cc <HAL_UART_MspInit+0x220>)
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000676:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <HAL_UART_MspInit+0x220>)
 8000678:	2200      	movs	r2, #0
 800067a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 800067c:	4b13      	ldr	r3, [pc, #76]	@ (80006cc <HAL_UART_MspInit+0x220>)
 800067e:	2220      	movs	r2, #32
 8000680:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000682:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <HAL_UART_MspInit+0x220>)
 8000684:	2200      	movs	r2, #0
 8000686:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000688:	4810      	ldr	r0, [pc, #64]	@ (80006cc <HAL_UART_MspInit+0x220>)
 800068a:	f000 fa23 	bl	8000ad4 <HAL_DMA_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <HAL_UART_MspInit+0x1ec>
      Error_Handler();
 8000694:	f7ff fed2 	bl	800043c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4a0c      	ldr	r2, [pc, #48]	@ (80006cc <HAL_UART_MspInit+0x220>)
 800069c:	639a      	str	r2, [r3, #56]	@ 0x38
 800069e:	4a0b      	ldr	r2, [pc, #44]	@ (80006cc <HAL_UART_MspInit+0x220>)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80006a4:	bf00      	nop
 80006a6:	3730      	adds	r7, #48	@ 0x30
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40013800 	.word	0x40013800
 80006b0:	40021000 	.word	0x40021000
 80006b4:	40010800 	.word	0x40010800
 80006b8:	40004400 	.word	0x40004400
 80006bc:	20000100 	.word	0x20000100
 80006c0:	4002006c 	.word	0x4002006c
 80006c4:	40004800 	.word	0x40004800
 80006c8:	40010c00 	.word	0x40010c00
 80006cc:	20000144 	.word	0x20000144
 80006d0:	4002001c 	.word	0x4002001c

080006d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006d8:	bf00      	nop
 80006da:	e7fd      	b.n	80006d8 <NMI_Handler+0x4>

080006dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <HardFault_Handler+0x4>

080006e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <MemManage_Handler+0x4>

080006ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f0:	bf00      	nop
 80006f2:	e7fd      	b.n	80006f0 <BusFault_Handler+0x4>

080006f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f8:	bf00      	nop
 80006fa:	e7fd      	b.n	80006f8 <UsageFault_Handler+0x4>

080006fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr

08000708 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr

08000720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000724:	f000 f888 	bl	8000838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}

0800072c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000730:	4802      	ldr	r0, [pc, #8]	@ (800073c <DMA1_Channel2_IRQHandler+0x10>)
 8000732:	f000 fa89 	bl	8000c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000144 	.word	0x20000144

08000740 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000744:	4802      	ldr	r0, [pc, #8]	@ (8000750 <DMA1_Channel6_IRQHandler+0x10>)
 8000746:	f000 fa7f 	bl	8000c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000100 	.word	0x20000100

08000754 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr

08000760 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000760:	f7ff fff8 	bl	8000754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000764:	480b      	ldr	r0, [pc, #44]	@ (8000794 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000766:	490c      	ldr	r1, [pc, #48]	@ (8000798 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000768:	4a0c      	ldr	r2, [pc, #48]	@ (800079c <LoopFillZerobss+0x16>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800076c:	e002      	b.n	8000774 <LoopCopyDataInit>

0800076e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000772:	3304      	adds	r3, #4

08000774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000778:	d3f9      	bcc.n	800076e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077a:	4a09      	ldr	r2, [pc, #36]	@ (80007a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800077c:	4c09      	ldr	r4, [pc, #36]	@ (80007a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000780:	e001      	b.n	8000786 <LoopFillZerobss>

08000782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000784:	3204      	adds	r2, #4

08000786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000788:	d3fb      	bcc.n	8000782 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800078a:	f001 fe63 	bl	8002454 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800078e:	f7ff fcdd 	bl	800014c <main>
  bx lr
 8000792:	4770      	bx	lr
  ldr r0, =_sdata
 8000794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000798:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800079c:	080024e8 	.word	0x080024e8
  ldr r2, =_sbss
 80007a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007a4:	20000190 	.word	0x20000190

080007a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007a8:	e7fe      	b.n	80007a8 <ADC1_2_IRQHandler>
	...

080007ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b0:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <HAL_Init+0x28>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a07      	ldr	r2, [pc, #28]	@ (80007d4 <HAL_Init+0x28>)
 80007b6:	f043 0310 	orr.w	r3, r3, #16
 80007ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007bc:	2003      	movs	r0, #3
 80007be:	f000 f947 	bl	8000a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007c2:	200f      	movs	r0, #15
 80007c4:	f000 f808 	bl	80007d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007c8:	f7ff fe3e 	bl	8000448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40022000 	.word	0x40022000

080007d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007e0:	4b12      	ldr	r3, [pc, #72]	@ (800082c <HAL_InitTick+0x54>)
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	4b12      	ldr	r3, [pc, #72]	@ (8000830 <HAL_InitTick+0x58>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	4619      	mov	r1, r3
 80007ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80007f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 f95f 	bl	8000aba <HAL_SYSTICK_Config>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000802:	2301      	movs	r3, #1
 8000804:	e00e      	b.n	8000824 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2b0f      	cmp	r3, #15
 800080a:	d80a      	bhi.n	8000822 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800080c:	2200      	movs	r2, #0
 800080e:	6879      	ldr	r1, [r7, #4]
 8000810:	f04f 30ff 	mov.w	r0, #4294967295
 8000814:	f000 f927 	bl	8000a66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000818:	4a06      	ldr	r2, [pc, #24]	@ (8000834 <HAL_InitTick+0x5c>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800081e:	2300      	movs	r3, #0
 8000820:	e000      	b.n	8000824 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
}
 8000824:	4618      	mov	r0, r3
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000000 	.word	0x20000000
 8000830:	20000008 	.word	0x20000008
 8000834:	20000004 	.word	0x20000004

08000838 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800083c:	4b05      	ldr	r3, [pc, #20]	@ (8000854 <HAL_IncTick+0x1c>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	461a      	mov	r2, r3
 8000842:	4b05      	ldr	r3, [pc, #20]	@ (8000858 <HAL_IncTick+0x20>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4413      	add	r3, r2
 8000848:	4a03      	ldr	r2, [pc, #12]	@ (8000858 <HAL_IncTick+0x20>)
 800084a:	6013      	str	r3, [r2, #0]
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	20000008 	.word	0x20000008
 8000858:	2000018c 	.word	0x2000018c

0800085c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  return uwTick;
 8000860:	4b02      	ldr	r3, [pc, #8]	@ (800086c <HAL_GetTick+0x10>)
 8000862:	681b      	ldr	r3, [r3, #0]
}
 8000864:	4618      	mov	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr
 800086c:	2000018c 	.word	0x2000018c

08000870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000878:	f7ff fff0 	bl	800085c <HAL_GetTick>
 800087c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000888:	d005      	beq.n	8000896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800088a:	4b0a      	ldr	r3, [pc, #40]	@ (80008b4 <HAL_Delay+0x44>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	461a      	mov	r2, r3
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	4413      	add	r3, r2
 8000894:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000896:	bf00      	nop
 8000898:	f7ff ffe0 	bl	800085c <HAL_GetTick>
 800089c:	4602      	mov	r2, r0
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	68fa      	ldr	r2, [r7, #12]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d8f7      	bhi.n	8000898 <HAL_Delay+0x28>
  {
  }
}
 80008a8:	bf00      	nop
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000008 	.word	0x20000008

080008b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <__NVIC_SetPriorityGrouping+0x44>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008d4:	4013      	ands	r3, r2
 80008d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ea:	4a04      	ldr	r2, [pc, #16]	@ (80008fc <__NVIC_SetPriorityGrouping+0x44>)
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	60d3      	str	r3, [r2, #12]
}
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000904:	4b04      	ldr	r3, [pc, #16]	@ (8000918 <__NVIC_GetPriorityGrouping+0x18>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	0a1b      	lsrs	r3, r3, #8
 800090a:	f003 0307 	and.w	r3, r3, #7
}
 800090e:	4618      	mov	r0, r3
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	2b00      	cmp	r3, #0
 800092c:	db0b      	blt.n	8000946 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	f003 021f 	and.w	r2, r3, #31
 8000934:	4906      	ldr	r1, [pc, #24]	@ (8000950 <__NVIC_EnableIRQ+0x34>)
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	095b      	lsrs	r3, r3, #5
 800093c:	2001      	movs	r0, #1
 800093e:	fa00 f202 	lsl.w	r2, r0, r2
 8000942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	e000e100 	.word	0xe000e100

08000954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	6039      	str	r1, [r7, #0]
 800095e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000964:	2b00      	cmp	r3, #0
 8000966:	db0a      	blt.n	800097e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	b2da      	uxtb	r2, r3
 800096c:	490c      	ldr	r1, [pc, #48]	@ (80009a0 <__NVIC_SetPriority+0x4c>)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	0112      	lsls	r2, r2, #4
 8000974:	b2d2      	uxtb	r2, r2
 8000976:	440b      	add	r3, r1
 8000978:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800097c:	e00a      	b.n	8000994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	b2da      	uxtb	r2, r3
 8000982:	4908      	ldr	r1, [pc, #32]	@ (80009a4 <__NVIC_SetPriority+0x50>)
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	f003 030f 	and.w	r3, r3, #15
 800098a:	3b04      	subs	r3, #4
 800098c:	0112      	lsls	r2, r2, #4
 800098e:	b2d2      	uxtb	r2, r2
 8000990:	440b      	add	r3, r1
 8000992:	761a      	strb	r2, [r3, #24]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000e100 	.word	0xe000e100
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b089      	sub	sp, #36	@ 0x24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	f1c3 0307 	rsb	r3, r3, #7
 80009c2:	2b04      	cmp	r3, #4
 80009c4:	bf28      	it	cs
 80009c6:	2304      	movcs	r3, #4
 80009c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	3304      	adds	r3, #4
 80009ce:	2b06      	cmp	r3, #6
 80009d0:	d902      	bls.n	80009d8 <NVIC_EncodePriority+0x30>
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	3b03      	subs	r3, #3
 80009d6:	e000      	b.n	80009da <NVIC_EncodePriority+0x32>
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009dc:	f04f 32ff 	mov.w	r2, #4294967295
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	43da      	mvns	r2, r3
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	401a      	ands	r2, r3
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f0:	f04f 31ff 	mov.w	r1, #4294967295
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	fa01 f303 	lsl.w	r3, r1, r3
 80009fa:	43d9      	mvns	r1, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a00:	4313      	orrs	r3, r2
         );
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3724      	adds	r7, #36	@ 0x24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a1c:	d301      	bcc.n	8000a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e00f      	b.n	8000a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a22:	4a0a      	ldr	r2, [pc, #40]	@ (8000a4c <SysTick_Config+0x40>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a2a:	210f      	movs	r1, #15
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a30:	f7ff ff90 	bl	8000954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a34:	4b05      	ldr	r3, [pc, #20]	@ (8000a4c <SysTick_Config+0x40>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a3a:	4b04      	ldr	r3, [pc, #16]	@ (8000a4c <SysTick_Config+0x40>)
 8000a3c:	2207      	movs	r2, #7
 8000a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	e000e010 	.word	0xe000e010

08000a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff ff2d 	bl	80008b8 <__NVIC_SetPriorityGrouping>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b086      	sub	sp, #24
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
 8000a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a78:	f7ff ff42 	bl	8000900 <__NVIC_GetPriorityGrouping>
 8000a7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	68b9      	ldr	r1, [r7, #8]
 8000a82:	6978      	ldr	r0, [r7, #20]
 8000a84:	f7ff ff90 	bl	80009a8 <NVIC_EncodePriority>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a8e:	4611      	mov	r1, r2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff5f 	bl	8000954 <__NVIC_SetPriority>
}
 8000a96:	bf00      	nop
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff35 	bl	800091c <__NVIC_EnableIRQ>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff ffa2 	bl	8000a0c <SysTick_Config>
 8000ac8:	4603      	mov	r3, r0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d101      	bne.n	8000aea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e043      	b.n	8000b72 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	4b22      	ldr	r3, [pc, #136]	@ (8000b7c <HAL_DMA_Init+0xa8>)
 8000af2:	4413      	add	r3, r2
 8000af4:	4a22      	ldr	r2, [pc, #136]	@ (8000b80 <HAL_DMA_Init+0xac>)
 8000af6:	fba2 2303 	umull	r2, r3, r2, r3
 8000afa:	091b      	lsrs	r3, r3, #4
 8000afc:	009a      	lsls	r2, r3, #2
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a1f      	ldr	r2, [pc, #124]	@ (8000b84 <HAL_DMA_Init+0xb0>)
 8000b06:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000b1e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000b22:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b4c:	68fa      	ldr	r2, [r7, #12]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2201      	movs	r2, #1
 8000b64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr
 8000b7c:	bffdfff8 	.word	0xbffdfff8
 8000b80:	cccccccd 	.word	0xcccccccd
 8000b84:	40020000 	.word	0x40020000

08000b88 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
 8000b94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b96:	2300      	movs	r3, #0
 8000b98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d101      	bne.n	8000ba8 <HAL_DMA_Start_IT+0x20>
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	e04b      	b.n	8000c40 <HAL_DMA_Start_IT+0xb8>
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	2201      	movs	r2, #1
 8000bac:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d13a      	bne.n	8000c32 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f022 0201 	bic.w	r2, r2, #1
 8000bd8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	68b9      	ldr	r1, [r7, #8]
 8000be0:	68f8      	ldr	r0, [r7, #12]
 8000be2:	f000 f937 	bl	8000e54 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d008      	beq.n	8000c00 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f042 020e 	orr.w	r2, r2, #14
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	e00f      	b.n	8000c20 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f022 0204 	bic.w	r2, r2, #4
 8000c0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f042 020a 	orr.w	r2, r2, #10
 8000c1e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f042 0201 	orr.w	r2, r2, #1
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	e005      	b.n	8000c3e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	2200      	movs	r2, #0
 8000c36:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c64:	2204      	movs	r2, #4
 8000c66:	409a      	lsls	r2, r3
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d04f      	beq.n	8000d10 <HAL_DMA_IRQHandler+0xc8>
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d04a      	beq.n	8000d10 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f003 0320 	and.w	r3, r3, #32
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d107      	bne.n	8000c98 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f022 0204 	bic.w	r2, r2, #4
 8000c96:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a66      	ldr	r2, [pc, #408]	@ (8000e38 <HAL_DMA_IRQHandler+0x1f0>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d029      	beq.n	8000cf6 <HAL_DMA_IRQHandler+0xae>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a65      	ldr	r2, [pc, #404]	@ (8000e3c <HAL_DMA_IRQHandler+0x1f4>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d022      	beq.n	8000cf2 <HAL_DMA_IRQHandler+0xaa>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a63      	ldr	r2, [pc, #396]	@ (8000e40 <HAL_DMA_IRQHandler+0x1f8>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d01a      	beq.n	8000cec <HAL_DMA_IRQHandler+0xa4>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a62      	ldr	r2, [pc, #392]	@ (8000e44 <HAL_DMA_IRQHandler+0x1fc>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d012      	beq.n	8000ce6 <HAL_DMA_IRQHandler+0x9e>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a60      	ldr	r2, [pc, #384]	@ (8000e48 <HAL_DMA_IRQHandler+0x200>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d00a      	beq.n	8000ce0 <HAL_DMA_IRQHandler+0x98>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a5f      	ldr	r2, [pc, #380]	@ (8000e4c <HAL_DMA_IRQHandler+0x204>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d102      	bne.n	8000cda <HAL_DMA_IRQHandler+0x92>
 8000cd4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000cd8:	e00e      	b.n	8000cf8 <HAL_DMA_IRQHandler+0xb0>
 8000cda:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000cde:	e00b      	b.n	8000cf8 <HAL_DMA_IRQHandler+0xb0>
 8000ce0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000ce4:	e008      	b.n	8000cf8 <HAL_DMA_IRQHandler+0xb0>
 8000ce6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000cea:	e005      	b.n	8000cf8 <HAL_DMA_IRQHandler+0xb0>
 8000cec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cf0:	e002      	b.n	8000cf8 <HAL_DMA_IRQHandler+0xb0>
 8000cf2:	2340      	movs	r3, #64	@ 0x40
 8000cf4:	e000      	b.n	8000cf8 <HAL_DMA_IRQHandler+0xb0>
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	4a55      	ldr	r2, [pc, #340]	@ (8000e50 <HAL_DMA_IRQHandler+0x208>)
 8000cfa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	f000 8094 	beq.w	8000e2e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000d0e:	e08e      	b.n	8000e2e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d14:	2202      	movs	r2, #2
 8000d16:	409a      	lsls	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d056      	beq.n	8000dce <HAL_DMA_IRQHandler+0x186>
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d051      	beq.n	8000dce <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 0320 	and.w	r3, r3, #32
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d10b      	bne.n	8000d50 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f022 020a 	bic.w	r2, r2, #10
 8000d46:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a38      	ldr	r2, [pc, #224]	@ (8000e38 <HAL_DMA_IRQHandler+0x1f0>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d029      	beq.n	8000dae <HAL_DMA_IRQHandler+0x166>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a37      	ldr	r2, [pc, #220]	@ (8000e3c <HAL_DMA_IRQHandler+0x1f4>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d022      	beq.n	8000daa <HAL_DMA_IRQHandler+0x162>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a35      	ldr	r2, [pc, #212]	@ (8000e40 <HAL_DMA_IRQHandler+0x1f8>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d01a      	beq.n	8000da4 <HAL_DMA_IRQHandler+0x15c>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a34      	ldr	r2, [pc, #208]	@ (8000e44 <HAL_DMA_IRQHandler+0x1fc>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d012      	beq.n	8000d9e <HAL_DMA_IRQHandler+0x156>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a32      	ldr	r2, [pc, #200]	@ (8000e48 <HAL_DMA_IRQHandler+0x200>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d00a      	beq.n	8000d98 <HAL_DMA_IRQHandler+0x150>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a31      	ldr	r2, [pc, #196]	@ (8000e4c <HAL_DMA_IRQHandler+0x204>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d102      	bne.n	8000d92 <HAL_DMA_IRQHandler+0x14a>
 8000d8c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000d90:	e00e      	b.n	8000db0 <HAL_DMA_IRQHandler+0x168>
 8000d92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d96:	e00b      	b.n	8000db0 <HAL_DMA_IRQHandler+0x168>
 8000d98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d9c:	e008      	b.n	8000db0 <HAL_DMA_IRQHandler+0x168>
 8000d9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000da2:	e005      	b.n	8000db0 <HAL_DMA_IRQHandler+0x168>
 8000da4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000da8:	e002      	b.n	8000db0 <HAL_DMA_IRQHandler+0x168>
 8000daa:	2320      	movs	r3, #32
 8000dac:	e000      	b.n	8000db0 <HAL_DMA_IRQHandler+0x168>
 8000dae:	2302      	movs	r3, #2
 8000db0:	4a27      	ldr	r2, [pc, #156]	@ (8000e50 <HAL_DMA_IRQHandler+0x208>)
 8000db2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d034      	beq.n	8000e2e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000dcc:	e02f      	b.n	8000e2e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd2:	2208      	movs	r2, #8
 8000dd4:	409a      	lsls	r2, r3
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d028      	beq.n	8000e30 <HAL_DMA_IRQHandler+0x1e8>
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	f003 0308 	and.w	r3, r3, #8
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d023      	beq.n	8000e30 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f022 020e 	bic.w	r2, r2, #14
 8000df6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e00:	2101      	movs	r1, #1
 8000e02:	fa01 f202 	lsl.w	r2, r1, r2
 8000e06:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2201      	movs	r2, #1
 8000e12:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d004      	beq.n	8000e30 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	4798      	blx	r3
    }
  }
  return;
 8000e2e:	bf00      	nop
 8000e30:	bf00      	nop
}
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40020008 	.word	0x40020008
 8000e3c:	4002001c 	.word	0x4002001c
 8000e40:	40020030 	.word	0x40020030
 8000e44:	40020044 	.word	0x40020044
 8000e48:	40020058 	.word	0x40020058
 8000e4c:	4002006c 	.word	0x4002006c
 8000e50:	40020000 	.word	0x40020000

08000e54 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e70:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	683a      	ldr	r2, [r7, #0]
 8000e78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2b10      	cmp	r3, #16
 8000e80:	d108      	bne.n	8000e94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000e92:	e007      	b.n	8000ea4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	68ba      	ldr	r2, [r7, #8]
 8000e9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	60da      	str	r2, [r3, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
	...

08000eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b08b      	sub	sp, #44	@ 0x2c
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec2:	e169      	b.n	8001198 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	69fa      	ldr	r2, [r7, #28]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	f040 8158 	bne.w	8001192 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	4a9a      	ldr	r2, [pc, #616]	@ (8001150 <HAL_GPIO_Init+0x2a0>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d05e      	beq.n	8000faa <HAL_GPIO_Init+0xfa>
 8000eec:	4a98      	ldr	r2, [pc, #608]	@ (8001150 <HAL_GPIO_Init+0x2a0>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d875      	bhi.n	8000fde <HAL_GPIO_Init+0x12e>
 8000ef2:	4a98      	ldr	r2, [pc, #608]	@ (8001154 <HAL_GPIO_Init+0x2a4>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d058      	beq.n	8000faa <HAL_GPIO_Init+0xfa>
 8000ef8:	4a96      	ldr	r2, [pc, #600]	@ (8001154 <HAL_GPIO_Init+0x2a4>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d86f      	bhi.n	8000fde <HAL_GPIO_Init+0x12e>
 8000efe:	4a96      	ldr	r2, [pc, #600]	@ (8001158 <HAL_GPIO_Init+0x2a8>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d052      	beq.n	8000faa <HAL_GPIO_Init+0xfa>
 8000f04:	4a94      	ldr	r2, [pc, #592]	@ (8001158 <HAL_GPIO_Init+0x2a8>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d869      	bhi.n	8000fde <HAL_GPIO_Init+0x12e>
 8000f0a:	4a94      	ldr	r2, [pc, #592]	@ (800115c <HAL_GPIO_Init+0x2ac>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d04c      	beq.n	8000faa <HAL_GPIO_Init+0xfa>
 8000f10:	4a92      	ldr	r2, [pc, #584]	@ (800115c <HAL_GPIO_Init+0x2ac>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d863      	bhi.n	8000fde <HAL_GPIO_Init+0x12e>
 8000f16:	4a92      	ldr	r2, [pc, #584]	@ (8001160 <HAL_GPIO_Init+0x2b0>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d046      	beq.n	8000faa <HAL_GPIO_Init+0xfa>
 8000f1c:	4a90      	ldr	r2, [pc, #576]	@ (8001160 <HAL_GPIO_Init+0x2b0>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d85d      	bhi.n	8000fde <HAL_GPIO_Init+0x12e>
 8000f22:	2b12      	cmp	r3, #18
 8000f24:	d82a      	bhi.n	8000f7c <HAL_GPIO_Init+0xcc>
 8000f26:	2b12      	cmp	r3, #18
 8000f28:	d859      	bhi.n	8000fde <HAL_GPIO_Init+0x12e>
 8000f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f30 <HAL_GPIO_Init+0x80>)
 8000f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f30:	08000fab 	.word	0x08000fab
 8000f34:	08000f85 	.word	0x08000f85
 8000f38:	08000f97 	.word	0x08000f97
 8000f3c:	08000fd9 	.word	0x08000fd9
 8000f40:	08000fdf 	.word	0x08000fdf
 8000f44:	08000fdf 	.word	0x08000fdf
 8000f48:	08000fdf 	.word	0x08000fdf
 8000f4c:	08000fdf 	.word	0x08000fdf
 8000f50:	08000fdf 	.word	0x08000fdf
 8000f54:	08000fdf 	.word	0x08000fdf
 8000f58:	08000fdf 	.word	0x08000fdf
 8000f5c:	08000fdf 	.word	0x08000fdf
 8000f60:	08000fdf 	.word	0x08000fdf
 8000f64:	08000fdf 	.word	0x08000fdf
 8000f68:	08000fdf 	.word	0x08000fdf
 8000f6c:	08000fdf 	.word	0x08000fdf
 8000f70:	08000fdf 	.word	0x08000fdf
 8000f74:	08000f8d 	.word	0x08000f8d
 8000f78:	08000fa1 	.word	0x08000fa1
 8000f7c:	4a79      	ldr	r2, [pc, #484]	@ (8001164 <HAL_GPIO_Init+0x2b4>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d013      	beq.n	8000faa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f82:	e02c      	b.n	8000fde <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	623b      	str	r3, [r7, #32]
          break;
 8000f8a:	e029      	b.n	8000fe0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	3304      	adds	r3, #4
 8000f92:	623b      	str	r3, [r7, #32]
          break;
 8000f94:	e024      	b.n	8000fe0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	3308      	adds	r3, #8
 8000f9c:	623b      	str	r3, [r7, #32]
          break;
 8000f9e:	e01f      	b.n	8000fe0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	330c      	adds	r3, #12
 8000fa6:	623b      	str	r3, [r7, #32]
          break;
 8000fa8:	e01a      	b.n	8000fe0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d102      	bne.n	8000fb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	623b      	str	r3, [r7, #32]
          break;
 8000fb6:	e013      	b.n	8000fe0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d105      	bne.n	8000fcc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fc0:	2308      	movs	r3, #8
 8000fc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	69fa      	ldr	r2, [r7, #28]
 8000fc8:	611a      	str	r2, [r3, #16]
          break;
 8000fca:	e009      	b.n	8000fe0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fcc:	2308      	movs	r3, #8
 8000fce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	69fa      	ldr	r2, [r7, #28]
 8000fd4:	615a      	str	r2, [r3, #20]
          break;
 8000fd6:	e003      	b.n	8000fe0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	623b      	str	r3, [r7, #32]
          break;
 8000fdc:	e000      	b.n	8000fe0 <HAL_GPIO_Init+0x130>
          break;
 8000fde:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	2bff      	cmp	r3, #255	@ 0xff
 8000fe4:	d801      	bhi.n	8000fea <HAL_GPIO_Init+0x13a>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	e001      	b.n	8000fee <HAL_GPIO_Init+0x13e>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3304      	adds	r3, #4
 8000fee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	2bff      	cmp	r3, #255	@ 0xff
 8000ff4:	d802      	bhi.n	8000ffc <HAL_GPIO_Init+0x14c>
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	e002      	b.n	8001002 <HAL_GPIO_Init+0x152>
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ffe:	3b08      	subs	r3, #8
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	210f      	movs	r1, #15
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	fa01 f303 	lsl.w	r3, r1, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	401a      	ands	r2, r3
 8001014:	6a39      	ldr	r1, [r7, #32]
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	fa01 f303 	lsl.w	r3, r1, r3
 800101c:	431a      	orrs	r2, r3
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800102a:	2b00      	cmp	r3, #0
 800102c:	f000 80b1 	beq.w	8001192 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001030:	4b4d      	ldr	r3, [pc, #308]	@ (8001168 <HAL_GPIO_Init+0x2b8>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	4a4c      	ldr	r2, [pc, #304]	@ (8001168 <HAL_GPIO_Init+0x2b8>)
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	6193      	str	r3, [r2, #24]
 800103c:	4b4a      	ldr	r3, [pc, #296]	@ (8001168 <HAL_GPIO_Init+0x2b8>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001048:	4a48      	ldr	r2, [pc, #288]	@ (800116c <HAL_GPIO_Init+0x2bc>)
 800104a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800104c:	089b      	lsrs	r3, r3, #2
 800104e:	3302      	adds	r3, #2
 8001050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001054:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	220f      	movs	r2, #15
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	4013      	ands	r3, r2
 800106a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a40      	ldr	r2, [pc, #256]	@ (8001170 <HAL_GPIO_Init+0x2c0>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d013      	beq.n	800109c <HAL_GPIO_Init+0x1ec>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a3f      	ldr	r2, [pc, #252]	@ (8001174 <HAL_GPIO_Init+0x2c4>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d00d      	beq.n	8001098 <HAL_GPIO_Init+0x1e8>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a3e      	ldr	r2, [pc, #248]	@ (8001178 <HAL_GPIO_Init+0x2c8>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d007      	beq.n	8001094 <HAL_GPIO_Init+0x1e4>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a3d      	ldr	r2, [pc, #244]	@ (800117c <HAL_GPIO_Init+0x2cc>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d101      	bne.n	8001090 <HAL_GPIO_Init+0x1e0>
 800108c:	2303      	movs	r3, #3
 800108e:	e006      	b.n	800109e <HAL_GPIO_Init+0x1ee>
 8001090:	2304      	movs	r3, #4
 8001092:	e004      	b.n	800109e <HAL_GPIO_Init+0x1ee>
 8001094:	2302      	movs	r3, #2
 8001096:	e002      	b.n	800109e <HAL_GPIO_Init+0x1ee>
 8001098:	2301      	movs	r3, #1
 800109a:	e000      	b.n	800109e <HAL_GPIO_Init+0x1ee>
 800109c:	2300      	movs	r3, #0
 800109e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010a0:	f002 0203 	and.w	r2, r2, #3
 80010a4:	0092      	lsls	r2, r2, #2
 80010a6:	4093      	lsls	r3, r2
 80010a8:	68fa      	ldr	r2, [r7, #12]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010ae:	492f      	ldr	r1, [pc, #188]	@ (800116c <HAL_GPIO_Init+0x2bc>)
 80010b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b2:	089b      	lsrs	r3, r3, #2
 80010b4:	3302      	adds	r3, #2
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d006      	beq.n	80010d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001180 <HAL_GPIO_Init+0x2d0>)
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	492c      	ldr	r1, [pc, #176]	@ (8001180 <HAL_GPIO_Init+0x2d0>)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	608b      	str	r3, [r1, #8]
 80010d4:	e006      	b.n	80010e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001180 <HAL_GPIO_Init+0x2d0>)
 80010d8:	689a      	ldr	r2, [r3, #8]
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	43db      	mvns	r3, r3
 80010de:	4928      	ldr	r1, [pc, #160]	@ (8001180 <HAL_GPIO_Init+0x2d0>)
 80010e0:	4013      	ands	r3, r2
 80010e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d006      	beq.n	80010fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010f0:	4b23      	ldr	r3, [pc, #140]	@ (8001180 <HAL_GPIO_Init+0x2d0>)
 80010f2:	68da      	ldr	r2, [r3, #12]
 80010f4:	4922      	ldr	r1, [pc, #136]	@ (8001180 <HAL_GPIO_Init+0x2d0>)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	60cb      	str	r3, [r1, #12]
 80010fc:	e006      	b.n	800110c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010fe:	4b20      	ldr	r3, [pc, #128]	@ (8001180 <HAL_GPIO_Init+0x2d0>)
 8001100:	68da      	ldr	r2, [r3, #12]
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	43db      	mvns	r3, r3
 8001106:	491e      	ldr	r1, [pc, #120]	@ (8001180 <HAL_GPIO_Init+0x2d0>)
 8001108:	4013      	ands	r3, r2
 800110a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d006      	beq.n	8001126 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001118:	4b19      	ldr	r3, [pc, #100]	@ (8001180 <HAL_GPIO_Init+0x2d0>)
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	4918      	ldr	r1, [pc, #96]	@ (8001180 <HAL_GPIO_Init+0x2d0>)
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	4313      	orrs	r3, r2
 8001122:	604b      	str	r3, [r1, #4]
 8001124:	e006      	b.n	8001134 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001126:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <HAL_GPIO_Init+0x2d0>)
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	43db      	mvns	r3, r3
 800112e:	4914      	ldr	r1, [pc, #80]	@ (8001180 <HAL_GPIO_Init+0x2d0>)
 8001130:	4013      	ands	r3, r2
 8001132:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d021      	beq.n	8001184 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001140:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <HAL_GPIO_Init+0x2d0>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	490e      	ldr	r1, [pc, #56]	@ (8001180 <HAL_GPIO_Init+0x2d0>)
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	600b      	str	r3, [r1, #0]
 800114c:	e021      	b.n	8001192 <HAL_GPIO_Init+0x2e2>
 800114e:	bf00      	nop
 8001150:	10320000 	.word	0x10320000
 8001154:	10310000 	.word	0x10310000
 8001158:	10220000 	.word	0x10220000
 800115c:	10210000 	.word	0x10210000
 8001160:	10120000 	.word	0x10120000
 8001164:	10110000 	.word	0x10110000
 8001168:	40021000 	.word	0x40021000
 800116c:	40010000 	.word	0x40010000
 8001170:	40010800 	.word	0x40010800
 8001174:	40010c00 	.word	0x40010c00
 8001178:	40011000 	.word	0x40011000
 800117c:	40011400 	.word	0x40011400
 8001180:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001184:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <HAL_GPIO_Init+0x304>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	43db      	mvns	r3, r3
 800118c:	4909      	ldr	r1, [pc, #36]	@ (80011b4 <HAL_GPIO_Init+0x304>)
 800118e:	4013      	ands	r3, r2
 8001190:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001194:	3301      	adds	r3, #1
 8001196:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800119e:	fa22 f303 	lsr.w	r3, r2, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f47f ae8e 	bne.w	8000ec4 <HAL_GPIO_Init+0x14>
  }
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	372c      	adds	r7, #44	@ 0x2c
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	40010400 	.word	0x40010400

080011b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	807b      	strh	r3, [r7, #2]
 80011c4:	4613      	mov	r3, r2
 80011c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011c8:	787b      	ldrb	r3, [r7, #1]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ce:	887a      	ldrh	r2, [r7, #2]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011d4:	e003      	b.n	80011de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011d6:	887b      	ldrh	r3, [r7, #2]
 80011d8:	041a      	lsls	r2, r3, #16
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	611a      	str	r2, [r3, #16]
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr

080011e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011fa:	887a      	ldrh	r2, [r7, #2]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4013      	ands	r3, r2
 8001200:	041a      	lsls	r2, r3, #16
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	43d9      	mvns	r1, r3
 8001206:	887b      	ldrh	r3, [r7, #2]
 8001208:	400b      	ands	r3, r1
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	611a      	str	r2, [r3, #16]
}
 8001210:	bf00      	nop
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
	...

0800121c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e272      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b00      	cmp	r3, #0
 8001238:	f000 8087 	beq.w	800134a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800123c:	4b92      	ldr	r3, [pc, #584]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 030c 	and.w	r3, r3, #12
 8001244:	2b04      	cmp	r3, #4
 8001246:	d00c      	beq.n	8001262 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001248:	4b8f      	ldr	r3, [pc, #572]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 030c 	and.w	r3, r3, #12
 8001250:	2b08      	cmp	r3, #8
 8001252:	d112      	bne.n	800127a <HAL_RCC_OscConfig+0x5e>
 8001254:	4b8c      	ldr	r3, [pc, #560]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800125c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001260:	d10b      	bne.n	800127a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001262:	4b89      	ldr	r3, [pc, #548]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d06c      	beq.n	8001348 <HAL_RCC_OscConfig+0x12c>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d168      	bne.n	8001348 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e24c      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001282:	d106      	bne.n	8001292 <HAL_RCC_OscConfig+0x76>
 8001284:	4b80      	ldr	r3, [pc, #512]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a7f      	ldr	r2, [pc, #508]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 800128a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	e02e      	b.n	80012f0 <HAL_RCC_OscConfig+0xd4>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10c      	bne.n	80012b4 <HAL_RCC_OscConfig+0x98>
 800129a:	4b7b      	ldr	r3, [pc, #492]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a7a      	ldr	r2, [pc, #488]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	4b78      	ldr	r3, [pc, #480]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a77      	ldr	r2, [pc, #476]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	e01d      	b.n	80012f0 <HAL_RCC_OscConfig+0xd4>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012bc:	d10c      	bne.n	80012d8 <HAL_RCC_OscConfig+0xbc>
 80012be:	4b72      	ldr	r3, [pc, #456]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a71      	ldr	r2, [pc, #452]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	4b6f      	ldr	r3, [pc, #444]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a6e      	ldr	r2, [pc, #440]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80012d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	e00b      	b.n	80012f0 <HAL_RCC_OscConfig+0xd4>
 80012d8:	4b6b      	ldr	r3, [pc, #428]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a6a      	ldr	r2, [pc, #424]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80012de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	4b68      	ldr	r3, [pc, #416]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a67      	ldr	r2, [pc, #412]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80012ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d013      	beq.n	8001320 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f8:	f7ff fab0 	bl	800085c <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001300:	f7ff faac 	bl	800085c <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b64      	cmp	r3, #100	@ 0x64
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e200      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001312:	4b5d      	ldr	r3, [pc, #372]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f0      	beq.n	8001300 <HAL_RCC_OscConfig+0xe4>
 800131e:	e014      	b.n	800134a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001320:	f7ff fa9c 	bl	800085c <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001328:	f7ff fa98 	bl	800085c <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b64      	cmp	r3, #100	@ 0x64
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e1ec      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133a:	4b53      	ldr	r3, [pc, #332]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f0      	bne.n	8001328 <HAL_RCC_OscConfig+0x10c>
 8001346:	e000      	b.n	800134a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d063      	beq.n	800141e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001356:	4b4c      	ldr	r3, [pc, #304]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f003 030c 	and.w	r3, r3, #12
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00b      	beq.n	800137a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001362:	4b49      	ldr	r3, [pc, #292]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b08      	cmp	r3, #8
 800136c:	d11c      	bne.n	80013a8 <HAL_RCC_OscConfig+0x18c>
 800136e:	4b46      	ldr	r3, [pc, #280]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d116      	bne.n	80013a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137a:	4b43      	ldr	r3, [pc, #268]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d005      	beq.n	8001392 <HAL_RCC_OscConfig+0x176>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d001      	beq.n	8001392 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e1c0      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001392:	4b3d      	ldr	r3, [pc, #244]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	4939      	ldr	r1, [pc, #228]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a6:	e03a      	b.n	800141e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d020      	beq.n	80013f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b0:	4b36      	ldr	r3, [pc, #216]	@ (800148c <HAL_RCC_OscConfig+0x270>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b6:	f7ff fa51 	bl	800085c <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013be:	f7ff fa4d 	bl	800085c <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e1a1      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0f0      	beq.n	80013be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	4927      	ldr	r1, [pc, #156]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	4313      	orrs	r3, r2
 80013ee:	600b      	str	r3, [r1, #0]
 80013f0:	e015      	b.n	800141e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013f2:	4b26      	ldr	r3, [pc, #152]	@ (800148c <HAL_RCC_OscConfig+0x270>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f8:	f7ff fa30 	bl	800085c <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001400:	f7ff fa2c 	bl	800085c <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e180      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001412:	4b1d      	ldr	r3, [pc, #116]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	2b00      	cmp	r3, #0
 8001428:	d03a      	beq.n	80014a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d019      	beq.n	8001466 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001432:	4b17      	ldr	r3, [pc, #92]	@ (8001490 <HAL_RCC_OscConfig+0x274>)
 8001434:	2201      	movs	r2, #1
 8001436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001438:	f7ff fa10 	bl	800085c <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001440:	f7ff fa0c 	bl	800085c <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e160      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001452:	4b0d      	ldr	r3, [pc, #52]	@ (8001488 <HAL_RCC_OscConfig+0x26c>)
 8001454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800145e:	2001      	movs	r0, #1
 8001460:	f000 face 	bl	8001a00 <RCC_Delay>
 8001464:	e01c      	b.n	80014a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001466:	4b0a      	ldr	r3, [pc, #40]	@ (8001490 <HAL_RCC_OscConfig+0x274>)
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146c:	f7ff f9f6 	bl	800085c <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001472:	e00f      	b.n	8001494 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001474:	f7ff f9f2 	bl	800085c <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d908      	bls.n	8001494 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e146      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
 8001486:	bf00      	nop
 8001488:	40021000 	.word	0x40021000
 800148c:	42420000 	.word	0x42420000
 8001490:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001494:	4b92      	ldr	r3, [pc, #584]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1e9      	bne.n	8001474 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 80a6 	beq.w	80015fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ae:	2300      	movs	r3, #0
 80014b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014b2:	4b8b      	ldr	r3, [pc, #556]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10d      	bne.n	80014da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	4b88      	ldr	r3, [pc, #544]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	4a87      	ldr	r2, [pc, #540]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 80014c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014c8:	61d3      	str	r3, [r2, #28]
 80014ca:	4b85      	ldr	r3, [pc, #532]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014d6:	2301      	movs	r3, #1
 80014d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014da:	4b82      	ldr	r3, [pc, #520]	@ (80016e4 <HAL_RCC_OscConfig+0x4c8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d118      	bne.n	8001518 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014e6:	4b7f      	ldr	r3, [pc, #508]	@ (80016e4 <HAL_RCC_OscConfig+0x4c8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a7e      	ldr	r2, [pc, #504]	@ (80016e4 <HAL_RCC_OscConfig+0x4c8>)
 80014ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014f2:	f7ff f9b3 	bl	800085c <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014fa:	f7ff f9af 	bl	800085c <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b64      	cmp	r3, #100	@ 0x64
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e103      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150c:	4b75      	ldr	r3, [pc, #468]	@ (80016e4 <HAL_RCC_OscConfig+0x4c8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d106      	bne.n	800152e <HAL_RCC_OscConfig+0x312>
 8001520:	4b6f      	ldr	r3, [pc, #444]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	4a6e      	ldr	r2, [pc, #440]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	6213      	str	r3, [r2, #32]
 800152c:	e02d      	b.n	800158a <HAL_RCC_OscConfig+0x36e>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10c      	bne.n	8001550 <HAL_RCC_OscConfig+0x334>
 8001536:	4b6a      	ldr	r3, [pc, #424]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001538:	6a1b      	ldr	r3, [r3, #32]
 800153a:	4a69      	ldr	r2, [pc, #420]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 800153c:	f023 0301 	bic.w	r3, r3, #1
 8001540:	6213      	str	r3, [r2, #32]
 8001542:	4b67      	ldr	r3, [pc, #412]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4a66      	ldr	r2, [pc, #408]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001548:	f023 0304 	bic.w	r3, r3, #4
 800154c:	6213      	str	r3, [r2, #32]
 800154e:	e01c      	b.n	800158a <HAL_RCC_OscConfig+0x36e>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	2b05      	cmp	r3, #5
 8001556:	d10c      	bne.n	8001572 <HAL_RCC_OscConfig+0x356>
 8001558:	4b61      	ldr	r3, [pc, #388]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	4a60      	ldr	r2, [pc, #384]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 800155e:	f043 0304 	orr.w	r3, r3, #4
 8001562:	6213      	str	r3, [r2, #32]
 8001564:	4b5e      	ldr	r3, [pc, #376]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	4a5d      	ldr	r2, [pc, #372]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6213      	str	r3, [r2, #32]
 8001570:	e00b      	b.n	800158a <HAL_RCC_OscConfig+0x36e>
 8001572:	4b5b      	ldr	r3, [pc, #364]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001574:	6a1b      	ldr	r3, [r3, #32]
 8001576:	4a5a      	ldr	r2, [pc, #360]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001578:	f023 0301 	bic.w	r3, r3, #1
 800157c:	6213      	str	r3, [r2, #32]
 800157e:	4b58      	ldr	r3, [pc, #352]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	4a57      	ldr	r2, [pc, #348]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001584:	f023 0304 	bic.w	r3, r3, #4
 8001588:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d015      	beq.n	80015be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001592:	f7ff f963 	bl	800085c <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001598:	e00a      	b.n	80015b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800159a:	f7ff f95f 	bl	800085c <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e0b1      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b0:	4b4b      	ldr	r3, [pc, #300]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0ee      	beq.n	800159a <HAL_RCC_OscConfig+0x37e>
 80015bc:	e014      	b.n	80015e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015be:	f7ff f94d 	bl	800085c <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c4:	e00a      	b.n	80015dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c6:	f7ff f949 	bl	800085c <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e09b      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015dc:	4b40      	ldr	r3, [pc, #256]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1ee      	bne.n	80015c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015e8:	7dfb      	ldrb	r3, [r7, #23]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d105      	bne.n	80015fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ee:	4b3c      	ldr	r3, [pc, #240]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	4a3b      	ldr	r2, [pc, #236]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 80015f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 8087 	beq.w	8001712 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001604:	4b36      	ldr	r3, [pc, #216]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 030c 	and.w	r3, r3, #12
 800160c:	2b08      	cmp	r3, #8
 800160e:	d061      	beq.n	80016d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69db      	ldr	r3, [r3, #28]
 8001614:	2b02      	cmp	r3, #2
 8001616:	d146      	bne.n	80016a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001618:	4b33      	ldr	r3, [pc, #204]	@ (80016e8 <HAL_RCC_OscConfig+0x4cc>)
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161e:	f7ff f91d 	bl	800085c <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001626:	f7ff f919 	bl	800085c <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e06d      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001638:	4b29      	ldr	r3, [pc, #164]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1f0      	bne.n	8001626 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800164c:	d108      	bne.n	8001660 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800164e:	4b24      	ldr	r3, [pc, #144]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	4921      	ldr	r1, [pc, #132]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 800165c:	4313      	orrs	r3, r2
 800165e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001660:	4b1f      	ldr	r3, [pc, #124]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a19      	ldr	r1, [r3, #32]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001670:	430b      	orrs	r3, r1
 8001672:	491b      	ldr	r1, [pc, #108]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001678:	4b1b      	ldr	r3, [pc, #108]	@ (80016e8 <HAL_RCC_OscConfig+0x4cc>)
 800167a:	2201      	movs	r2, #1
 800167c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167e:	f7ff f8ed 	bl	800085c <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001686:	f7ff f8e9 	bl	800085c <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e03d      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001698:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f0      	beq.n	8001686 <HAL_RCC_OscConfig+0x46a>
 80016a4:	e035      	b.n	8001712 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a6:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <HAL_RCC_OscConfig+0x4cc>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff f8d6 	bl	800085c <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b4:	f7ff f8d2 	bl	800085c <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e026      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016c6:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <HAL_RCC_OscConfig+0x4c4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x498>
 80016d2:	e01e      	b.n	8001712 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d107      	bne.n	80016ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e019      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40007000 	.word	0x40007000
 80016e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016ec:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <HAL_RCC_OscConfig+0x500>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d106      	bne.n	800170e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800170a:	429a      	cmp	r2, r3
 800170c:	d001      	beq.n	8001712 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40021000 	.word	0x40021000

08001720 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0d0      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001734:	4b6a      	ldr	r3, [pc, #424]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d910      	bls.n	8001764 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001742:	4b67      	ldr	r3, [pc, #412]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f023 0207 	bic.w	r2, r3, #7
 800174a:	4965      	ldr	r1, [pc, #404]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c0>)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	4313      	orrs	r3, r2
 8001750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001752:	4b63      	ldr	r3, [pc, #396]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d001      	beq.n	8001764 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0b8      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d020      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800177c:	4b59      	ldr	r3, [pc, #356]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	4a58      	ldr	r2, [pc, #352]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001782:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001786:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001794:	4b53      	ldr	r3, [pc, #332]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	4a52      	ldr	r2, [pc, #328]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 800179a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800179e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a0:	4b50      	ldr	r3, [pc, #320]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	494d      	ldr	r1, [pc, #308]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d040      	beq.n	8001840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d107      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	4b47      	ldr	r3, [pc, #284]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d115      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e07f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d107      	bne.n	80017ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017de:	4b41      	ldr	r3, [pc, #260]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d109      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e073      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ee:	4b3d      	ldr	r3, [pc, #244]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e06b      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017fe:	4b39      	ldr	r3, [pc, #228]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f023 0203 	bic.w	r2, r3, #3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	4936      	ldr	r1, [pc, #216]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 800180c:	4313      	orrs	r3, r2
 800180e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001810:	f7ff f824 	bl	800085c <HAL_GetTick>
 8001814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001816:	e00a      	b.n	800182e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001818:	f7ff f820 	bl	800085c <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001826:	4293      	cmp	r3, r2
 8001828:	d901      	bls.n	800182e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e053      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182e:	4b2d      	ldr	r3, [pc, #180]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 020c 	and.w	r2, r3, #12
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	429a      	cmp	r2, r3
 800183e:	d1eb      	bne.n	8001818 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001840:	4b27      	ldr	r3, [pc, #156]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d210      	bcs.n	8001870 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184e:	4b24      	ldr	r3, [pc, #144]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 0207 	bic.w	r2, r3, #7
 8001856:	4922      	ldr	r1, [pc, #136]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	4313      	orrs	r3, r2
 800185c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800185e:	4b20      	ldr	r3, [pc, #128]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d001      	beq.n	8001870 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e032      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d008      	beq.n	800188e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800187c:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4916      	ldr	r1, [pc, #88]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 800188a:	4313      	orrs	r3, r2
 800188c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b00      	cmp	r3, #0
 8001898:	d009      	beq.n	80018ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800189a:	4b12      	ldr	r3, [pc, #72]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	490e      	ldr	r1, [pc, #56]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018ae:	f000 f821 	bl	80018f4 <HAL_RCC_GetSysClockFreq>
 80018b2:	4602      	mov	r2, r0
 80018b4:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	490a      	ldr	r1, [pc, #40]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c8>)
 80018c0:	5ccb      	ldrb	r3, [r1, r3]
 80018c2:	fa22 f303 	lsr.w	r3, r2, r3
 80018c6:	4a09      	ldr	r2, [pc, #36]	@ (80018ec <HAL_RCC_ClockConfig+0x1cc>)
 80018c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018ca:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <HAL_RCC_ClockConfig+0x1d0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe ff82 	bl	80007d8 <HAL_InitTick>

  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40022000 	.word	0x40022000
 80018e4:	40021000 	.word	0x40021000
 80018e8:	080024b4 	.word	0x080024b4
 80018ec:	20000000 	.word	0x20000000
 80018f0:	20000004 	.word	0x20000004

080018f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b087      	sub	sp, #28
 80018f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	2300      	movs	r3, #0
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800190e:	4b1e      	ldr	r3, [pc, #120]	@ (8001988 <HAL_RCC_GetSysClockFreq+0x94>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 030c 	and.w	r3, r3, #12
 800191a:	2b04      	cmp	r3, #4
 800191c:	d002      	beq.n	8001924 <HAL_RCC_GetSysClockFreq+0x30>
 800191e:	2b08      	cmp	r3, #8
 8001920:	d003      	beq.n	800192a <HAL_RCC_GetSysClockFreq+0x36>
 8001922:	e027      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001924:	4b19      	ldr	r3, [pc, #100]	@ (800198c <HAL_RCC_GetSysClockFreq+0x98>)
 8001926:	613b      	str	r3, [r7, #16]
      break;
 8001928:	e027      	b.n	800197a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	0c9b      	lsrs	r3, r3, #18
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	4a17      	ldr	r2, [pc, #92]	@ (8001990 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001934:	5cd3      	ldrb	r3, [r2, r3]
 8001936:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d010      	beq.n	8001964 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001942:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <HAL_RCC_GetSysClockFreq+0x94>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	0c5b      	lsrs	r3, r3, #17
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	4a11      	ldr	r2, [pc, #68]	@ (8001994 <HAL_RCC_GetSysClockFreq+0xa0>)
 800194e:	5cd3      	ldrb	r3, [r2, r3]
 8001950:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a0d      	ldr	r2, [pc, #52]	@ (800198c <HAL_RCC_GetSysClockFreq+0x98>)
 8001956:	fb03 f202 	mul.w	r2, r3, r2
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	e004      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a0c      	ldr	r2, [pc, #48]	@ (8001998 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001968:	fb02 f303 	mul.w	r3, r2, r3
 800196c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	613b      	str	r3, [r7, #16]
      break;
 8001972:	e002      	b.n	800197a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001974:	4b05      	ldr	r3, [pc, #20]	@ (800198c <HAL_RCC_GetSysClockFreq+0x98>)
 8001976:	613b      	str	r3, [r7, #16]
      break;
 8001978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800197a:	693b      	ldr	r3, [r7, #16]
}
 800197c:	4618      	mov	r0, r3
 800197e:	371c      	adds	r7, #28
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40021000 	.word	0x40021000
 800198c:	007a1200 	.word	0x007a1200
 8001990:	080024cc 	.word	0x080024cc
 8001994:	080024dc 	.word	0x080024dc
 8001998:	003d0900 	.word	0x003d0900

0800199c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019a0:	4b02      	ldr	r3, [pc, #8]	@ (80019ac <HAL_RCC_GetHCLKFreq+0x10>)
 80019a2:	681b      	ldr	r3, [r3, #0]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	20000000 	.word	0x20000000

080019b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019b4:	f7ff fff2 	bl	800199c <HAL_RCC_GetHCLKFreq>
 80019b8:	4602      	mov	r2, r0
 80019ba:	4b05      	ldr	r3, [pc, #20]	@ (80019d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	0a1b      	lsrs	r3, r3, #8
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	4903      	ldr	r1, [pc, #12]	@ (80019d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019c6:	5ccb      	ldrb	r3, [r1, r3]
 80019c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40021000 	.word	0x40021000
 80019d4:	080024c4 	.word	0x080024c4

080019d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019dc:	f7ff ffde 	bl	800199c <HAL_RCC_GetHCLKFreq>
 80019e0:	4602      	mov	r2, r0
 80019e2:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	0adb      	lsrs	r3, r3, #11
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	4903      	ldr	r1, [pc, #12]	@ (80019fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ee:	5ccb      	ldrb	r3, [r1, r3]
 80019f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40021000 	.word	0x40021000
 80019fc:	080024c4 	.word	0x080024c4

08001a00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a08:	4b0a      	ldr	r3, [pc, #40]	@ (8001a34 <RCC_Delay+0x34>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a38 <RCC_Delay+0x38>)
 8001a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a12:	0a5b      	lsrs	r3, r3, #9
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	fb02 f303 	mul.w	r3, r2, r3
 8001a1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a1c:	bf00      	nop
  }
  while (Delay --);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	1e5a      	subs	r2, r3, #1
 8001a22:	60fa      	str	r2, [r7, #12]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1f9      	bne.n	8001a1c <RCC_Delay+0x1c>
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	20000000 	.word	0x20000000
 8001a38:	10624dd3 	.word	0x10624dd3

08001a3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e042      	b.n	8001ad4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d106      	bne.n	8001a68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7fe fd22 	bl	80004ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2224      	movs	r2, #36	@ 0x24
 8001a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68da      	ldr	r2, [r3, #12]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 fc51 	bl	8002328 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	691a      	ldr	r2, [r3, #16]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001a94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	695a      	ldr	r2, [r3, #20]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001aa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68da      	ldr	r2, [r3, #12]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001ab4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2220      	movs	r2, #32
 8001ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	@ 0x28
 8001ae0:	af02      	add	r7, sp, #8
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b20      	cmp	r3, #32
 8001afa:	d175      	bne.n	8001be8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d002      	beq.n	8001b08 <HAL_UART_Transmit+0x2c>
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e06e      	b.n	8001bea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2221      	movs	r2, #33	@ 0x21
 8001b16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b1a:	f7fe fe9f 	bl	800085c <HAL_GetTick>
 8001b1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	88fa      	ldrh	r2, [r7, #6]
 8001b24:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	88fa      	ldrh	r2, [r7, #6]
 8001b2a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b34:	d108      	bne.n	8001b48 <HAL_UART_Transmit+0x6c>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d104      	bne.n	8001b48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	61bb      	str	r3, [r7, #24]
 8001b46:	e003      	b.n	8001b50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b50:	e02e      	b.n	8001bb0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2180      	movs	r1, #128	@ 0x80
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f000 fa66 	bl	800202e <UART_WaitOnFlagUntilTimeout>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e03a      	b.n	8001bea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10b      	bne.n	8001b92 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	3302      	adds	r3, #2
 8001b8e:	61bb      	str	r3, [r7, #24]
 8001b90:	e007      	b.n	8001ba2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	781a      	ldrb	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1cb      	bne.n	8001b52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2140      	movs	r1, #64	@ 0x40
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f000 fa32 	bl	800202e <UART_WaitOnFlagUntilTimeout>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e006      	b.n	8001bea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2220      	movs	r2, #32
 8001be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	e000      	b.n	8001bea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001be8:	2302      	movs	r3, #2
  }
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3720      	adds	r7, #32
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08c      	sub	sp, #48	@ 0x30
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b20      	cmp	r3, #32
 8001c0c:	d156      	bne.n	8001cbc <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d002      	beq.n	8001c1a <HAL_UART_Transmit_DMA+0x26>
 8001c14:	88fb      	ldrh	r3, [r7, #6]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e04f      	b.n	8001cbe <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	88fa      	ldrh	r2, [r7, #6]
 8001c28:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	88fa      	ldrh	r2, [r7, #6]
 8001c2e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2221      	movs	r2, #33	@ 0x21
 8001c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c42:	4a21      	ldr	r2, [pc, #132]	@ (8001cc8 <HAL_UART_Transmit_DMA+0xd4>)
 8001c44:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c4a:	4a20      	ldr	r2, [pc, #128]	@ (8001ccc <HAL_UART_Transmit_DMA+0xd8>)
 8001c4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c52:	4a1f      	ldr	r2, [pc, #124]	@ (8001cd0 <HAL_UART_Transmit_DMA+0xdc>)
 8001c54:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8001c5e:	f107 0308 	add.w	r3, r7, #8
 8001c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c6a:	6819      	ldr	r1, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	3304      	adds	r3, #4
 8001c72:	461a      	mov	r2, r3
 8001c74:	88fb      	ldrh	r3, [r7, #6]
 8001c76:	f7fe ff87 	bl	8000b88 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001c82:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	3314      	adds	r3, #20
 8001c8a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	e853 3f00 	ldrex	r3, [r3]
 8001c92:	617b      	str	r3, [r7, #20]
   return(result);
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	3314      	adds	r3, #20
 8001ca2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ca4:	627a      	str	r2, [r7, #36]	@ 0x24
 8001ca6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ca8:	6a39      	ldr	r1, [r7, #32]
 8001caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cac:	e841 2300 	strex	r3, r2, [r1]
 8001cb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1e5      	bne.n	8001c84 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	e000      	b.n	8001cbe <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8001cbc:	2302      	movs	r3, #2
  }
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3730      	adds	r7, #48	@ 0x30
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	08001d7d 	.word	0x08001d7d
 8001ccc:	08001e17 	.word	0x08001e17
 8001cd0:	08001f9b 	.word	0x08001f9b

08001cd4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b20      	cmp	r3, #32
 8001cec:	d112      	bne.n	8001d14 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d002      	beq.n	8001cfa <HAL_UART_Receive_DMA+0x26>
 8001cf4:	88fb      	ldrh	r3, [r7, #6]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00b      	b.n	8001d16 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8001d04:	88fb      	ldrh	r3, [r7, #6]
 8001d06:	461a      	mov	r2, r3
 8001d08:	68b9      	ldr	r1, [r7, #8]
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f000 f9e8 	bl	80020e0 <UART_Start_Receive_DMA>
 8001d10:	4603      	mov	r3, r0
 8001d12:	e000      	b.n	8001d16 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001d14:	2302      	movs	r3, #2
  }
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr

08001d42 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr

08001d66 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr

08001d7c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b090      	sub	sp, #64	@ 0x40
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0320 	and.w	r3, r3, #32
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d137      	bne.n	8001e08 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8001d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	3314      	adds	r3, #20
 8001da4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da8:	e853 3f00 	ldrex	r3, [r3]
 8001dac:	623b      	str	r3, [r7, #32]
   return(result);
 8001dae:	6a3b      	ldr	r3, [r7, #32]
 8001db0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001db4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	3314      	adds	r3, #20
 8001dbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001dbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8001dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001dc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001dc6:	e841 2300 	strex	r3, r2, [r1]
 8001dca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1e5      	bne.n	8001d9e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001dd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	330c      	adds	r3, #12
 8001dd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	e853 3f00 	ldrex	r3, [r3]
 8001de0:	60fb      	str	r3, [r7, #12]
   return(result);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001de8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	330c      	adds	r3, #12
 8001df0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001df2:	61fa      	str	r2, [r7, #28]
 8001df4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001df6:	69b9      	ldr	r1, [r7, #24]
 8001df8:	69fa      	ldr	r2, [r7, #28]
 8001dfa:	e841 2300 	strex	r3, r2, [r1]
 8001dfe:	617b      	str	r3, [r7, #20]
   return(result);
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1e5      	bne.n	8001dd2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001e06:	e002      	b.n	8001e0e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8001e08:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001e0a:	f7ff ff88 	bl	8001d1e <HAL_UART_TxCpltCallback>
}
 8001e0e:	bf00      	nop
 8001e10:	3740      	adds	r7, #64	@ 0x40
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e22:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f7ff ff83 	bl	8001d30 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b09c      	sub	sp, #112	@ 0x70
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0320 	and.w	r3, r3, #32
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d172      	bne.n	8001f34 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8001e4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e50:	2200      	movs	r2, #0
 8001e52:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	330c      	adds	r3, #12
 8001e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e5e:	e853 3f00 	ldrex	r3, [r3]
 8001e62:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001e64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e66:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e6a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001e6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	330c      	adds	r3, #12
 8001e72:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001e74:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001e76:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e78:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001e7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e7c:	e841 2300 	strex	r3, r2, [r1]
 8001e80:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001e82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1e5      	bne.n	8001e54 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	3314      	adds	r3, #20
 8001e8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e92:	e853 3f00 	ldrex	r3, [r3]
 8001e96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e9a:	f023 0301 	bic.w	r3, r3, #1
 8001e9e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ea0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	3314      	adds	r3, #20
 8001ea6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001ea8:	647a      	str	r2, [r7, #68]	@ 0x44
 8001eaa:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001eae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001eb0:	e841 2300 	strex	r3, r2, [r1]
 8001eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1e5      	bne.n	8001e88 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ebc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	3314      	adds	r3, #20
 8001ec2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec6:	e853 3f00 	ldrex	r3, [r3]
 8001eca:	623b      	str	r3, [r7, #32]
   return(result);
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
 8001ece:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001ed2:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ed4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	3314      	adds	r3, #20
 8001eda:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001edc:	633a      	str	r2, [r7, #48]	@ 0x30
 8001ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ee0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001ee2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ee4:	e841 2300 	strex	r3, r2, [r1]
 8001ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1e5      	bne.n	8001ebc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001ef0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ef8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d119      	bne.n	8001f34 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	330c      	adds	r3, #12
 8001f06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	e853 3f00 	ldrex	r3, [r3]
 8001f0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f023 0310 	bic.w	r3, r3, #16
 8001f16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001f18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	330c      	adds	r3, #12
 8001f1e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001f20:	61fa      	str	r2, [r7, #28]
 8001f22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f24:	69b9      	ldr	r1, [r7, #24]
 8001f26:	69fa      	ldr	r2, [r7, #28]
 8001f28:	e841 2300 	strex	r3, r2, [r1]
 8001f2c:	617b      	str	r3, [r7, #20]
   return(result);
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1e5      	bne.n	8001f00 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f36:	2200      	movs	r2, #0
 8001f38:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d106      	bne.n	8001f50 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001f42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001f46:	4619      	mov	r1, r3
 8001f48:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001f4a:	f7ff ff0c 	bl	8001d66 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001f4e:	e002      	b.n	8001f56 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8001f50:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001f52:	f7fe fa59 	bl	8000408 <HAL_UART_RxCpltCallback>
}
 8001f56:	bf00      	nop
 8001f58:	3770      	adds	r7, #112	@ 0x70
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b084      	sub	sp, #16
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d108      	bne.n	8001f8c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001f7e:	085b      	lsrs	r3, r3, #1
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	4619      	mov	r1, r3
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f7ff feee 	bl	8001d66 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001f8a:	e002      	b.n	8001f92 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f7ff fed8 	bl	8001d42 <HAL_UART_RxHalfCpltCallback>
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001faa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	bf14      	ite	ne
 8001fba:	2301      	movne	r3, #1
 8001fbc:	2300      	moveq	r3, #0
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b21      	cmp	r3, #33	@ 0x21
 8001fcc:	d108      	bne.n	8001fe0 <UART_DMAError+0x46>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d005      	beq.n	8001fe0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8001fda:	68b8      	ldr	r0, [r7, #8]
 8001fdc:	f000 f91a 	bl	8002214 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	bf14      	ite	ne
 8001fee:	2301      	movne	r3, #1
 8001ff0:	2300      	moveq	r3, #0
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b22      	cmp	r3, #34	@ 0x22
 8002000:	d108      	bne.n	8002014 <UART_DMAError+0x7a>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2200      	movs	r2, #0
 800200c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800200e:	68b8      	ldr	r0, [r7, #8]
 8002010:	f000 f927 	bl	8002262 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002018:	f043 0210 	orr.w	r2, r3, #16
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002020:	68b8      	ldr	r0, [r7, #8]
 8002022:	f7ff fe97 	bl	8001d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b086      	sub	sp, #24
 8002032:	af00      	add	r7, sp, #0
 8002034:	60f8      	str	r0, [r7, #12]
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	603b      	str	r3, [r7, #0]
 800203a:	4613      	mov	r3, r2
 800203c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800203e:	e03b      	b.n	80020b8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002046:	d037      	beq.n	80020b8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002048:	f7fe fc08 	bl	800085c <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	6a3a      	ldr	r2, [r7, #32]
 8002054:	429a      	cmp	r2, r3
 8002056:	d302      	bcc.n	800205e <UART_WaitOnFlagUntilTimeout+0x30>
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e03a      	b.n	80020d8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	d023      	beq.n	80020b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2b80      	cmp	r3, #128	@ 0x80
 8002074:	d020      	beq.n	80020b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2b40      	cmp	r3, #64	@ 0x40
 800207a:	d01d      	beq.n	80020b8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b08      	cmp	r3, #8
 8002088:	d116      	bne.n	80020b8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 f8de 	bl	8002262 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2208      	movs	r2, #8
 80020aa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e00f      	b.n	80020d8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	4013      	ands	r3, r2
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	bf0c      	ite	eq
 80020c8:	2301      	moveq	r3, #1
 80020ca:	2300      	movne	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	461a      	mov	r2, r3
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d0b4      	beq.n	8002040 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b098      	sub	sp, #96	@ 0x60
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	4613      	mov	r3, r2
 80020ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	88fa      	ldrh	r2, [r7, #6]
 80020f8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2222      	movs	r2, #34	@ 0x22
 8002104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800210c:	4a3e      	ldr	r2, [pc, #248]	@ (8002208 <UART_Start_Receive_DMA+0x128>)
 800210e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002114:	4a3d      	ldr	r2, [pc, #244]	@ (800220c <UART_Start_Receive_DMA+0x12c>)
 8002116:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800211c:	4a3c      	ldr	r2, [pc, #240]	@ (8002210 <UART_Start_Receive_DMA+0x130>)
 800211e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002124:	2200      	movs	r2, #0
 8002126:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002128:	f107 0308 	add.w	r3, r7, #8
 800212c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	3304      	adds	r3, #4
 8002138:	4619      	mov	r1, r3
 800213a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	88fb      	ldrh	r3, [r7, #6]
 8002140:	f7fe fd22 	bl	8000b88 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002144:	2300      	movs	r3, #0
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d019      	beq.n	8002196 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	330c      	adds	r3, #12
 8002168:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800216a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800216c:	e853 3f00 	ldrex	r3, [r3]
 8002170:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002178:	65bb      	str	r3, [r7, #88]	@ 0x58
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	330c      	adds	r3, #12
 8002180:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002182:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002184:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002186:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002188:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800218a:	e841 2300 	strex	r3, r2, [r1]
 800218e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8002190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1e5      	bne.n	8002162 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	3314      	adds	r3, #20
 800219c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800219e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021a0:	e853 3f00 	ldrex	r3, [r3]
 80021a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80021a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	3314      	adds	r3, #20
 80021b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80021b6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80021b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80021bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80021be:	e841 2300 	strex	r3, r2, [r1]
 80021c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80021c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1e5      	bne.n	8002196 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	3314      	adds	r3, #20
 80021d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	e853 3f00 	ldrex	r3, [r3]
 80021d8:	617b      	str	r3, [r7, #20]
   return(result);
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	3314      	adds	r3, #20
 80021e8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80021ea:	627a      	str	r2, [r7, #36]	@ 0x24
 80021ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ee:	6a39      	ldr	r1, [r7, #32]
 80021f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021f2:	e841 2300 	strex	r3, r2, [r1]
 80021f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1e5      	bne.n	80021ca <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3760      	adds	r7, #96	@ 0x60
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	08001e33 	.word	0x08001e33
 800220c:	08001f5f 	.word	0x08001f5f
 8002210:	08001f9b 	.word	0x08001f9b

08002214 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002214:	b480      	push	{r7}
 8002216:	b089      	sub	sp, #36	@ 0x24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	330c      	adds	r3, #12
 8002222:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	e853 3f00 	ldrex	r3, [r3]
 800222a:	60bb      	str	r3, [r7, #8]
   return(result);
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002232:	61fb      	str	r3, [r7, #28]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	330c      	adds	r3, #12
 800223a:	69fa      	ldr	r2, [r7, #28]
 800223c:	61ba      	str	r2, [r7, #24]
 800223e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002240:	6979      	ldr	r1, [r7, #20]
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	e841 2300 	strex	r3, r2, [r1]
 8002248:	613b      	str	r3, [r7, #16]
   return(result);
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1e5      	bne.n	800221c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8002258:	bf00      	nop
 800225a:	3724      	adds	r7, #36	@ 0x24
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr

08002262 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002262:	b480      	push	{r7}
 8002264:	b095      	sub	sp, #84	@ 0x54
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	330c      	adds	r3, #12
 8002270:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002274:	e853 3f00 	ldrex	r3, [r3]
 8002278:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800227a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800227c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002280:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	330c      	adds	r3, #12
 8002288:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800228a:	643a      	str	r2, [r7, #64]	@ 0x40
 800228c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800228e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002290:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002292:	e841 2300 	strex	r3, r2, [r1]
 8002296:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1e5      	bne.n	800226a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	3314      	adds	r3, #20
 80022a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	e853 3f00 	ldrex	r3, [r3]
 80022ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f023 0301 	bic.w	r3, r3, #1
 80022b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	3314      	adds	r3, #20
 80022bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022c6:	e841 2300 	strex	r3, r2, [r1]
 80022ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80022cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1e5      	bne.n	800229e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d119      	bne.n	800230e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	330c      	adds	r3, #12
 80022e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	e853 3f00 	ldrex	r3, [r3]
 80022e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	f023 0310 	bic.w	r3, r3, #16
 80022f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	330c      	adds	r3, #12
 80022f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80022fa:	61ba      	str	r2, [r7, #24]
 80022fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022fe:	6979      	ldr	r1, [r7, #20]
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	e841 2300 	strex	r3, r2, [r1]
 8002306:	613b      	str	r3, [r7, #16]
   return(result);
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1e5      	bne.n	80022da <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2220      	movs	r2, #32
 8002312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800231c:	bf00      	nop
 800231e:	3754      	adds	r7, #84	@ 0x54
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr
	...

08002328 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	4313      	orrs	r3, r2
 8002356:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002362:	f023 030c 	bic.w	r3, r3, #12
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6812      	ldr	r2, [r2, #0]
 800236a:	68b9      	ldr	r1, [r7, #8]
 800236c:	430b      	orrs	r3, r1
 800236e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	699a      	ldr	r2, [r3, #24]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a2c      	ldr	r2, [pc, #176]	@ (800243c <UART_SetConfig+0x114>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d103      	bne.n	8002398 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002390:	f7ff fb22 	bl	80019d8 <HAL_RCC_GetPCLK2Freq>
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	e002      	b.n	800239e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002398:	f7ff fb0a 	bl	80019b0 <HAL_RCC_GetPCLK1Freq>
 800239c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	009a      	lsls	r2, r3, #2
 80023a8:	441a      	add	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b4:	4a22      	ldr	r2, [pc, #136]	@ (8002440 <UART_SetConfig+0x118>)
 80023b6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	0119      	lsls	r1, r3, #4
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	009a      	lsls	r2, r3, #2
 80023c8:	441a      	add	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80023d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002440 <UART_SetConfig+0x118>)
 80023d6:	fba3 0302 	umull	r0, r3, r3, r2
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	2064      	movs	r0, #100	@ 0x64
 80023de:	fb00 f303 	mul.w	r3, r0, r3
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	3332      	adds	r3, #50	@ 0x32
 80023e8:	4a15      	ldr	r2, [pc, #84]	@ (8002440 <UART_SetConfig+0x118>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	095b      	lsrs	r3, r3, #5
 80023f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023f4:	4419      	add	r1, r3
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	4613      	mov	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	009a      	lsls	r2, r3, #2
 8002400:	441a      	add	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	fbb2 f2f3 	udiv	r2, r2, r3
 800240c:	4b0c      	ldr	r3, [pc, #48]	@ (8002440 <UART_SetConfig+0x118>)
 800240e:	fba3 0302 	umull	r0, r3, r3, r2
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	2064      	movs	r0, #100	@ 0x64
 8002416:	fb00 f303 	mul.w	r3, r0, r3
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	3332      	adds	r3, #50	@ 0x32
 8002420:	4a07      	ldr	r2, [pc, #28]	@ (8002440 <UART_SetConfig+0x118>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	f003 020f 	and.w	r2, r3, #15
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	440a      	add	r2, r1
 8002432:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002434:	bf00      	nop
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40013800 	.word	0x40013800
 8002440:	51eb851f 	.word	0x51eb851f

08002444 <memset>:
 8002444:	4603      	mov	r3, r0
 8002446:	4402      	add	r2, r0
 8002448:	4293      	cmp	r3, r2
 800244a:	d100      	bne.n	800244e <memset+0xa>
 800244c:	4770      	bx	lr
 800244e:	f803 1b01 	strb.w	r1, [r3], #1
 8002452:	e7f9      	b.n	8002448 <memset+0x4>

08002454 <__libc_init_array>:
 8002454:	b570      	push	{r4, r5, r6, lr}
 8002456:	2600      	movs	r6, #0
 8002458:	4d0c      	ldr	r5, [pc, #48]	@ (800248c <__libc_init_array+0x38>)
 800245a:	4c0d      	ldr	r4, [pc, #52]	@ (8002490 <__libc_init_array+0x3c>)
 800245c:	1b64      	subs	r4, r4, r5
 800245e:	10a4      	asrs	r4, r4, #2
 8002460:	42a6      	cmp	r6, r4
 8002462:	d109      	bne.n	8002478 <__libc_init_array+0x24>
 8002464:	f000 f81a 	bl	800249c <_init>
 8002468:	2600      	movs	r6, #0
 800246a:	4d0a      	ldr	r5, [pc, #40]	@ (8002494 <__libc_init_array+0x40>)
 800246c:	4c0a      	ldr	r4, [pc, #40]	@ (8002498 <__libc_init_array+0x44>)
 800246e:	1b64      	subs	r4, r4, r5
 8002470:	10a4      	asrs	r4, r4, #2
 8002472:	42a6      	cmp	r6, r4
 8002474:	d105      	bne.n	8002482 <__libc_init_array+0x2e>
 8002476:	bd70      	pop	{r4, r5, r6, pc}
 8002478:	f855 3b04 	ldr.w	r3, [r5], #4
 800247c:	4798      	blx	r3
 800247e:	3601      	adds	r6, #1
 8002480:	e7ee      	b.n	8002460 <__libc_init_array+0xc>
 8002482:	f855 3b04 	ldr.w	r3, [r5], #4
 8002486:	4798      	blx	r3
 8002488:	3601      	adds	r6, #1
 800248a:	e7f2      	b.n	8002472 <__libc_init_array+0x1e>
 800248c:	080024e0 	.word	0x080024e0
 8002490:	080024e0 	.word	0x080024e0
 8002494:	080024e0 	.word	0x080024e0
 8002498:	080024e4 	.word	0x080024e4

0800249c <_init>:
 800249c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800249e:	bf00      	nop
 80024a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024a2:	bc08      	pop	{r3}
 80024a4:	469e      	mov	lr, r3
 80024a6:	4770      	bx	lr

080024a8 <_fini>:
 80024a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024aa:	bf00      	nop
 80024ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ae:	bc08      	pop	{r3}
 80024b0:	469e      	mov	lr, r3
 80024b2:	4770      	bx	lr
